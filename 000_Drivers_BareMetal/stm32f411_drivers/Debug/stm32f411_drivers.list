
stm32f411_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000738  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008d0  080008d8  000108d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008d0  080008d0  000108d8  2**0
                  CONTENTS
  4 .ARM          00000000  080008d0  080008d0  000108d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008d0  080008d8  000108d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008d0  080008d0  000108d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008d4  080008d4  000108d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080008d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080008d8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000108d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a0e  00000000  00000000  00010908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002a4  00000000  00000000  00011316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  000115c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00011688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001cd1  00000000  00000000  00011728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e9e  00000000  00000000  000133f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008381  00000000  00000000  00014297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001c618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000288  00000000  00000000  0001c668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080008b8 	.word	0x080008b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080008b8 	.word	0x080008b8

080001d8 <delay>:
#include "stm32f411xx.h"
#include "stm32f411xx_gpio_driver.h"
#include <string.h>

void delay(void)		//provides a delay
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000 ; i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	0007a11f 	.word	0x0007a11f

08000204 <main>:

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed, GpioBtn;									//button @PA0
	memset(&GpioLed,0,sizeof(GpioLed));
 800020a:	f107 030c 	add.w	r3, r7, #12
 800020e:	220c      	movs	r2, #12
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fb48 	bl	80008a8 <memset>
	memset(&GpioBtn,0,sizeof(GpioLed));
 8000218:	463b      	mov	r3, r7
 800021a:	220c      	movs	r2, #12
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fb42 	bl	80008a8 <memset>

	GpioLed.pGPIOx = GPIOD;											//led configuration
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <main+0x80>)
 8000226:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;			//pin no. 12
 8000228:	230c      	movs	r3, #12
 800022a:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;			//output type
 800022c:	2301      	movs	r3, #1
 800022e:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;			//speed = fast
 8000230:	2302      	movs	r3, #2
 8000232:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;		//output type = push pull
 8000234:	2300      	movs	r3, #0
 8000236:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdcontrol = GPIO_NO_PUPD;	//input type no need to configure as per my understanding.
 8000238:	2300      	movs	r3, #0
 800023a:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockcontrol(GPIOD,ENABLE);							//enable the peripheral clock for GPIO PORT D
 800023c:	2101      	movs	r1, #1
 800023e:	4811      	ldr	r0, [pc, #68]	; (8000284 <main+0x80>)
 8000240:	f000 f85e 	bl	8000300 <GPIO_PeriClockcontrol>
	GPIO_Init(&GpioLed);											//Configuration got initialized here.
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f8f9 	bl	8000440 <GPIO_Init>

	GpioBtn.pGPIOx = GPIOA;
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <main+0x84>)
 8000250:	603b      	str	r3, [r7, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000252:	2300      	movs	r3, #0
 8000254:	713b      	strb	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;				//here mode should be selected for FTSR OR RTSR - falling edge external interrupt trigger and rising edge external interrupt trigger.
 8000256:	2305      	movs	r3, #5
 8000258:	717b      	strb	r3, [r7, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800025a:	2302      	movs	r3, #2
 800025c:	71bb      	strb	r3, [r7, #6]
	//GpioBtn.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdcontrol = GPIO_NO_PUPD;
 800025e:	2300      	movs	r3, #0
 8000260:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockcontrol(GPIOA,ENABLE);
 8000262:	2101      	movs	r1, #1
 8000264:	4808      	ldr	r0, [pc, #32]	; (8000288 <main+0x84>)
 8000266:	f000 f84b 	bl	8000300 <GPIO_PeriClockcontrol>
	GPIO_Init(&GpioBtn);
 800026a:	463b      	mov	r3, r7
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f8e7 	bl	8000440 <GPIO_Init>

	//IRQ CONFIGURATION
	GPIO_IRQConfig(IRQ_NO_EXTI0,ENABLE);
 8000272:	2101      	movs	r1, #1
 8000274:	2006      	movs	r0, #6
 8000276:	f000 fa21 	bl	80006bc <GPIO_IRQConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0,15);	//This is optional
 800027a:	210f      	movs	r1, #15
 800027c:	2006      	movs	r0, #6
 800027e:	f000 faa3 	bl	80007c8 <GPIO_IRQPriorityConfig>
			GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_NO_12);
			delay();

		}
	}*/
	while(1);
 8000282:	e7fe      	b.n	8000282 <main+0x7e>
 8000284:	40020c00 	.word	0x40020c00
 8000288:	40020000 	.word	0x40020000

0800028c <EXTI0_IRQHandler>:
	return 0;

}
//Implementation of ISR
void EXTI0_IRQHandler(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	delay();
 8000290:	f7ff ffa2 	bl	80001d8 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000294:	2000      	movs	r0, #0
 8000296:	f000 fac1 	bl	800081c <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_NO_12);
 800029a:	210c      	movs	r1, #12
 800029c:	4802      	ldr	r0, [pc, #8]	; (80002a8 <EXTI0_IRQHandler+0x1c>)
 800029e:	f000 f9f7 	bl	8000690 <GPIO_ToggleOutputPin>

}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40020c00 	.word	0x40020c00

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 fac1 	bl	8000860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ff91 	bl	8000204 <main>

080002e2 <LoopForever>:

LoopForever:
  b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f0:	080008d8 	.word	0x080008d8
  ldr r2, =_sbss
 80002f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f8:	2000001c 	.word	0x2000001c

080002fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC_IRQHandler>
	...

08000300 <GPIO_PeriClockcontrol>:
 *
 * @note			- none
 ********************************************************************************************************************/

void GPIO_PeriClockcontrol(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	460b      	mov	r3, r1
 800030a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d141      	bne.n	8000396 <GPIO_PeriClockcontrol+0x96>
	{
		if(pGPIOx == GPIOA)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a43      	ldr	r2, [pc, #268]	; (8000424 <GPIO_PeriClockcontrol+0x124>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockcontrol+0x28>
		{
			GPIOA_PCLK_EN();
 800031a:	4b43      	ldr	r3, [pc, #268]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a42      	ldr	r2, [pc, #264]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
	else if(pGPIOx == GPIOH)
	{
		GPIOH_PCLK_DI();
	}

}
 8000326:	e077      	b.n	8000418 <GPIO_PeriClockcontrol+0x118>
		else if(pGPIOx == GPIOB)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a40      	ldr	r2, [pc, #256]	; (800042c <GPIO_PeriClockcontrol+0x12c>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PeriClockcontrol+0x3e>
			GPIOB_PCLK_EN();
 8000330:	4b3d      	ldr	r3, [pc, #244]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a3c      	ldr	r2, [pc, #240]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033c:	e06c      	b.n	8000418 <GPIO_PeriClockcontrol+0x118>
		else if(pGPIOx == GPIOC)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a3b      	ldr	r2, [pc, #236]	; (8000430 <GPIO_PeriClockcontrol+0x130>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockcontrol+0x54>
			GPIOC_PCLK_EN();
 8000346:	4b38      	ldr	r3, [pc, #224]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a37      	ldr	r2, [pc, #220]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 800034c:	f043 0304 	orr.w	r3, r3, #4
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000352:	e061      	b.n	8000418 <GPIO_PeriClockcontrol+0x118>
		else if(pGPIOx == GPIOD)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a37      	ldr	r2, [pc, #220]	; (8000434 <GPIO_PeriClockcontrol+0x134>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClockcontrol+0x6a>
			GPIOD_PCLK_EN();
 800035c:	4b32      	ldr	r3, [pc, #200]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a31      	ldr	r2, [pc, #196]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e056      	b.n	8000418 <GPIO_PeriClockcontrol+0x118>
		else if(pGPIOx == GPIOE)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a32      	ldr	r2, [pc, #200]	; (8000438 <GPIO_PeriClockcontrol+0x138>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockcontrol+0x80>
			GPIOE_PCLK_EN();
 8000372:	4b2d      	ldr	r3, [pc, #180]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a2c      	ldr	r2, [pc, #176]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 8000378:	f043 0310 	orr.w	r3, r3, #16
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e04b      	b.n	8000418 <GPIO_PeriClockcontrol+0x118>
		else if(pGPIOx == GPIOH)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a2e      	ldr	r2, [pc, #184]	; (800043c <GPIO_PeriClockcontrol+0x13c>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d147      	bne.n	8000418 <GPIO_PeriClockcontrol+0x118>
			GPIOH_PCLK_EN();
 8000388:	4b27      	ldr	r3, [pc, #156]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a26      	ldr	r2, [pc, #152]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 800038e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	e040      	b.n	8000418 <GPIO_PeriClockcontrol+0x118>
	else if(pGPIOx == GPIOA)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a22      	ldr	r2, [pc, #136]	; (8000424 <GPIO_PeriClockcontrol+0x124>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClockcontrol+0xac>
		GPIOA_PCLK_DI();
 800039e:	4b22      	ldr	r3, [pc, #136]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	4a21      	ldr	r2, [pc, #132]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 80003a4:	f023 0301 	bic.w	r3, r3, #1
 80003a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003aa:	e035      	b.n	8000418 <GPIO_PeriClockcontrol+0x118>
	else if(pGPIOx == GPIOB)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a1f      	ldr	r2, [pc, #124]	; (800042c <GPIO_PeriClockcontrol+0x12c>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PeriClockcontrol+0xc2>
		GPIOB_PCLK_DI();
 80003b4:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a1b      	ldr	r2, [pc, #108]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 80003ba:	f023 0302 	bic.w	r3, r3, #2
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c0:	e02a      	b.n	8000418 <GPIO_PeriClockcontrol+0x118>
	else if(pGPIOx == GPIOC)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a1a      	ldr	r2, [pc, #104]	; (8000430 <GPIO_PeriClockcontrol+0x130>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockcontrol+0xd8>
		GPIOC_PCLK_DI();
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a16      	ldr	r2, [pc, #88]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 80003d0:	f023 0304 	bic.w	r3, r3, #4
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d6:	e01f      	b.n	8000418 <GPIO_PeriClockcontrol+0x118>
	else if(pGPIOx == GPIOD)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a16      	ldr	r2, [pc, #88]	; (8000434 <GPIO_PeriClockcontrol+0x134>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockcontrol+0xee>
		GPIOD_PCLK_DI();
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e4:	4a10      	ldr	r2, [pc, #64]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 80003e6:	f023 0308 	bic.w	r3, r3, #8
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ec:	e014      	b.n	8000418 <GPIO_PeriClockcontrol+0x118>
	else if(pGPIOx == GPIOE)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a11      	ldr	r2, [pc, #68]	; (8000438 <GPIO_PeriClockcontrol+0x138>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockcontrol+0x104>
		GPIOE_PCLK_DI();
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 80003fc:	f023 0310 	bic.w	r3, r3, #16
 8000400:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000402:	e009      	b.n	8000418 <GPIO_PeriClockcontrol+0x118>
	else if(pGPIOx == GPIOH)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a0d      	ldr	r2, [pc, #52]	; (800043c <GPIO_PeriClockcontrol+0x13c>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d105      	bne.n	8000418 <GPIO_PeriClockcontrol+0x118>
		GPIOH_PCLK_DI();
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a05      	ldr	r2, [pc, #20]	; (8000428 <GPIO_PeriClockcontrol+0x128>)
 8000412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	40020000 	.word	0x40020000
 8000428:	40023800 	.word	0x40023800
 800042c:	40020400 	.word	0x40020400
 8000430:	40020800 	.word	0x40020800
 8000434:	40020c00 	.word	0x40020c00
 8000438:	40021000 	.word	0x40021000
 800043c:	40021c00 	.word	0x40021c00

08000440 <GPIO_Init>:
 * @return			- none
 *
 * @note			- none
 ********************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)		//GPIO_Handle_t is a structure and now *pGPIOHandle point towards it
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; //temp.register
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]

	//1. configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)		//Check the pinmode value is less than 3. if greater than 3 it is interupt type. now we handling the non interupt type
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	795b      	ldrb	r3, [r3, #5]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d81f      	bhi.n	8000494 <GPIO_Init+0x54>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));	//temp = pin_number*2
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	795b      	ldrb	r3, [r3, #5]
 8000458:	461a      	mov	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	fa02 f303 	lsl.w	r3, r2, r3
 8000464:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing the bits before setting . 0x03 = 0b00000011 left shifted
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	4619      	mov	r1, r3
 8000472:	2303      	movs	r3, #3
 8000474:	408b      	lsls	r3, r1
 8000476:	43db      	mvns	r3, r3
 8000478:	4619      	mov	r1, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	400a      	ands	r2, r1
 8000480:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting the bits to register
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	6819      	ldr	r1, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	68fa      	ldr	r2, [r7, #12]
 800048e:	430a      	orrs	r2, r1
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	e05c      	b.n	800054e <GPIO_Init+0x10e>

	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	2b04      	cmp	r3, #4
 800049a:	d117      	bne.n	80004cc <GPIO_Init+0x8c>
		{ 	//1. Configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800049c:	4b7b      	ldr	r3, [pc, #492]	; (800068c <GPIO_Init+0x24c>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	7912      	ldrb	r2, [r2, #4]
 80004a4:	4611      	mov	r1, r2
 80004a6:	2201      	movs	r2, #1
 80004a8:	408a      	lsls	r2, r1
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a77      	ldr	r2, [pc, #476]	; (800068c <GPIO_Init+0x24c>)
 80004ae:	430b      	orrs	r3, r1
 80004b0:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b2:	4b76      	ldr	r3, [pc, #472]	; (800068c <GPIO_Init+0x24c>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	7912      	ldrb	r2, [r2, #4]
 80004ba:	4611      	mov	r1, r2
 80004bc:	2201      	movs	r2, #1
 80004be:	408a      	lsls	r2, r1
 80004c0:	43d2      	mvns	r2, r2
 80004c2:	4611      	mov	r1, r2
 80004c4:	4a71      	ldr	r2, [pc, #452]	; (800068c <GPIO_Init+0x24c>)
 80004c6:	400b      	ands	r3, r1
 80004c8:	6093      	str	r3, [r2, #8]
 80004ca:	e035      	b.n	8000538 <GPIO_Init+0xf8>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	795b      	ldrb	r3, [r3, #5]
 80004d0:	2b05      	cmp	r3, #5
 80004d2:	d117      	bne.n	8000504 <GPIO_Init+0xc4>
		{
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d4:	4b6d      	ldr	r3, [pc, #436]	; (800068c <GPIO_Init+0x24c>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	7912      	ldrb	r2, [r2, #4]
 80004dc:	4611      	mov	r1, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	408a      	lsls	r2, r1
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a69      	ldr	r2, [pc, #420]	; (800068c <GPIO_Init+0x24c>)
 80004e6:	430b      	orrs	r3, r1
 80004e8:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ea:	4b68      	ldr	r3, [pc, #416]	; (800068c <GPIO_Init+0x24c>)
 80004ec:	68db      	ldr	r3, [r3, #12]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	7912      	ldrb	r2, [r2, #4]
 80004f2:	4611      	mov	r1, r2
 80004f4:	2201      	movs	r2, #1
 80004f6:	408a      	lsls	r2, r1
 80004f8:	43d2      	mvns	r2, r2
 80004fa:	4611      	mov	r1, r2
 80004fc:	4a63      	ldr	r2, [pc, #396]	; (800068c <GPIO_Init+0x24c>)
 80004fe:	400b      	ands	r3, r1
 8000500:	60d3      	str	r3, [r2, #12]
 8000502:	e019      	b.n	8000538 <GPIO_Init+0xf8>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	795b      	ldrb	r3, [r3, #5]
 8000508:	2b06      	cmp	r3, #6
 800050a:	d115      	bne.n	8000538 <GPIO_Init+0xf8>
		{
			//1. configure both FTSR and RTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050c:	4b5f      	ldr	r3, [pc, #380]	; (800068c <GPIO_Init+0x24c>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	7912      	ldrb	r2, [r2, #4]
 8000514:	4611      	mov	r1, r2
 8000516:	2201      	movs	r2, #1
 8000518:	408a      	lsls	r2, r1
 800051a:	4611      	mov	r1, r2
 800051c:	4a5b      	ldr	r2, [pc, #364]	; (800068c <GPIO_Init+0x24c>)
 800051e:	430b      	orrs	r3, r1
 8000520:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000522:	4b5a      	ldr	r3, [pc, #360]	; (800068c <GPIO_Init+0x24c>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	7912      	ldrb	r2, [r2, #4]
 800052a:	4611      	mov	r1, r2
 800052c:	2201      	movs	r2, #1
 800052e:	408a      	lsls	r2, r1
 8000530:	4611      	mov	r1, r2
 8000532:	4a56      	ldr	r2, [pc, #344]	; (800068c <GPIO_Init+0x24c>)
 8000534:	430b      	orrs	r3, r1
 8000536:	6093      	str	r3, [r2, #8]
		}
		//2. Configure the GPIO Port selection in SYSCFG_EXTICR

		//3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000538:	4b54      	ldr	r3, [pc, #336]	; (800068c <GPIO_Init+0x24c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	7912      	ldrb	r2, [r2, #4]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	4611      	mov	r1, r2
 8000548:	4a50      	ldr	r2, [pc, #320]	; (800068c <GPIO_Init+0x24c>)
 800054a:	430b      	orrs	r3, r1
 800054c:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	799b      	ldrb	r3, [r3, #6]
 8000556:	461a      	mov	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	fa02 f303 	lsl.w	r3, r2, r3
 8000562:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	689a      	ldr	r2, [r3, #8]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	4619      	mov	r1, r3
 8000570:	2303      	movs	r3, #3
 8000572:	408b      	lsls	r3, r1
 8000574:	43db      	mvns	r3, r3
 8000576:	4619      	mov	r1, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	400a      	ands	r2, r1
 800057e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //settings the bits to register
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6899      	ldr	r1, [r3, #8]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	430a      	orrs	r2, r1
 800058e:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdcontrol << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	79db      	ldrb	r3, [r3, #7]
 8000598:	461a      	mov	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	791b      	ldrb	r3, [r3, #4]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	68da      	ldr	r2, [r3, #12]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	4619      	mov	r1, r3
 80005b2:	2303      	movs	r3, #3
 80005b4:	408b      	lsls	r3, r1
 80005b6:	43db      	mvns	r3, r3
 80005b8:	4619      	mov	r1, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	400a      	ands	r2, r1
 80005c0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //settings the bits to register
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	68d9      	ldr	r1, [r3, #12]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	430a      	orrs	r2, r1
 80005d0:	60da      	str	r2, [r3, #12]
	temp = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]

	//4. Configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7a1b      	ldrb	r3, [r3, #8]
 80005da:	461a      	mov	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791b      	ldrb	r3, [r3, #4]
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	4619      	mov	r1, r3
 80005f2:	2301      	movs	r3, #1
 80005f4:	408b      	lsls	r3, r1
 80005f6:	43db      	mvns	r3, r3
 80005f8:	4619      	mov	r1, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	400a      	ands	r2, r1
 8000600:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //settings the bits to register
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6859      	ldr	r1, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	430a      	orrs	r2, r1
 8000610:	605a      	str	r2, [r3, #4]

	//5. confiqure the alt funtionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	795b      	ldrb	r3, [r3, #5]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d131      	bne.n	800067e <GPIO_Init+0x23e>
	{
	//Configure the alternate function register.
	uint8_t temp1, temp2;
	temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; //helps to select ALTFN[0] AND ALTFN[1]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	08db      	lsrs	r3, r3, #3
 8000620:	72fb      	strb	r3, [r7, #11]
	temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;	//PIN_NUMBER %(mode) 8 - identifyies the pin number within the 32 bit register
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	72bb      	strb	r3, [r7, #10]
	pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4*temp2)); //clearing
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	7afa      	ldrb	r2, [r7, #11]
 8000632:	3208      	adds	r2, #8
 8000634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000638:	7abb      	ldrb	r3, [r7, #10]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	220f      	movs	r2, #15
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	43db      	mvns	r3, r3
 8000644:	4618      	mov	r0, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	7afa      	ldrb	r2, [r7, #11]
 800064c:	4001      	ands	r1, r0
 800064e:	3208      	adds	r2, #8
 8000650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2));
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	7afa      	ldrb	r2, [r7, #11]
 800065a:	3208      	adds	r2, #8
 800065c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	7a5b      	ldrb	r3, [r3, #9]
 8000664:	461a      	mov	r2, r3
 8000666:	7abb      	ldrb	r3, [r7, #10]
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	4618      	mov	r0, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	7afa      	ldrb	r2, [r7, #11]
 8000676:	4301      	orrs	r1, r0
 8000678:	3208      	adds	r2, #8
 800067a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40013c00 	.word	0x40013c00

08000690 <GPIO_ToggleOutputPin>:
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value)
{
	pGPIOx->ODR = Value;
}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= ( 1 << PinNumber);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	2101      	movs	r1, #1
 80006a4:	fa01 f202 	lsl.w	r2, r1, r2
 80006a8:	405a      	eors	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	615a      	str	r2, [r3, #20]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <GPIO_IRQConfig>:
 * ISERx: Interrupt Set-enable Registers
 * ICERx : Interrupt Clear-enable Registers
 */

void GPIO_IRQConfig(uint8_t IRQNumber,  uint8_t EnorDi) //removed uint8_t IRQPriority,
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
 if(EnorDi == ENABLE) 								//Set interrupt
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d133      	bne.n	800073a <GPIO_IRQConfig+0x7e>
 {
	 if(IRQNumber <= 31)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b1f      	cmp	r3, #31
 80006d6:	d80a      	bhi.n	80006ee <GPIO_IRQConfig+0x32>
	 {
		 *NVIC_ISER0 |= ( 1 <<IRQNumber);
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <GPIO_IRQConfig+0xf4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	2101      	movs	r1, #1
 80006e0:	fa01 f202 	lsl.w	r2, r1, r2
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a32      	ldr	r2, [pc, #200]	; (80007b0 <GPIO_IRQConfig+0xf4>)
 80006e8:	430b      	orrs	r3, r1
 80006ea:	6013      	str	r3, [r2, #0]
	 else if(IRQNumber >= 64 && IRQNumber < 96)
	 {
		*NVIC_ICER2 |= ( 1 <<(IRQNumber %32));
	 }
 }
}
 80006ec:	e059      	b.n	80007a2 <GPIO_IRQConfig+0xe6>
	 else if(IRQNumber > 31 && IRQNumber < 64)
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	d90f      	bls.n	8000714 <GPIO_IRQConfig+0x58>
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b3f      	cmp	r3, #63	; 0x3f
 80006f8:	d80c      	bhi.n	8000714 <GPIO_IRQConfig+0x58>
		*NVIC_ISER1 |= ( 1 <<(IRQNumber %32));
 80006fa:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <GPIO_IRQConfig+0xf8>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	79fa      	ldrb	r2, [r7, #7]
 8000700:	f002 021f 	and.w	r2, r2, #31
 8000704:	2101      	movs	r1, #1
 8000706:	fa01 f202 	lsl.w	r2, r1, r2
 800070a:	4611      	mov	r1, r2
 800070c:	4a29      	ldr	r2, [pc, #164]	; (80007b4 <GPIO_IRQConfig+0xf8>)
 800070e:	430b      	orrs	r3, r1
 8000710:	6013      	str	r3, [r2, #0]
 8000712:	e046      	b.n	80007a2 <GPIO_IRQConfig+0xe6>
	 else if(IRQNumber >= 64 && IRQNumber < 96)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b3f      	cmp	r3, #63	; 0x3f
 8000718:	d943      	bls.n	80007a2 <GPIO_IRQConfig+0xe6>
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b5f      	cmp	r3, #95	; 0x5f
 800071e:	d840      	bhi.n	80007a2 <GPIO_IRQConfig+0xe6>
		*NVIC_ISER2 |= ( 1 <<(IRQNumber %32));
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <GPIO_IRQConfig+0xfc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	f002 021f 	and.w	r2, r2, #31
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	4611      	mov	r1, r2
 8000732:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <GPIO_IRQConfig+0xfc>)
 8000734:	430b      	orrs	r3, r1
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	e033      	b.n	80007a2 <GPIO_IRQConfig+0xe6>
	 if(IRQNumber <= 31)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b1f      	cmp	r3, #31
 800073e:	d80a      	bhi.n	8000756 <GPIO_IRQConfig+0x9a>
		 *NVIC_ICER0 |= ( 1 <<IRQNumber);
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <GPIO_IRQConfig+0x100>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	79fa      	ldrb	r2, [r7, #7]
 8000746:	2101      	movs	r1, #1
 8000748:	fa01 f202 	lsl.w	r2, r1, r2
 800074c:	4611      	mov	r1, r2
 800074e:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <GPIO_IRQConfig+0x100>)
 8000750:	430b      	orrs	r3, r1
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	e025      	b.n	80007a2 <GPIO_IRQConfig+0xe6>
	 else if(IRQNumber > 31 && IRQNumber < 64)
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b1f      	cmp	r3, #31
 800075a:	d90f      	bls.n	800077c <GPIO_IRQConfig+0xc0>
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b3f      	cmp	r3, #63	; 0x3f
 8000760:	d80c      	bhi.n	800077c <GPIO_IRQConfig+0xc0>
		*NVIC_ICER1 |= ( 1 <<(IRQNumber %32));
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <GPIO_IRQConfig+0x104>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	f002 021f 	and.w	r2, r2, #31
 800076c:	2101      	movs	r1, #1
 800076e:	fa01 f202 	lsl.w	r2, r1, r2
 8000772:	4611      	mov	r1, r2
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <GPIO_IRQConfig+0x104>)
 8000776:	430b      	orrs	r3, r1
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	e012      	b.n	80007a2 <GPIO_IRQConfig+0xe6>
	 else if(IRQNumber >= 64 && IRQNumber < 96)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b3f      	cmp	r3, #63	; 0x3f
 8000780:	d90f      	bls.n	80007a2 <GPIO_IRQConfig+0xe6>
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b5f      	cmp	r3, #95	; 0x5f
 8000786:	d80c      	bhi.n	80007a2 <GPIO_IRQConfig+0xe6>
		*NVIC_ICER2 |= ( 1 <<(IRQNumber %32));
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <GPIO_IRQConfig+0x108>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	f002 021f 	and.w	r2, r2, #31
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	4611      	mov	r1, r2
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <GPIO_IRQConfig+0x108>)
 800079c:	430b      	orrs	r3, r1
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	e7ff      	b.n	80007a2 <GPIO_IRQConfig+0xe6>
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000e100 	.word	0xe000e100
 80007b4:	e000e104 	.word	0xe000e104
 80007b8:	e000e108 	.word	0xe000e108
 80007bc:	e000e180 	.word	0xe000e180
 80007c0:	e000e184 	.word	0xe000e184
 80007c4:	e000e188 	.word	0xe000e188

080007c8 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
	//1. Interrupt Priority Register
	uint8_t iprx = IRQNumber / 4;
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 80007e2:	7bbb      	ldrb	r3, [r7, #14]
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	3304      	adds	r3, #4
 80007ea:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + (iprx)) |= (IRQPriority << shift_amount);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80007f4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80007f8:	6819      	ldr	r1, [r3, #0]
 80007fa:	7b7b      	ldrb	r3, [r7, #13]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	409a      	lsls	r2, r3
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000808:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800080c:	430a      	orrs	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <GPIO_IRQHandling>:

void GPIO_IRQHandling(int8_t PinNumber)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
/*clear the EXTI PR Register corresponding to the pin number
 * When an interrupt occurs, the corresponding bit in the PR register is set to indicate that the interrupt is pending.
 */
	if(EXTI->PR & (1 << PinNumber))		//check both are same or not
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <GPIO_IRQHandling+0x40>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800082e:	2101      	movs	r1, #1
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	4013      	ands	r3, r2
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00a      	beq.n	8000850 <GPIO_IRQHandling+0x34>
	{
		//clear
		EXTI->PR |= (1 << PinNumber);
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <GPIO_IRQHandling+0x40>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000842:	2101      	movs	r1, #1
 8000844:	fa01 f202 	lsl.w	r2, r1, r2
 8000848:	4611      	mov	r1, r2
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <GPIO_IRQHandling+0x40>)
 800084c:	430b      	orrs	r3, r1
 800084e:	6153      	str	r3, [r2, #20]
	}

}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	40013c00 	.word	0x40013c00

08000860 <__libc_init_array>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	4d0d      	ldr	r5, [pc, #52]	; (8000898 <__libc_init_array+0x38>)
 8000864:	4c0d      	ldr	r4, [pc, #52]	; (800089c <__libc_init_array+0x3c>)
 8000866:	1b64      	subs	r4, r4, r5
 8000868:	10a4      	asrs	r4, r4, #2
 800086a:	2600      	movs	r6, #0
 800086c:	42a6      	cmp	r6, r4
 800086e:	d109      	bne.n	8000884 <__libc_init_array+0x24>
 8000870:	4d0b      	ldr	r5, [pc, #44]	; (80008a0 <__libc_init_array+0x40>)
 8000872:	4c0c      	ldr	r4, [pc, #48]	; (80008a4 <__libc_init_array+0x44>)
 8000874:	f000 f820 	bl	80008b8 <_init>
 8000878:	1b64      	subs	r4, r4, r5
 800087a:	10a4      	asrs	r4, r4, #2
 800087c:	2600      	movs	r6, #0
 800087e:	42a6      	cmp	r6, r4
 8000880:	d105      	bne.n	800088e <__libc_init_array+0x2e>
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f855 3b04 	ldr.w	r3, [r5], #4
 8000888:	4798      	blx	r3
 800088a:	3601      	adds	r6, #1
 800088c:	e7ee      	b.n	800086c <__libc_init_array+0xc>
 800088e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000892:	4798      	blx	r3
 8000894:	3601      	adds	r6, #1
 8000896:	e7f2      	b.n	800087e <__libc_init_array+0x1e>
 8000898:	080008d0 	.word	0x080008d0
 800089c:	080008d0 	.word	0x080008d0
 80008a0:	080008d0 	.word	0x080008d0
 80008a4:	080008d4 	.word	0x080008d4

080008a8 <memset>:
 80008a8:	4402      	add	r2, r0
 80008aa:	4603      	mov	r3, r0
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d100      	bne.n	80008b2 <memset+0xa>
 80008b0:	4770      	bx	lr
 80008b2:	f803 1b01 	strb.w	r1, [r3], #1
 80008b6:	e7f9      	b.n	80008ac <memset+0x4>

080008b8 <_init>:
 80008b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ba:	bf00      	nop
 80008bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008be:	bc08      	pop	{r3}
 80008c0:	469e      	mov	lr, r3
 80008c2:	4770      	bx	lr

080008c4 <_fini>:
 80008c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c6:	bf00      	nop
 80008c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ca:	bc08      	pop	{r3}
 80008cc:	469e      	mov	lr, r3
 80008ce:	4770      	bx	lr
