
001_tasks_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007020  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080071c0  080071c0  000171c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007374  08007374  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800737c  0800737c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800737c  0800737c  0001737c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007380  08007380  00017380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001449c  20000078  080073fc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014514  080073fc  00024514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001512c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003213  00000000  00000000  000351d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  000383e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  000397b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c9a  00000000  00000000  0003a9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016207  00000000  00000000  0005466a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c161  00000000  00000000  0006a871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001069d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000587c  00000000  00000000  00106a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071a8 	.word	0x080071a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080071a8 	.word	0x080071a8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012f30 	.word	0x20012f30

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fbc1 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f851 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8af 	bl	80006e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 800058a:	4b20      	ldr	r3, [pc, #128]	; (800060c <main+0x94>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a1f      	ldr	r2, [pc, #124]	; (800060c <main+0x94>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000596:	f004 fa7d 	bl	8004a94 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 800059a:	f005 faeb 	bl	8005b74 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler,"Task-1",200,"Hello world from Task-1",2,&task1_handle);
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	2302      	movs	r3, #2
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <main+0x98>)
 80005aa:	22c8      	movs	r2, #200	; 0xc8
 80005ac:	4919      	ldr	r1, [pc, #100]	; (8000614 <main+0x9c>)
 80005ae:	481a      	ldr	r0, [pc, #104]	; (8000618 <main+0xa0>)
 80005b0:	f002 fbae 	bl	8002d10 <xTaskCreate>
 80005b4:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d00a      	beq.n	80005d2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ce:	bf00      	nop
 80005d0:	e7fe      	b.n	80005d0 <main+0x58>

  status = xTaskCreate(task2_handler,"Task-2",200,"Hello world from Task-2",2,&task2_handle);
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2302      	movs	r3, #2
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <main+0xa4>)
 80005dc:	22c8      	movs	r2, #200	; 0xc8
 80005de:	4910      	ldr	r1, [pc, #64]	; (8000620 <main+0xa8>)
 80005e0:	4810      	ldr	r0, [pc, #64]	; (8000624 <main+0xac>)
 80005e2:	f002 fb95 	bl	8002d10 <xTaskCreate>
 80005e6:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00a      	beq.n	8000604 <main+0x8c>
        __asm volatile
 80005ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f2:	f383 8811 	msr	BASEPRI, r3
 80005f6:	f3bf 8f6f 	isb	sy
 80005fa:	f3bf 8f4f 	dsb	sy
 80005fe:	60fb      	str	r3, [r7, #12]
    }
 8000600:	bf00      	nop
 8000602:	e7fe      	b.n	8000602 <main+0x8a>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000604:	f002 fce8 	bl	8002fd8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x90>
 800060a:	bf00      	nop
 800060c:	e0001000 	.word	0xe0001000
 8000610:	080071c0 	.word	0x080071c0
 8000614:	080071d8 	.word	0x080071d8
 8000618:	080009a5 	.word	0x080009a5
 800061c:	080071e0 	.word	0x080071e0
 8000620:	080071f8 	.word	0x080071f8
 8000624:	080009b5 	.word	0x080009b5

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 f8c2 	bl	80067c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemClock_Config+0xb8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <SystemClock_Config+0xb8>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemClock_Config+0xb8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemClock_Config+0xbc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <SystemClock_Config+0xbc>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemClock_Config+0xbc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	2300      	movs	r3, #0
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fdf5 	bl	8001288 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a4:	f000 f9a0 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f856 	bl	8001778 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006d2:	f000 f989 	bl	80009e8 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	4ba2      	ldr	r3, [pc, #648]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4aa1      	ldr	r2, [pc, #644]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b9f      	ldr	r3, [pc, #636]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	4b9b      	ldr	r3, [pc, #620]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a9a      	ldr	r2, [pc, #616]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b98      	ldr	r3, [pc, #608]	; (800098c <MX_GPIO_Init+0x2a4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b94      	ldr	r3, [pc, #592]	; (800098c <MX_GPIO_Init+0x2a4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a93      	ldr	r2, [pc, #588]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b91      	ldr	r3, [pc, #580]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b8d      	ldr	r3, [pc, #564]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a8c      	ldr	r2, [pc, #560]	; (800098c <MX_GPIO_Init+0x2a4>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b8a      	ldr	r3, [pc, #552]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b86      	ldr	r3, [pc, #536]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a85      	ldr	r2, [pc, #532]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b83      	ldr	r3, [pc, #524]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b7f      	ldr	r3, [pc, #508]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a7e      	ldr	r2, [pc, #504]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b7c      	ldr	r3, [pc, #496]	; (800098c <MX_GPIO_Init+0x2a4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	4879      	ldr	r0, [pc, #484]	; (8000990 <MX_GPIO_Init+0x2a8>)
 80007ac:	f000 fd52 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2101      	movs	r1, #1
 80007b4:	4877      	ldr	r0, [pc, #476]	; (8000994 <MX_GPIO_Init+0x2ac>)
 80007b6:	f000 fd4d 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ba:	2200      	movs	r2, #0
 80007bc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007c0:	4875      	ldr	r0, [pc, #468]	; (8000998 <MX_GPIO_Init+0x2b0>)
 80007c2:	f000 fd47 	bl	8001254 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c6:	2304      	movs	r3, #4
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	486d      	ldr	r0, [pc, #436]	; (8000990 <MX_GPIO_Init+0x2a8>)
 80007da:	f000 fbb7 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007de:	2308      	movs	r3, #8
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4866      	ldr	r0, [pc, #408]	; (8000990 <MX_GPIO_Init+0x2a8>)
 80007f6:	f000 fba9 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80007fa:	2332      	movs	r3, #50	; 0x32
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4860      	ldr	r0, [pc, #384]	; (8000990 <MX_GPIO_Init+0x2a8>)
 8000810:	f000 fb9c 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000814:	2301      	movs	r3, #1
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	485a      	ldr	r0, [pc, #360]	; (8000994 <MX_GPIO_Init+0x2ac>)
 800082c:	f000 fb8e 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000830:	2308      	movs	r3, #8
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000840:	2305      	movs	r3, #5
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4852      	ldr	r0, [pc, #328]	; (8000994 <MX_GPIO_Init+0x2ac>)
 800084c:	f000 fb7e 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000850:	2301      	movs	r3, #1
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000854:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	484d      	ldr	r0, [pc, #308]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000866:	f000 fb71 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800086a:	2310      	movs	r3, #16
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800087a:	2306      	movs	r3, #6
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4845      	ldr	r0, [pc, #276]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000886:	f000 fb61 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800088a:	23e0      	movs	r3, #224	; 0xe0
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800089a:	2305      	movs	r3, #5
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	483d      	ldr	r0, [pc, #244]	; (800099c <MX_GPIO_Init+0x2b4>)
 80008a6:	f000 fb51 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008bc:	2305      	movs	r3, #5
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4836      	ldr	r0, [pc, #216]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 80008c8:	f000 fb40 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008cc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008d0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	482c      	ldr	r0, [pc, #176]	; (8000998 <MX_GPIO_Init+0x2b0>)
 80008e6:	f000 fb31 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008ea:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fc:	2306      	movs	r3, #6
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4823      	ldr	r0, [pc, #140]	; (8000994 <MX_GPIO_Init+0x2ac>)
 8000908:	f000 fb20 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800090c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	481e      	ldr	r0, [pc, #120]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000922:	f000 fb13 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000926:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000938:	230a      	movs	r3, #10
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4816      	ldr	r0, [pc, #88]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000944:	f000 fb02 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000948:	2320      	movs	r3, #32
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	480f      	ldr	r0, [pc, #60]	; (8000998 <MX_GPIO_Init+0x2b0>)
 800095c:	f000 faf6 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000960:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000966:	2312      	movs	r3, #18
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000972:	2304      	movs	r3, #4
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 800097e:	f000 fae5 	bl	8000f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3730      	adds	r7, #48	; 0x30
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40021000 	.word	0x40021000
 8000994:	40020800 	.word	0x40020800
 8000998:	40020c00 	.word	0x40020c00
 800099c:	40020000 	.word	0x40020000
 80009a0:	40020400 	.word	0x40020400

080009a4 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f005 ff7d 	bl	80068ac <puts>
 80009b2:	e7fb      	b.n	80009ac <task1_handler+0x8>

080009b4 <task2_handler>:
		//taskYIELD();
	}
}
static void task2_handler(void* parameters)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f005 ff75 	bl	80068ac <puts>
 80009c2:	e7fb      	b.n	80009bc <task2_handler+0x8>

080009c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d6:	f000 f9b7 	bl	8000d48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40000c00 	.word	0x40000c00

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 8000a32:	f003 fc79 	bl	8004328 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	; 0x38
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <HAL_InitTick+0xe4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a32      	ldr	r2, [pc, #200]	; (8000b28 <HAL_InitTick+0xe4>)
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <HAL_InitTick+0xe4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a70:	f107 0210 	add.w	r2, r7, #16
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f888 	bl	8001b90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a80:	6a3b      	ldr	r3, [r7, #32]
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d103      	bne.n	8000a92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a8a:	f001 f86d 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8000a8e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a90:	e004      	b.n	8000a9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a92:	f001 f869 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8000a96:	4603      	mov	r3, r0
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a9e:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <HAL_InitTick+0xe8>)
 8000aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa4:	0c9b      	lsrs	r3, r3, #18
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <HAL_InitTick+0xec>)
 8000aac:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <HAL_InitTick+0xf0>)
 8000aae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <HAL_InitTick+0xec>)
 8000ab2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <HAL_InitTick+0xec>)
 8000aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000abc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_InitTick+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <HAL_InitTick+0xec>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_InitTick+0xec>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000ad0:	4817      	ldr	r0, [pc, #92]	; (8000b30 <HAL_InitTick+0xec>)
 8000ad2:	f001 f88f 	bl	8001bf4 <HAL_TIM_Base_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000adc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d11b      	bne.n	8000b1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000ae4:	4812      	ldr	r0, [pc, #72]	; (8000b30 <HAL_InitTick+0xec>)
 8000ae6:	f001 f8df 	bl	8001ca8 <HAL_TIM_Base_Start_IT>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000af0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d111      	bne.n	8000b1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000af8:	2032      	movs	r0, #50	; 0x32
 8000afa:	f000 fa19 	bl	8000f30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d808      	bhi.n	8000b16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	2032      	movs	r0, #50	; 0x32
 8000b0a:	f000 f9f5 	bl	8000ef8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <HAL_InitTick+0xf4>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	e002      	b.n	8000b1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3738      	adds	r7, #56	; 0x38
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	431bde83 	.word	0x431bde83
 8000b30:	20000094 	.word	0x20000094
 8000b34:	40000c00 	.word	0x40000c00
 8000b38:	20000004 	.word	0x20000004

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <TIM5_IRQHandler+0x10>)
 8000b6e:	f001 f8fd 	bl	8001d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000094 	.word	0x20000094

08000b7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e00a      	b.n	8000ba4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b8e:	f3af 8000 	nop.w
 8000b92:	4601      	mov	r1, r0
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	b2ca      	uxtb	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf0      	blt.n	8000b8e <_read+0x12>
  }

  return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
  return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f005 fd6e 	bl	8006730 <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20020000 	.word	0x20020000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	200000dc 	.word	0x200000dc
 8000c88:	20014518 	.word	0x20014518

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	; (8000cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cda:	f7ff ffd7 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f005 fd2d 	bl	800673c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fc49 	bl	8000578 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cf4:	08007384 	.word	0x08007384
  ldr r2, =_sbss
 8000cf8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cfc:	20014514 	.word	0x20014514

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f8d8 	bl	8000ee2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fe86 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fe5c 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	200000e0 	.word	0x200000e0

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200000e0 	.word	0x200000e0

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	; (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ff4c 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0a:	f7ff ff61 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	6978      	ldr	r0, [r7, #20]
 8000f16:	f7ff ffb1 	bl	8000e7c <NVIC_EncodePriority>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff80 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff54 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	e159      	b.n	800121c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 8148 	bne.w	8001216 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d005      	beq.n	8000f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d130      	bne.n	8001000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	f003 0201 	and.w	r2, r3, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b03      	cmp	r3, #3
 800100a:	d017      	beq.n	800103c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d123      	bne.n	8001090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	69b9      	ldr	r1, [r7, #24]
 800108c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0203 	and.w	r2, r3, #3
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80a2 	beq.w	8001216 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b57      	ldr	r3, [pc, #348]	; (8001234 <HAL_GPIO_Init+0x2e8>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a56      	ldr	r2, [pc, #344]	; (8001234 <HAL_GPIO_Init+0x2e8>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b54      	ldr	r3, [pc, #336]	; (8001234 <HAL_GPIO_Init+0x2e8>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ee:	4a52      	ldr	r2, [pc, #328]	; (8001238 <HAL_GPIO_Init+0x2ec>)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a49      	ldr	r2, [pc, #292]	; (800123c <HAL_GPIO_Init+0x2f0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d019      	beq.n	800114e <HAL_GPIO_Init+0x202>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a48      	ldr	r2, [pc, #288]	; (8001240 <HAL_GPIO_Init+0x2f4>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d013      	beq.n	800114a <HAL_GPIO_Init+0x1fe>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a47      	ldr	r2, [pc, #284]	; (8001244 <HAL_GPIO_Init+0x2f8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d00d      	beq.n	8001146 <HAL_GPIO_Init+0x1fa>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a46      	ldr	r2, [pc, #280]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d007      	beq.n	8001142 <HAL_GPIO_Init+0x1f6>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a45      	ldr	r2, [pc, #276]	; (800124c <HAL_GPIO_Init+0x300>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_GPIO_Init+0x1f2>
 800113a:	2304      	movs	r3, #4
 800113c:	e008      	b.n	8001150 <HAL_GPIO_Init+0x204>
 800113e:	2307      	movs	r3, #7
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x204>
 8001142:	2303      	movs	r3, #3
 8001144:	e004      	b.n	8001150 <HAL_GPIO_Init+0x204>
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <HAL_GPIO_Init+0x204>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x204>
 800114e:	2300      	movs	r3, #0
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	f002 0203 	and.w	r2, r2, #3
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4093      	lsls	r3, r2
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001160:	4935      	ldr	r1, [pc, #212]	; (8001238 <HAL_GPIO_Init+0x2ec>)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	4b38      	ldr	r3, [pc, #224]	; (8001250 <HAL_GPIO_Init+0x304>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001192:	4a2f      	ldr	r2, [pc, #188]	; (8001250 <HAL_GPIO_Init+0x304>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <HAL_GPIO_Init+0x304>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011bc:	4a24      	ldr	r2, [pc, #144]	; (8001250 <HAL_GPIO_Init+0x304>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <HAL_GPIO_Init+0x304>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e6:	4a1a      	ldr	r2, [pc, #104]	; (8001250 <HAL_GPIO_Init+0x304>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_GPIO_Init+0x304>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001210:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <HAL_GPIO_Init+0x304>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3301      	adds	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b0f      	cmp	r3, #15
 8001220:	f67f aea2 	bls.w	8000f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40013800 	.word	0x40013800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020400 	.word	0x40020400
 8001244:	40020800 	.word	0x40020800
 8001248:	40020c00 	.word	0x40020c00
 800124c:	40021000 	.word	0x40021000
 8001250:	40013c00 	.word	0x40013c00

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e267      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d075      	beq.n	8001392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a6:	4b88      	ldr	r3, [pc, #544]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d00c      	beq.n	80012cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d112      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4b82      	ldr	r3, [pc, #520]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ca:	d10b      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	4b7e      	ldr	r3, [pc, #504]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d05b      	beq.n	8001390 <HAL_RCC_OscConfig+0x108>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d157      	bne.n	8001390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e242      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x74>
 80012ee:	4b76      	ldr	r3, [pc, #472]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a75      	ldr	r2, [pc, #468]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e01d      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x98>
 8001306:	4b70      	ldr	r3, [pc, #448]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6f      	ldr	r2, [pc, #444]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6c      	ldr	r2, [pc, #432]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 8001320:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a68      	ldr	r2, [pc, #416]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a65      	ldr	r2, [pc, #404]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fd16 	bl	8000d70 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fd12 	bl	8000d70 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e207      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xc0>
 8001366:	e014      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fd02 	bl	8000d70 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fcfe 	bl	8000d70 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1f3      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0xe8>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d063      	beq.n	8001466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139e:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1c7      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4937      	ldr	r1, [pc, #220]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	e03a      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b34      	ldr	r3, [pc, #208]	; (80014cc <HAL_RCC_OscConfig+0x244>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fcb7 	bl	8000d70 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fcb3 	bl	8000d70 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e1a8      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4925      	ldr	r1, [pc, #148]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_RCC_OscConfig+0x244>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fc96 	bl	8000d70 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fc92 	bl	8000d70 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e187      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d036      	beq.n	80014e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d016      	beq.n	80014a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_RCC_OscConfig+0x248>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fc76 	bl	8000d70 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fc72 	bl	8000d70 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e167      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800149c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x200>
 80014a6:	e01b      	b.n	80014e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_RCC_OscConfig+0x248>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fc5f 	bl	8000d70 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	e00e      	b.n	80014d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fc5b 	bl	8000d70 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d907      	bls.n	80014d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e150      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470000 	.word	0x42470000
 80014d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1ea      	bne.n	80014b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8097 	beq.w	800161c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b7d      	ldr	r3, [pc, #500]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a7c      	ldr	r2, [pc, #496]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b7a      	ldr	r3, [pc, #488]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b77      	ldr	r3, [pc, #476]	; (80016fc <HAL_RCC_OscConfig+0x474>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b74      	ldr	r3, [pc, #464]	; (80016fc <HAL_RCC_OscConfig+0x474>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a73      	ldr	r2, [pc, #460]	; (80016fc <HAL_RCC_OscConfig+0x474>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff fc1b 	bl	8000d70 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153e:	f7ff fc17 	bl	8000d70 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e10c      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	4b6a      	ldr	r3, [pc, #424]	; (80016fc <HAL_RCC_OscConfig+0x474>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x2ea>
 8001564:	4b64      	ldr	r3, [pc, #400]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a63      	ldr	r2, [pc, #396]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
 8001570:	e01c      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x30c>
 800157a:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a5e      	ldr	r2, [pc, #376]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
 8001586:	4b5c      	ldr	r3, [pc, #368]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	4a5b      	ldr	r2, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	; 0x70
 8001592:	e00b      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001594:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	; 0x70
 80015a0:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	4a54      	ldr	r2, [pc, #336]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f023 0304 	bic.w	r3, r3, #4
 80015aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d015      	beq.n	80015e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fbdc 	bl	8000d70 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff fbd8 	bl	8000d70 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0cb      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d2:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0ee      	beq.n	80015bc <HAL_RCC_OscConfig+0x334>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fbc6 	bl	8000d70 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fbc2 	bl	8000d70 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0b5      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fe:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ee      	bne.n	80015e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001610:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a38      	ldr	r2, [pc, #224]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80a1 	beq.w	8001768 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001626:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b08      	cmp	r3, #8
 8001630:	d05c      	beq.n	80016ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d141      	bne.n	80016be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <HAL_RCC_OscConfig+0x478>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fb96 	bl	8000d70 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fb92 	bl	8000d70 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e087      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	019b      	lsls	r3, r3, #6
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	3b01      	subs	r3, #1
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	061b      	lsls	r3, r3, #24
 800168a:	491b      	ldr	r1, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x478>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fb6b 	bl	8000d70 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff fb67 	bl	8000d70 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e05c      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x416>
 80016bc:	e054      	b.n	8001768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_RCC_OscConfig+0x478>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fb54 	bl	8000d70 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fb50 	bl	8000d70 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e045      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x444>
 80016ea:	e03d      	b.n	8001768 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e038      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40007000 	.word	0x40007000
 8001700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x4ec>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d028      	beq.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d121      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	429a      	cmp	r2, r3
 800172c:	d11a      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001734:	4013      	ands	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800173a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173c:	4293      	cmp	r3, r2
 800173e:	d111      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	3b01      	subs	r3, #1
 800174e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d107      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0cc      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d90c      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b65      	ldr	r3, [pc, #404]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0b8      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017cc:	4b59      	ldr	r3, [pc, #356]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a52      	ldr	r2, [pc, #328]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	494d      	ldr	r1, [pc, #308]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d044      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d119      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e07f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e067      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4934      	ldr	r1, [pc, #208]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff fa82 	bl	8000d70 <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7ff fa7e 	bl	8000d70 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e04f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d20c      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e032      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4916      	ldr	r1, [pc, #88]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	490e      	ldr	r1, [pc, #56]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 f821 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8001902:	4602      	mov	r2, r0
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	490a      	ldr	r1, [pc, #40]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	5ccb      	ldrb	r3, [r1, r3]
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f890 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00
 8001934:	40023800 	.word	0x40023800
 8001938:	080072e4 	.word	0x080072e4
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001948:	b094      	sub	sp, #80	; 0x50
 800194a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	647b      	str	r3, [r7, #68]	; 0x44
 8001950:	2300      	movs	r3, #0
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001954:	2300      	movs	r3, #0
 8001956:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800195c:	4b79      	ldr	r3, [pc, #484]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d00d      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x40>
 8001968:	2b08      	cmp	r3, #8
 800196a:	f200 80e1 	bhi.w	8001b30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x34>
 8001972:	2b04      	cmp	r3, #4
 8001974:	d003      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x3a>
 8001976:	e0db      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x204>)
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800197c:	e0db      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800197e:	4b73      	ldr	r3, [pc, #460]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x208>)
 8001980:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001982:	e0d8      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001984:	4b6f      	ldr	r3, [pc, #444]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800198c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d063      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199a:	4b6a      	ldr	r3, [pc, #424]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	099b      	lsrs	r3, r3, #6
 80019a0:	2200      	movs	r2, #0
 80019a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
 80019b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019b6:	4622      	mov	r2, r4
 80019b8:	462b      	mov	r3, r5
 80019ba:	f04f 0000 	mov.w	r0, #0
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	0159      	lsls	r1, r3, #5
 80019c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c8:	0150      	lsls	r0, r2, #5
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4621      	mov	r1, r4
 80019d0:	1a51      	subs	r1, r2, r1
 80019d2:	6139      	str	r1, [r7, #16]
 80019d4:	4629      	mov	r1, r5
 80019d6:	eb63 0301 	sbc.w	r3, r3, r1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019e8:	4659      	mov	r1, fp
 80019ea:	018b      	lsls	r3, r1, #6
 80019ec:	4651      	mov	r1, sl
 80019ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f2:	4651      	mov	r1, sl
 80019f4:	018a      	lsls	r2, r1, #6
 80019f6:	4651      	mov	r1, sl
 80019f8:	ebb2 0801 	subs.w	r8, r2, r1
 80019fc:	4659      	mov	r1, fp
 80019fe:	eb63 0901 	sbc.w	r9, r3, r1
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a16:	4690      	mov	r8, r2
 8001a18:	4699      	mov	r9, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	eb18 0303 	adds.w	r3, r8, r3
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	462b      	mov	r3, r5
 8001a24:	eb49 0303 	adc.w	r3, r9, r3
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a36:	4629      	mov	r1, r5
 8001a38:	024b      	lsls	r3, r1, #9
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a40:	4621      	mov	r1, r4
 8001a42:	024a      	lsls	r2, r1, #9
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a54:	f7fe fc0e 	bl	8000274 <__aeabi_uldivmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a60:	e058      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a62:	4b38      	ldr	r3, [pc, #224]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	099b      	lsrs	r3, r3, #6
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
 8001a78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	464b      	mov	r3, r9
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	0159      	lsls	r1, r3, #5
 8001a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8e:	0150      	lsls	r0, r2, #5
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4641      	mov	r1, r8
 8001a96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a9a:	4649      	mov	r1, r9
 8001a9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ab4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ab8:	eb63 050b 	sbc.w	r5, r3, fp
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	00eb      	lsls	r3, r5, #3
 8001ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aca:	00e2      	lsls	r2, r4, #3
 8001acc:	4614      	mov	r4, r2
 8001ace:	461d      	mov	r5, r3
 8001ad0:	4643      	mov	r3, r8
 8001ad2:	18e3      	adds	r3, r4, r3
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	eb45 0303 	adc.w	r3, r5, r3
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aea:	4629      	mov	r1, r5
 8001aec:	028b      	lsls	r3, r1, #10
 8001aee:	4621      	mov	r1, r4
 8001af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af4:	4621      	mov	r1, r4
 8001af6:	028a      	lsls	r2, r1, #10
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afe:	2200      	movs	r2, #0
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	61fa      	str	r2, [r7, #28]
 8001b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b08:	f7fe fbb4 	bl	8000274 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4613      	mov	r3, r2
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0c1b      	lsrs	r3, r3, #16
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2e:	e002      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3750      	adds	r7, #80	; 0x50
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	007a1200 	.word	0x007a1200

08001b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b6c:	f7ff fff0 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	080072f4 	.word	0x080072f4

08001b90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <HAL_RCC_GetClockConfig+0x60>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0207 	and.w	r2, r3, #7
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	601a      	str	r2, [r3, #0]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e041      	b.n	8001c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f839 	bl	8001c92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3304      	adds	r3, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f000 f9ca 	bl	8001fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d001      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e044      	b.n	8001d4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <HAL_TIM_Base_Start_IT+0xb0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d018      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cea:	d013      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1a      	ldr	r2, [pc, #104]	; (8001d5c <HAL_TIM_Base_Start_IT+0xb4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00e      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d009      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d004      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d111      	bne.n	8001d38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d010      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d36:	e007      	b.n	8001d48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40000800 	.word	0x40000800
 8001d64:	40000c00 	.word	0x40000c00
 8001d68:	40014000 	.word	0x40014000

08001d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d122      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0202 	mvn.w	r2, #2
 8001d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8ee 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8e0 	bl	8001f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f8f1 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d122      	bne.n	8001e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d11b      	bne.n	8001e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0204 	mvn.w	r2, #4
 8001dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2202      	movs	r2, #2
 8001df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8c4 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8b6 	bl	8001f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f8c7 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d122      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d11b      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0208 	mvn.w	r2, #8
 8001e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2204      	movs	r2, #4
 8001e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f89a 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001e5c:	e005      	b.n	8001e6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f88c 	bl	8001f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f89d 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d122      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b10      	cmp	r3, #16
 8001e8a:	d11b      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0210 	mvn.w	r2, #16
 8001e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2208      	movs	r2, #8
 8001e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f870 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f862 	bl	8001f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f873 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0201 	mvn.w	r2, #1
 8001ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe fd6a 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efa:	2b80      	cmp	r3, #128	; 0x80
 8001efc:	d10e      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f08:	2b80      	cmp	r3, #128	; 0x80
 8001f0a:	d107      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8e2 	bl	80020e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f26:	2b40      	cmp	r3, #64	; 0x40
 8001f28:	d10e      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f34:	2b40      	cmp	r3, #64	; 0x40
 8001f36:	d107      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f838 	bl	8001fb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	d10e      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d107      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0220 	mvn.w	r2, #32
 8001f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8ac 	bl	80020cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a34      	ldr	r2, [pc, #208]	; (80020b0 <TIM_Base_SetConfig+0xe4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00f      	beq.n	8002004 <TIM_Base_SetConfig+0x38>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fea:	d00b      	beq.n	8002004 <TIM_Base_SetConfig+0x38>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a31      	ldr	r2, [pc, #196]	; (80020b4 <TIM_Base_SetConfig+0xe8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <TIM_Base_SetConfig+0x38>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <TIM_Base_SetConfig+0xec>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <TIM_Base_SetConfig+0x38>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <TIM_Base_SetConfig+0xf0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d108      	bne.n	8002016 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <TIM_Base_SetConfig+0xe4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01b      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002024:	d017      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <TIM_Base_SetConfig+0xe8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <TIM_Base_SetConfig+0xec>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00f      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a20      	ldr	r2, [pc, #128]	; (80020bc <TIM_Base_SetConfig+0xf0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00b      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <TIM_Base_SetConfig+0xf4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a1e      	ldr	r2, [pc, #120]	; (80020c4 <TIM_Base_SetConfig+0xf8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d003      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <TIM_Base_SetConfig+0xfc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d108      	bne.n	8002068 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <TIM_Base_SetConfig+0xe4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d103      	bne.n	800209c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	615a      	str	r2, [r3, #20]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00
 80020c0:	40014000 	.word	0x40014000
 80020c4:	40014400 	.word	0x40014400
 80020c8:	40014800 	.word	0x40014800

080020cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f103 0208 	add.w	r2, r3, #8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f103 0208 	add.w	r2, r3, #8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f103 0208 	add.w	r2, r3, #8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d103      	bne.n	80021b6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e00c      	b.n	80021d0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3308      	adds	r3, #8
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e002      	b.n	80021c4 <vListInsert+0x2e>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d2f6      	bcs.n	80021be <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	601a      	str	r2, [r3, #0]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6892      	ldr	r2, [r2, #8]
 800221e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6852      	ldr	r2, [r2, #4]
 8002228:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	429a      	cmp	r2, r3
 8002232:	d103      	bne.n	800223c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1e5a      	subs	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10a      	bne.n	8002286 <xQueueGenericReset+0x2a>
        __asm volatile
 8002270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002274:	f383 8811 	msr	BASEPRI, r3
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	60bb      	str	r3, [r7, #8]
    }
 8002282:	bf00      	nop
 8002284:	e7fe      	b.n	8002284 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002286:	f002 f8cd 	bl	8004424 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	68f9      	ldr	r1, [r7, #12]
 8002294:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	441a      	add	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b6:	3b01      	subs	r3, #1
 80022b8:	68f9      	ldr	r1, [r7, #12]
 80022ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	441a      	add	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	22ff      	movs	r2, #255	; 0xff
 80022ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	22ff      	movs	r2, #255	; 0xff
 80022d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d114      	bne.n	8002306 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01a      	beq.n	800231a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3310      	adds	r3, #16
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 f927 	bl	800353c <xTaskRemoveFromEventList>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d012      	beq.n	800231a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <xQueueGenericReset+0xcc>)
 80022f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	e009      	b.n	800231a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3310      	adds	r3, #16
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fef2 	bl	80020f4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3324      	adds	r3, #36	; 0x24
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff feed 	bl	80020f4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800231a:	f002 f8b3 	bl	8004484 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	e000ed04 	.word	0xe000ed04

0800232c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	4613      	mov	r3, r2
 8002338:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	61bb      	str	r3, [r7, #24]
    }
 8002352:	bf00      	nop
 8002354:	e7fe      	b.n	8002354 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <xQueueGenericCreate+0x48>
 8002366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d101      	bne.n	8002378 <xQueueGenericCreate+0x4c>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <xQueueGenericCreate+0x4e>
 8002378:	2300      	movs	r3, #0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10a      	bne.n	8002394 <xQueueGenericCreate+0x68>
        __asm volatile
 800237e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	617b      	str	r3, [r7, #20]
    }
 8002390:	bf00      	nop
 8002392:	e7fe      	b.n	8002392 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800239a:	d90a      	bls.n	80023b2 <xQueueGenericCreate+0x86>
        __asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	613b      	str	r3, [r7, #16]
    }
 80023ae:	bf00      	nop
 80023b0:	e7fe      	b.n	80023b0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	3350      	adds	r3, #80	; 0x50
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 f960 	bl	800467c <pvPortMalloc>
 80023bc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3350      	adds	r3, #80	; 0x50
 80023cc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023ce:	79fa      	ldrb	r2, [r7, #7]
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f805 	bl	80023ea <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023e0:	6a3b      	ldr	r3, [r7, #32]
    }
 80023e2:	4618      	mov	r0, r3
 80023e4:	3728      	adds	r7, #40	; 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d103      	bne.n	8002406 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e002      	b.n	800240c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002418:	2101      	movs	r1, #1
 800241a:	69b8      	ldr	r0, [r7, #24]
 800241c:	f7ff ff1e 	bl	800225c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	68f9      	ldr	r1, [r7, #12]
 800242e:	2073      	movs	r0, #115	; 0x73
 8002430:	f003 fa98 	bl	8005964 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b090      	sub	sp, #64	; 0x40
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10a      	bne.n	800246e <xQueueGenericSend+0x32>
        __asm volatile
 8002458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245c:	f383 8811 	msr	BASEPRI, r3
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800246a:	bf00      	nop
 800246c:	e7fe      	b.n	800246c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <xQueueGenericSend+0x40>
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <xQueueGenericSend+0x44>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <xQueueGenericSend+0x46>
 8002480:	2300      	movs	r3, #0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <xQueueGenericSend+0x60>
        __asm volatile
 8002486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248a:	f383 8811 	msr	BASEPRI, r3
 800248e:	f3bf 8f6f 	isb	sy
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002498:	bf00      	nop
 800249a:	e7fe      	b.n	800249a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d103      	bne.n	80024aa <xQueueGenericSend+0x6e>
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <xQueueGenericSend+0x72>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <xQueueGenericSend+0x74>
 80024ae:	2300      	movs	r3, #0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <xQueueGenericSend+0x8e>
        __asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	623b      	str	r3, [r7, #32]
    }
 80024c6:	bf00      	nop
 80024c8:	e7fe      	b.n	80024c8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ca:	f001 f9d7 	bl	800387c <xTaskGetSchedulerState>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <xQueueGenericSend+0x9e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <xQueueGenericSend+0xa2>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <xQueueGenericSend+0xa4>
 80024de:	2300      	movs	r3, #0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <xQueueGenericSend+0xbe>
        __asm volatile
 80024e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	61fb      	str	r3, [r7, #28]
    }
 80024f6:	bf00      	nop
 80024f8:	e7fe      	b.n	80024f8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024fa:	f001 ff93 	bl	8004424 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <xQueueGenericSend+0xd4>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d136      	bne.n	800257e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	4618      	mov	r0, r3
 8002514:	f003 ffb2 	bl	800647c <SEGGER_SYSVIEW_ShrinkId>
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	460b      	mov	r3, r1
 8002522:	4601      	mov	r1, r0
 8002524:	205a      	movs	r0, #90	; 0x5a
 8002526:	f003 fa93 	bl	8005a50 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002530:	f000 fa78 	bl	8002a24 <prvCopyDataToQueue>
 8002534:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	2b00      	cmp	r3, #0
 800253c:	d010      	beq.n	8002560 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	3324      	adds	r3, #36	; 0x24
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fffa 	bl	800353c <xTaskRemoveFromEventList>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d013      	beq.n	8002576 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800254e:	4b4d      	ldr	r3, [pc, #308]	; (8002684 <xQueueGenericSend+0x248>)
 8002550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	e00a      	b.n	8002576 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <xQueueGenericSend+0x248>)
 8002568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002576:	f001 ff85 	bl	8004484 <vPortExitCritical>
                return pdPASS;
 800257a:	2301      	movs	r3, #1
 800257c:	e07d      	b.n	800267a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d110      	bne.n	80025a6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002584:	f001 ff7e 	bl	8004484 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	4618      	mov	r0, r3
 800258c:	f003 ff76 	bl	800647c <SEGGER_SYSVIEW_ShrinkId>
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	460b      	mov	r3, r1
 800259a:	4601      	mov	r1, r0
 800259c:	205a      	movs	r0, #90	; 0x5a
 800259e:	f003 fa57 	bl	8005a50 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e069      	b.n	800267a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4618      	mov	r0, r3
 80025b2:	f001 f829 	bl	8003608 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025ba:	f001 ff63 	bl	8004484 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025be:	f000 fd71 	bl	80030a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025c2:	f001 ff2f 	bl	8004424 <vPortEnterCritical>
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d103      	bne.n	80025dc <xQueueGenericSend+0x1a0>
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d103      	bne.n	80025f2 <xQueueGenericSend+0x1b6>
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025f2:	f001 ff47 	bl	8004484 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025f6:	1d3a      	adds	r2, r7, #4
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f001 f818 	bl	8003634 <xTaskCheckForTimeOut>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d124      	bne.n	8002654 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800260a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800260c:	f000 fb02 	bl	8002c14 <prvIsQueueFull>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	3310      	adds	r3, #16
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 ff3a 	bl	8003498 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002626:	f000 fa8d 	bl	8002b44 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800262a:	f000 fd49 	bl	80030c0 <xTaskResumeAll>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	f47f af62 	bne.w	80024fa <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <xQueueGenericSend+0x248>)
 8002638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	e758      	b.n	80024fa <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264a:	f000 fa7b 	bl	8002b44 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800264e:	f000 fd37 	bl	80030c0 <xTaskResumeAll>
 8002652:	e752      	b.n	80024fa <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002656:	f000 fa75 	bl	8002b44 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800265a:	f000 fd31 	bl	80030c0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	4618      	mov	r0, r3
 8002662:	f003 ff0b 	bl	800647c <SEGGER_SYSVIEW_ShrinkId>
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	460b      	mov	r3, r1
 8002670:	4601      	mov	r1, r0
 8002672:	205a      	movs	r0, #90	; 0x5a
 8002674:	f003 f9ec 	bl	8005a50 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002678:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800267a:	4618      	mov	r0, r3
 800267c:	3738      	adds	r7, #56	; 0x38
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	e000ed04 	.word	0xe000ed04

08002688 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b090      	sub	sp, #64	; 0x40
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80026b2:	bf00      	nop
 80026b4:	e7fe      	b.n	80026b4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d103      	bne.n	80026c4 <xQueueGenericSendFromISR+0x3c>
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <xQueueGenericSendFromISR+0x40>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <xQueueGenericSendFromISR+0x42>
 80026c8:	2300      	movs	r3, #0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10a      	bne.n	80026e4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80026ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80026e0:	bf00      	nop
 80026e2:	e7fe      	b.n	80026e2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d103      	bne.n	80026f2 <xQueueGenericSendFromISR+0x6a>
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <xQueueGenericSendFromISR+0x6e>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <xQueueGenericSendFromISR+0x70>
 80026f6:	2300      	movs	r3, #0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	623b      	str	r3, [r7, #32]
    }
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002712:	f001 ff73 	bl	80045fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002716:	f3ef 8211 	mrs	r2, BASEPRI
 800271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	61fa      	str	r2, [r7, #28]
 800272c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800272e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	429a      	cmp	r2, r3
 800273c:	d302      	bcc.n	8002744 <xQueueGenericSendFromISR+0xbc>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d148      	bne.n	80027d6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800274a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fe90 	bl	800647c <SEGGER_SYSVIEW_ShrinkId>
 800275c:	4601      	mov	r1, r0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	461a      	mov	r2, r3
 8002762:	2060      	movs	r0, #96	; 0x60
 8002764:	f003 f8a4 	bl	80058b0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800276e:	f000 f959 	bl	8002a24 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002772:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d112      	bne.n	80027a2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800277c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	2b00      	cmp	r3, #0
 8002782:	d025      	beq.n	80027d0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002786:	3324      	adds	r3, #36	; 0x24
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fed7 	bl	800353c <xTaskRemoveFromEventList>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01d      	beq.n	80027d0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d01a      	beq.n	80027d0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e016      	b.n	80027d0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80027a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027a6:	2b7f      	cmp	r3, #127	; 0x7f
 80027a8:	d10a      	bne.n	80027c0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	617b      	str	r3, [r7, #20]
    }
 80027bc:	bf00      	nop
 80027be:	e7fe      	b.n	80027be <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027c4:	3301      	adds	r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	b25a      	sxtb	r2, r3
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80027d0:	2301      	movs	r3, #1
 80027d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80027d4:	e00b      	b.n	80027ee <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	4618      	mov	r0, r3
 80027da:	f003 fe4f 	bl	800647c <SEGGER_SYSVIEW_ShrinkId>
 80027de:	4601      	mov	r1, r0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	461a      	mov	r2, r3
 80027e4:	2060      	movs	r0, #96	; 0x60
 80027e6:	f003 f863 	bl	80058b0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80027f8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3740      	adds	r7, #64	; 0x40
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b08f      	sub	sp, #60	; 0x3c
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <xQueueReceive+0x30>
        __asm volatile
 800281e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002822:	f383 8811 	msr	BASEPRI, r3
 8002826:	f3bf 8f6f 	isb	sy
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	623b      	str	r3, [r7, #32]
    }
 8002830:	bf00      	nop
 8002832:	e7fe      	b.n	8002832 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <xQueueReceive+0x3e>
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <xQueueReceive+0x42>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <xQueueReceive+0x44>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <xQueueReceive+0x5e>
        __asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	61fb      	str	r3, [r7, #28]
    }
 800285e:	bf00      	nop
 8002860:	e7fe      	b.n	8002860 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002862:	f001 f80b 	bl	800387c <xTaskGetSchedulerState>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <xQueueReceive+0x6e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <xQueueReceive+0x72>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <xQueueReceive+0x74>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <xQueueReceive+0x8e>
        __asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	61bb      	str	r3, [r7, #24]
    }
 800288e:	bf00      	nop
 8002890:	e7fe      	b.n	8002890 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002892:	f001 fdc7 	bl	8004424 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d02f      	beq.n	8002902 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a6:	f000 f927 	bl	8002af8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	4618      	mov	r0, r3
 80028ae:	f003 fde5 	bl	800647c <SEGGER_SYSVIEW_ShrinkId>
 80028b2:	4604      	mov	r4, r0
 80028b4:	2000      	movs	r0, #0
 80028b6:	f003 fde1 	bl	800647c <SEGGER_SYSVIEW_ShrinkId>
 80028ba:	4602      	mov	r2, r0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2101      	movs	r1, #1
 80028c0:	9100      	str	r1, [sp, #0]
 80028c2:	4621      	mov	r1, r4
 80028c4:	205c      	movs	r0, #92	; 0x5c
 80028c6:	f003 f8c3 	bl	8005a50 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	1e5a      	subs	r2, r3, #1
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00f      	beq.n	80028fa <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	3310      	adds	r3, #16
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fe2c 	bl	800353c <xTaskRemoveFromEventList>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80028ea:	4b4d      	ldr	r3, [pc, #308]	; (8002a20 <xQueueReceive+0x21c>)
 80028ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80028fa:	f001 fdc3 	bl	8004484 <vPortExitCritical>
                return pdPASS;
 80028fe:	2301      	movs	r3, #1
 8002900:	e08a      	b.n	8002a18 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d113      	bne.n	8002930 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002908:	f001 fdbc 	bl	8004484 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fdb4 	bl	800647c <SEGGER_SYSVIEW_ShrinkId>
 8002914:	4604      	mov	r4, r0
 8002916:	2000      	movs	r0, #0
 8002918:	f003 fdb0 	bl	800647c <SEGGER_SYSVIEW_ShrinkId>
 800291c:	4602      	mov	r2, r0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2101      	movs	r1, #1
 8002922:	9100      	str	r1, [sp, #0]
 8002924:	4621      	mov	r1, r4
 8002926:	205c      	movs	r0, #92	; 0x5c
 8002928:	f003 f892 	bl	8005a50 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800292c:	2300      	movs	r3, #0
 800292e:	e073      	b.n	8002a18 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fe64 	bl	8003608 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002940:	2301      	movs	r3, #1
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002944:	f001 fd9e 	bl	8004484 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002948:	f000 fbac 	bl	80030a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800294c:	f001 fd6a 	bl	8004424 <vPortEnterCritical>
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002956:	b25b      	sxtb	r3, r3
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d103      	bne.n	8002966 <xQueueReceive+0x162>
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800296c:	b25b      	sxtb	r3, r3
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d103      	bne.n	800297c <xQueueReceive+0x178>
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800297c:	f001 fd82 	bl	8004484 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002980:	1d3a      	adds	r2, r7, #4
 8002982:	f107 0310 	add.w	r3, r7, #16
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fe53 	bl	8003634 <xTaskCheckForTimeOut>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d124      	bne.n	80029de <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002996:	f000 f927 	bl	8002be8 <prvIsQueueEmpty>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d018      	beq.n	80029d2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	3324      	adds	r3, #36	; 0x24
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fd75 	bl	8003498 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b0:	f000 f8c8 	bl	8002b44 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029b4:	f000 fb84 	bl	80030c0 <xTaskResumeAll>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f47f af69 	bne.w	8002892 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <xQueueReceive+0x21c>)
 80029c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	e75f      	b.n	8002892 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d4:	f000 f8b6 	bl	8002b44 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029d8:	f000 fb72 	bl	80030c0 <xTaskResumeAll>
 80029dc:	e759      	b.n	8002892 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e0:	f000 f8b0 	bl	8002b44 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029e4:	f000 fb6c 	bl	80030c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ea:	f000 f8fd 	bl	8002be8 <prvIsQueueEmpty>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f43f af4e 	beq.w	8002892 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fd3f 	bl	800647c <SEGGER_SYSVIEW_ShrinkId>
 80029fe:	4604      	mov	r4, r0
 8002a00:	2000      	movs	r0, #0
 8002a02:	f003 fd3b 	bl	800647c <SEGGER_SYSVIEW_ShrinkId>
 8002a06:	4602      	mov	r2, r0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	9100      	str	r1, [sp, #0]
 8002a0e:	4621      	mov	r1, r4
 8002a10:	205c      	movs	r0, #92	; 0x5c
 8002a12:	f003 f81d 	bl	8005a50 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a16:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3734      	adds	r7, #52	; 0x34
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd90      	pop	{r4, r7, pc}
 8002a20:	e000ed04 	.word	0xe000ed04

08002a24 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10d      	bne.n	8002a5e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d14d      	bne.n	8002ae6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 ff32 	bl	80038b8 <xTaskPriorityDisinherit>
 8002a54:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	e043      	b.n	8002ae6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d119      	bne.n	8002a98 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6858      	ldr	r0, [r3, #4]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	f003 fe98 	bl	80067a4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	441a      	add	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d32b      	bcc.n	8002ae6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	e026      	b.n	8002ae6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68d8      	ldr	r0, [r3, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	f003 fe7e 	bl	80067a4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	425b      	negs	r3, r3
 8002ab2:	441a      	add	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d207      	bcs.n	8002ad4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	425b      	negs	r3, r3
 8002ace:	441a      	add	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d105      	bne.n	8002ae6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002aee:	697b      	ldr	r3, [r7, #20]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d018      	beq.n	8002b3c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	441a      	add	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d303      	bcc.n	8002b2c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68d9      	ldr	r1, [r3, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	461a      	mov	r2, r3
 8002b36:	6838      	ldr	r0, [r7, #0]
 8002b38:	f003 fe34 	bl	80067a4 <memcpy>
    }
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b4c:	f001 fc6a 	bl	8004424 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b56:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b58:	e011      	b.n	8002b7e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d012      	beq.n	8002b88 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3324      	adds	r3, #36	; 0x24
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fce8 	bl	800353c <xTaskRemoveFromEventList>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b72:	f000 fdc5 	bl	8003700 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	dce9      	bgt.n	8002b5a <prvUnlockQueue+0x16>
 8002b86:	e000      	b.n	8002b8a <prvUnlockQueue+0x46>
                        break;
 8002b88:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b92:	f001 fc77 	bl	8004484 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b96:	f001 fc45 	bl	8004424 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ba0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ba2:	e011      	b.n	8002bc8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d012      	beq.n	8002bd2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3310      	adds	r3, #16
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fcc3 	bl	800353c <xTaskRemoveFromEventList>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002bbc:	f000 fda0 	bl	8003700 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002bc0:	7bbb      	ldrb	r3, [r7, #14]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	dce9      	bgt.n	8002ba4 <prvUnlockQueue+0x60>
 8002bd0:	e000      	b.n	8002bd4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002bd2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	22ff      	movs	r2, #255	; 0xff
 8002bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002bdc:	f001 fc52 	bl	8004484 <vPortExitCritical>
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bf0:	f001 fc18 	bl	8004424 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e001      	b.n	8002c06 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c06:	f001 fc3d 	bl	8004484 <vPortExitCritical>

    return xReturn;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c1c:	f001 fc02 	bl	8004424 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d102      	bne.n	8002c32 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e001      	b.n	8002c36 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c36:	f001 fc25 	bl	8004484 <vPortExitCritical>

    return xReturn;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e01e      	b.n	8002c92 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c54:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <vQueueAddToRegistry+0x60>)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d115      	bne.n	8002c8c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c60:	4910      	ldr	r1, [pc, #64]	; (8002ca4 <vQueueAddToRegistry+0x60>)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <vQueueAddToRegistry+0x60>)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 fbff 	bl	800647c <SEGGER_SYSVIEW_ShrinkId>
 8002c7e:	4601      	mov	r1, r0
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	2071      	movs	r0, #113	; 0x71
 8002c86:	f002 fe13 	bl	80058b0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002c8a:	e006      	b.n	8002c9a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b07      	cmp	r3, #7
 8002c96:	d9dd      	bls.n	8002c54 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200000e4 	.word	0x200000e4

08002ca8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002cb8:	f001 fbb4 	bl	8004424 <vPortEnterCritical>
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d103      	bne.n	8002cd2 <vQueueWaitForMessageRestricted+0x2a>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d103      	bne.n	8002ce8 <vQueueWaitForMessageRestricted+0x40>
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ce8:	f001 fbcc 	bl	8004484 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3324      	adds	r3, #36	; 0x24
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fbef 	bl	80034e0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff1e 	bl	8002b44 <prvUnlockQueue>
    }
 8002d08:	bf00      	nop
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af04      	add	r7, sp, #16
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f001 fca9 	bl	800467c <pvPortMalloc>
 8002d2a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00e      	beq.n	8002d50 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d32:	2058      	movs	r0, #88	; 0x58
 8002d34:	f001 fca2 	bl	800467c <pvPortMalloc>
 8002d38:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
 8002d46:	e005      	b.n	8002d54 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d48:	6978      	ldr	r0, [r7, #20]
 8002d4a:	f001 fd77 	bl	800483c <vPortFree>
 8002d4e:	e001      	b.n	8002d54 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d013      	beq.n	8002d82 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d5a:	88fa      	ldrh	r2, [r7, #6]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9303      	str	r3, [sp, #12]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	9302      	str	r3, [sp, #8]
 8002d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f80e 	bl	8002d92 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d76:	69f8      	ldr	r0, [r7, #28]
 8002d78:	f000 f8a2 	bl	8002ec0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e002      	b.n	8002d88 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d82:	f04f 33ff 	mov.w	r3, #4294967295
 8002d86:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d88:	69bb      	ldr	r3, [r7, #24]
    }
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b088      	sub	sp, #32
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	461a      	mov	r2, r3
 8002daa:	21a5      	movs	r1, #165	; 0xa5
 8002dac:	f003 fd08 	bl	80067c0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f023 0307 	bic.w	r3, r3, #7
 8002dc8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <prvInitialiseNewTask+0x58>
        __asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	617b      	str	r3, [r7, #20]
    }
 8002de6:	bf00      	nop
 8002de8:	e7fe      	b.n	8002de8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01f      	beq.n	8002e30 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	e012      	b.n	8002e1c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	7819      	ldrb	r1, [r3, #0]
 8002dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	4413      	add	r3, r2
 8002e04:	3334      	adds	r3, #52	; 0x34
 8002e06:	460a      	mov	r2, r1
 8002e08:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	4413      	add	r3, r2
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2b09      	cmp	r3, #9
 8002e20:	d9e9      	bls.n	8002df6 <prvInitialiseNewTask+0x64>
 8002e22:	e000      	b.n	8002e26 <prvInitialiseNewTask+0x94>
            {
                break;
 8002e24:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e2e:	e003      	b.n	8002e38 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d901      	bls.n	8002e42 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e3e:	2304      	movs	r3, #4
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e4c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	2200      	movs	r2, #0
 8002e52:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	3304      	adds	r3, #4
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f96b 	bl	8002134 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	3318      	adds	r3, #24
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff f966 	bl	8002134 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	f1c3 0205 	rsb	r2, r3, #5
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	3350      	adds	r3, #80	; 0x50
 8002e82:	2204      	movs	r2, #4
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 fc9a 	bl	80067c0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	3354      	adds	r3, #84	; 0x54
 8002e90:	2201      	movs	r2, #1
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 fc93 	bl	80067c0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	68f9      	ldr	r1, [r7, #12]
 8002e9e:	69b8      	ldr	r0, [r7, #24]
 8002ea0:	f001 f914 	bl	80040cc <pxPortInitialiseStack>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002eb6:	bf00      	nop
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ec0:	b5b0      	push	{r4, r5, r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ec8:	f001 faac 	bl	8004424 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ecc:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <prvAddNewTaskToReadyList+0xfc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	4a3a      	ldr	r2, [pc, #232]	; (8002fbc <prvAddNewTaskToReadyList+0xfc>)
 8002ed4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ed6:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <prvAddNewTaskToReadyList+0x100>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ede:	4a38      	ldr	r2, [pc, #224]	; (8002fc0 <prvAddNewTaskToReadyList+0x100>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ee4:	4b35      	ldr	r3, [pc, #212]	; (8002fbc <prvAddNewTaskToReadyList+0xfc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d110      	bne.n	8002f0e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002eec:	f000 fc2c 	bl	8003748 <prvInitialiseTaskLists>
 8002ef0:	e00d      	b.n	8002f0e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ef2:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <prvAddNewTaskToReadyList+0x104>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <prvAddNewTaskToReadyList+0x100>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d802      	bhi.n	8002f0e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f08:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <prvAddNewTaskToReadyList+0x100>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f0e:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <prvAddNewTaskToReadyList+0x108>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a2c      	ldr	r2, [pc, #176]	; (8002fc8 <prvAddNewTaskToReadyList+0x108>)
 8002f16:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f18:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <prvAddNewTaskToReadyList+0x108>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <prvAddNewTaskToReadyList+0x94>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 f981 	bl	8006230 <SEGGER_SYSVIEW_OnTaskCreate>
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	461d      	mov	r5, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461c      	mov	r4, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	1ae3      	subs	r3, r4, r3
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	462b      	mov	r3, r5
 8002f50:	f001 fe42 	bl	8004bd8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 f9ee 	bl	8006338 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	2201      	movs	r2, #1
 8002f62:	409a      	lsls	r2, r3
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <prvAddNewTaskToReadyList+0x10c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <prvAddNewTaskToReadyList+0x10c>)
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <prvAddNewTaskToReadyList+0x110>)
 8002f7c:	441a      	add	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	4619      	mov	r1, r3
 8002f84:	4610      	mov	r0, r2
 8002f86:	f7ff f8e2 	bl	800214e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f8a:	f001 fa7b 	bl	8004484 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <prvAddNewTaskToReadyList+0x104>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00e      	beq.n	8002fb4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <prvAddNewTaskToReadyList+0x100>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d207      	bcs.n	8002fb4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <prvAddNewTaskToReadyList+0x114>)
 8002fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bdb0      	pop	{r4, r5, r7, pc}
 8002fbc:	200001fc 	.word	0x200001fc
 8002fc0:	20000124 	.word	0x20000124
 8002fc4:	20000208 	.word	0x20000208
 8002fc8:	20000218 	.word	0x20000218
 8002fcc:	20000204 	.word	0x20000204
 8002fd0:	20000128 	.word	0x20000128
 8002fd4:	e000ed04 	.word	0xe000ed04

08002fd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <vTaskStartScheduler+0xac>)
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2282      	movs	r2, #130	; 0x82
 8002fea:	4927      	ldr	r1, [pc, #156]	; (8003088 <vTaskStartScheduler+0xb0>)
 8002fec:	4827      	ldr	r0, [pc, #156]	; (800308c <vTaskStartScheduler+0xb4>)
 8002fee:	f7ff fe8f 	bl	8002d10 <xTaskCreate>
 8002ff2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d102      	bne.n	8003000 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002ffa:	f000 fd55 	bl	8003aa8 <xTimerCreateTimerTask>
 8002ffe:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d129      	bne.n	800305a <vTaskStartScheduler+0x82>
        __asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	60bb      	str	r3, [r7, #8]
    }
 8003018:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <vTaskStartScheduler+0xb8>)
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <vTaskStartScheduler+0xbc>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <vTaskStartScheduler+0xc0>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800302e:	4b1b      	ldr	r3, [pc, #108]	; (800309c <vTaskStartScheduler+0xc4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3334      	adds	r3, #52	; 0x34
 8003034:	2205      	movs	r2, #5
 8003036:	4914      	ldr	r1, [pc, #80]	; (8003088 <vTaskStartScheduler+0xb0>)
 8003038:	4618      	mov	r0, r3
 800303a:	f003 fba3 	bl	8006784 <memcmp>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <vTaskStartScheduler+0x78>
 8003044:	4b15      	ldr	r3, [pc, #84]	; (800309c <vTaskStartScheduler+0xc4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f003 f933 	bl	80062b4 <SEGGER_SYSVIEW_OnTaskStartExec>
 800304e:	e001      	b.n	8003054 <vTaskStartScheduler+0x7c>
 8003050:	f003 f8d2 	bl	80061f8 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003054:	f001 f8c6 	bl	80041e4 <xPortStartScheduler>
 8003058:	e00e      	b.n	8003078 <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d10a      	bne.n	8003078 <vTaskStartScheduler+0xa0>
        __asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	607b      	str	r3, [r7, #4]
    }
 8003074:	bf00      	nop
 8003076:	e7fe      	b.n	8003076 <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <vTaskStartScheduler+0xc8>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000220 	.word	0x20000220
 8003088:	08007200 	.word	0x08007200
 800308c:	08003719 	.word	0x08003719
 8003090:	2000021c 	.word	0x2000021c
 8003094:	20000208 	.word	0x20000208
 8003098:	20000200 	.word	0x20000200
 800309c:	20000124 	.word	0x20000124
 80030a0:	2000000c 	.word	0x2000000c

080030a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <vTaskSuspendAll+0x18>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	4a03      	ldr	r2, [pc, #12]	; (80030bc <vTaskSuspendAll+0x18>)
 80030b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	20000224 	.word	0x20000224

080030c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030ce:	4b43      	ldr	r3, [pc, #268]	; (80031dc <xTaskResumeAll+0x11c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <xTaskResumeAll+0x2c>
        __asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	603b      	str	r3, [r7, #0]
    }
 80030e8:	bf00      	nop
 80030ea:	e7fe      	b.n	80030ea <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030ec:	f001 f99a 	bl	8004424 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030f0:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <xTaskResumeAll+0x11c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	4a39      	ldr	r2, [pc, #228]	; (80031dc <xTaskResumeAll+0x11c>)
 80030f8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030fa:	4b38      	ldr	r3, [pc, #224]	; (80031dc <xTaskResumeAll+0x11c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d165      	bne.n	80031ce <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003102:	4b37      	ldr	r3, [pc, #220]	; (80031e0 <xTaskResumeAll+0x120>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d061      	beq.n	80031ce <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800310a:	e032      	b.n	8003172 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800310c:	4b35      	ldr	r3, [pc, #212]	; (80031e4 <xTaskResumeAll+0x124>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3318      	adds	r3, #24
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff f875 	bl	8002208 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3304      	adds	r3, #4
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f870 	bl	8002208 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4618      	mov	r0, r3
 800312c:	f003 f904 	bl	8006338 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	2201      	movs	r2, #1
 8003136:	409a      	lsls	r2, r3
 8003138:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <xTaskResumeAll+0x128>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4313      	orrs	r3, r2
 800313e:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <xTaskResumeAll+0x128>)
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4a27      	ldr	r2, [pc, #156]	; (80031ec <xTaskResumeAll+0x12c>)
 8003150:	441a      	add	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3304      	adds	r3, #4
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f7fe fff8 	bl	800214e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <xTaskResumeAll+0x130>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d302      	bcc.n	8003172 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800316c:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <xTaskResumeAll+0x134>)
 800316e:	2201      	movs	r2, #1
 8003170:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003172:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <xTaskResumeAll+0x124>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1c8      	bne.n	800310c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003180:	f000 fb60 	bl	8003844 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003184:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <xTaskResumeAll+0x138>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d010      	beq.n	80031b2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003190:	f000 f858 	bl	8003244 <xTaskIncrementTick>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <xTaskResumeAll+0x134>)
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f1      	bne.n	8003190 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80031ac:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <xTaskResumeAll+0x138>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <xTaskResumeAll+0x134>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80031ba:	2301      	movs	r3, #1
 80031bc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <xTaskResumeAll+0x13c>)
 80031c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80031ce:	f001 f959 	bl	8004484 <vPortExitCritical>

    return xAlreadyYielded;
 80031d2:	68bb      	ldr	r3, [r7, #8]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000224 	.word	0x20000224
 80031e0:	200001fc 	.word	0x200001fc
 80031e4:	200001bc 	.word	0x200001bc
 80031e8:	20000204 	.word	0x20000204
 80031ec:	20000128 	.word	0x20000128
 80031f0:	20000124 	.word	0x20000124
 80031f4:	20000210 	.word	0x20000210
 80031f8:	2000020c 	.word	0x2000020c
 80031fc:	e000ed04 	.word	0xe000ed04

08003200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <xTaskGetTickCount+0x1c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800320c:	687b      	ldr	r3, [r7, #4]
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000200 	.word	0x20000200

08003220 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003226:	f001 f9e9 	bl	80045fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800322a:	2300      	movs	r3, #0
 800322c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <xTaskGetTickCountFromISR+0x20>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003234:	683b      	ldr	r3, [r7, #0]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000200 	.word	0x20000200

08003244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800324e:	4b50      	ldr	r3, [pc, #320]	; (8003390 <xTaskIncrementTick+0x14c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 8092 	bne.w	800337c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003258:	4b4e      	ldr	r3, [pc, #312]	; (8003394 <xTaskIncrementTick+0x150>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003260:	4a4c      	ldr	r2, [pc, #304]	; (8003394 <xTaskIncrementTick+0x150>)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d120      	bne.n	80032ae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800326c:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <xTaskIncrementTick+0x154>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <xTaskIncrementTick+0x48>
        __asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	603b      	str	r3, [r7, #0]
    }
 8003288:	bf00      	nop
 800328a:	e7fe      	b.n	800328a <xTaskIncrementTick+0x46>
 800328c:	4b42      	ldr	r3, [pc, #264]	; (8003398 <xTaskIncrementTick+0x154>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	4b42      	ldr	r3, [pc, #264]	; (800339c <xTaskIncrementTick+0x158>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a40      	ldr	r2, [pc, #256]	; (8003398 <xTaskIncrementTick+0x154>)
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4a40      	ldr	r2, [pc, #256]	; (800339c <xTaskIncrementTick+0x158>)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <xTaskIncrementTick+0x15c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3301      	adds	r3, #1
 80032a6:	4a3e      	ldr	r2, [pc, #248]	; (80033a0 <xTaskIncrementTick+0x15c>)
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	f000 facb 	bl	8003844 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80032ae:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <xTaskIncrementTick+0x160>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d34c      	bcc.n	8003352 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032b8:	4b37      	ldr	r3, [pc, #220]	; (8003398 <xTaskIncrementTick+0x154>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d104      	bne.n	80032cc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c2:	4b38      	ldr	r3, [pc, #224]	; (80033a4 <xTaskIncrementTick+0x160>)
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295
 80032c8:	601a      	str	r2, [r3, #0]
                    break;
 80032ca:	e042      	b.n	8003352 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032cc:	4b32      	ldr	r3, [pc, #200]	; (8003398 <xTaskIncrementTick+0x154>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d203      	bcs.n	80032ec <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032e4:	4a2f      	ldr	r2, [pc, #188]	; (80033a4 <xTaskIncrementTick+0x160>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032ea:	e032      	b.n	8003352 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3304      	adds	r3, #4
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe ff89 	bl	8002208 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d004      	beq.n	8003308 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3318      	adds	r3, #24
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe ff80 	bl	8002208 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 f814 	bl	8006338 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2201      	movs	r2, #1
 8003316:	409a      	lsls	r2, r3
 8003318:	4b23      	ldr	r3, [pc, #140]	; (80033a8 <xTaskIncrementTick+0x164>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4313      	orrs	r3, r2
 800331e:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <xTaskIncrementTick+0x164>)
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4a1f      	ldr	r2, [pc, #124]	; (80033ac <xTaskIncrementTick+0x168>)
 8003330:	441a      	add	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3304      	adds	r3, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4610      	mov	r0, r2
 800333a:	f7fe ff08 	bl	800214e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <xTaskIncrementTick+0x16c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	429a      	cmp	r2, r3
 800334a:	d3b5      	bcc.n	80032b8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800334c:	2301      	movs	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003350:	e7b2      	b.n	80032b8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003352:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <xTaskIncrementTick+0x16c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	4914      	ldr	r1, [pc, #80]	; (80033ac <xTaskIncrementTick+0x168>)
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d901      	bls.n	800336e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800336a:	2301      	movs	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <xTaskIncrementTick+0x170>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003376:	2301      	movs	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e004      	b.n	8003386 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800337c:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <xTaskIncrementTick+0x174>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <xTaskIncrementTick+0x174>)
 8003384:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003386:	697b      	ldr	r3, [r7, #20]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000224 	.word	0x20000224
 8003394:	20000200 	.word	0x20000200
 8003398:	200001b4 	.word	0x200001b4
 800339c:	200001b8 	.word	0x200001b8
 80033a0:	20000214 	.word	0x20000214
 80033a4:	2000021c 	.word	0x2000021c
 80033a8:	20000204 	.word	0x20000204
 80033ac:	20000128 	.word	0x20000128
 80033b0:	20000124 	.word	0x20000124
 80033b4:	20000210 	.word	0x20000210
 80033b8:	2000020c 	.word	0x2000020c

080033bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033c2:	4b2f      	ldr	r3, [pc, #188]	; (8003480 <vTaskSwitchContext+0xc4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80033ca:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <vTaskSwitchContext+0xc8>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80033d0:	e052      	b.n	8003478 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 80033d2:	4b2c      	ldr	r3, [pc, #176]	; (8003484 <vTaskSwitchContext+0xc8>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033d8:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <vTaskSwitchContext+0xcc>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	fab3 f383 	clz	r3, r3
 80033e4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80033e6:	7afb      	ldrb	r3, [r7, #11]
 80033e8:	f1c3 031f 	rsb	r3, r3, #31
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	4927      	ldr	r1, [pc, #156]	; (800348c <vTaskSwitchContext+0xd0>)
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	607b      	str	r3, [r7, #4]
    }
 8003414:	bf00      	nop
 8003416:	e7fe      	b.n	8003416 <vTaskSwitchContext+0x5a>
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4a1a      	ldr	r2, [pc, #104]	; (800348c <vTaskSwitchContext+0xd0>)
 8003424:	4413      	add	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	3308      	adds	r3, #8
 800343a:	429a      	cmp	r2, r3
 800343c:	d104      	bne.n	8003448 <vTaskSwitchContext+0x8c>
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <vTaskSwitchContext+0xd4>)
 8003450:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003452:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <vTaskSwitchContext+0xd4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3334      	adds	r3, #52	; 0x34
 8003458:	2205      	movs	r2, #5
 800345a:	490e      	ldr	r1, [pc, #56]	; (8003494 <vTaskSwitchContext+0xd8>)
 800345c:	4618      	mov	r0, r3
 800345e:	f003 f991 	bl	8006784 <memcmp>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <vTaskSwitchContext+0xb8>
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <vTaskSwitchContext+0xd4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f002 ff21 	bl	80062b4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003472:	e001      	b.n	8003478 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8003474:	f002 fec0 	bl	80061f8 <SEGGER_SYSVIEW_OnIdle>
}
 8003478:	bf00      	nop
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000224 	.word	0x20000224
 8003484:	20000210 	.word	0x20000210
 8003488:	20000204 	.word	0x20000204
 800348c:	20000128 	.word	0x20000128
 8003490:	20000124 	.word	0x20000124
 8003494:	08007200 	.word	0x08007200

08003498 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10a      	bne.n	80034be <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	60fb      	str	r3, [r7, #12]
    }
 80034ba:	bf00      	nop
 80034bc:	e7fe      	b.n	80034bc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <vTaskPlaceOnEventList+0x44>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3318      	adds	r3, #24
 80034c4:	4619      	mov	r1, r3
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fe fe65 	bl	8002196 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034cc:	2101      	movs	r1, #1
 80034ce:	6838      	ldr	r0, [r7, #0]
 80034d0:	f000 fa72 	bl	80039b8 <prvAddCurrentTaskToDelayedList>
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000124 	.word	0x20000124

080034e0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	617b      	str	r3, [r7, #20]
    }
 8003504:	bf00      	nop
 8003506:	e7fe      	b.n	8003506 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <vTaskPlaceOnEventListRestricted+0x58>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3318      	adds	r3, #24
 800350e:	4619      	mov	r1, r3
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f7fe fe1c 	bl	800214e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800351c:	f04f 33ff 	mov.w	r3, #4294967295
 8003520:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003522:	2024      	movs	r0, #36	; 0x24
 8003524:	f002 f96a 	bl	80057fc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	68b8      	ldr	r0, [r7, #8]
 800352c:	f000 fa44 	bl	80039b8 <prvAddCurrentTaskToDelayedList>
    }
 8003530:	bf00      	nop
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000124 	.word	0x20000124

0800353c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	60fb      	str	r3, [r7, #12]
    }
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	3318      	adds	r3, #24
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe fe4b 	bl	8002208 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003572:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <xTaskRemoveFromEventList+0xb4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d120      	bne.n	80035bc <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	3304      	adds	r3, #4
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe fe42 	bl	8002208 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4618      	mov	r0, r3
 8003588:	f002 fed6 	bl	8006338 <SEGGER_SYSVIEW_OnTaskStartReady>
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	2201      	movs	r2, #1
 8003592:	409a      	lsls	r2, r3
 8003594:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <xTaskRemoveFromEventList+0xb8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4313      	orrs	r3, r2
 800359a:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <xTaskRemoveFromEventList+0xb8>)
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <xTaskRemoveFromEventList+0xbc>)
 80035ac:	441a      	add	r2, r3
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	3304      	adds	r3, #4
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f7fe fdca 	bl	800214e <vListInsertEnd>
 80035ba:	e005      	b.n	80035c8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	3318      	adds	r3, #24
 80035c0:	4619      	mov	r1, r3
 80035c2:	480e      	ldr	r0, [pc, #56]	; (80035fc <xTaskRemoveFromEventList+0xc0>)
 80035c4:	f7fe fdc3 	bl	800214e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <xTaskRemoveFromEventList+0xc4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d905      	bls.n	80035e2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035d6:	2301      	movs	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035da:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <xTaskRemoveFromEventList+0xc8>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e001      	b.n	80035e6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80035e6:	697b      	ldr	r3, [r7, #20]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000224 	.word	0x20000224
 80035f4:	20000204 	.word	0x20000204
 80035f8:	20000128 	.word	0x20000128
 80035fc:	200001bc 	.word	0x200001bc
 8003600:	20000124 	.word	0x20000124
 8003604:	20000210 	.word	0x20000210

08003608 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <vTaskInternalSetTimeOutState+0x24>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <vTaskInternalSetTimeOutState+0x28>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	605a      	str	r2, [r3, #4]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	20000214 	.word	0x20000214
 8003630:	20000200 	.word	0x20000200

08003634 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	613b      	str	r3, [r7, #16]
    }
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	60fb      	str	r3, [r7, #12]
    }
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003676:	f000 fed5 	bl	8004424 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800367a:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <xTaskCheckForTimeOut+0xc4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d102      	bne.n	800369a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	e026      	b.n	80036e8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <xTaskCheckForTimeOut+0xc8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d00a      	beq.n	80036bc <xTaskCheckForTimeOut+0x88>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d305      	bcc.n	80036bc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036b0:	2301      	movs	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e015      	b.n	80036e8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d20b      	bcs.n	80036de <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	1ad2      	subs	r2, r2, r3
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ff98 	bl	8003608 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	e004      	b.n	80036e8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036e4:	2301      	movs	r3, #1
 80036e6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036e8:	f000 fecc 	bl	8004484 <vPortExitCritical>

    return xReturn;
 80036ec:	69fb      	ldr	r3, [r7, #28]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000200 	.word	0x20000200
 80036fc:	20000214 	.word	0x20000214

08003700 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <vTaskMissedYield+0x14>)
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bf00      	nop
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	20000210 	.word	0x20000210

08003718 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003720:	f000 f852 	bl	80037c8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <prvIdleTask+0x28>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d9f9      	bls.n	8003720 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <prvIdleTask+0x2c>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800373c:	e7f0      	b.n	8003720 <prvIdleTask+0x8>
 800373e:	bf00      	nop
 8003740:	20000128 	.word	0x20000128
 8003744:	e000ed04 	.word	0xe000ed04

08003748 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800374e:	2300      	movs	r3, #0
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	e00c      	b.n	800376e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4a12      	ldr	r2, [pc, #72]	; (80037a8 <prvInitialiseTaskLists+0x60>)
 8003760:	4413      	add	r3, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fcc6 	bl	80020f4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3301      	adds	r3, #1
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d9ef      	bls.n	8003754 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003774:	480d      	ldr	r0, [pc, #52]	; (80037ac <prvInitialiseTaskLists+0x64>)
 8003776:	f7fe fcbd 	bl	80020f4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800377a:	480d      	ldr	r0, [pc, #52]	; (80037b0 <prvInitialiseTaskLists+0x68>)
 800377c:	f7fe fcba 	bl	80020f4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003780:	480c      	ldr	r0, [pc, #48]	; (80037b4 <prvInitialiseTaskLists+0x6c>)
 8003782:	f7fe fcb7 	bl	80020f4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003786:	480c      	ldr	r0, [pc, #48]	; (80037b8 <prvInitialiseTaskLists+0x70>)
 8003788:	f7fe fcb4 	bl	80020f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800378c:	480b      	ldr	r0, [pc, #44]	; (80037bc <prvInitialiseTaskLists+0x74>)
 800378e:	f7fe fcb1 	bl	80020f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <prvInitialiseTaskLists+0x78>)
 8003794:	4a05      	ldr	r2, [pc, #20]	; (80037ac <prvInitialiseTaskLists+0x64>)
 8003796:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <prvInitialiseTaskLists+0x7c>)
 800379a:	4a05      	ldr	r2, [pc, #20]	; (80037b0 <prvInitialiseTaskLists+0x68>)
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000128 	.word	0x20000128
 80037ac:	2000018c 	.word	0x2000018c
 80037b0:	200001a0 	.word	0x200001a0
 80037b4:	200001bc 	.word	0x200001bc
 80037b8:	200001d0 	.word	0x200001d0
 80037bc:	200001e8 	.word	0x200001e8
 80037c0:	200001b4 	.word	0x200001b4
 80037c4:	200001b8 	.word	0x200001b8

080037c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ce:	e019      	b.n	8003804 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80037d0:	f000 fe28 	bl	8004424 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d4:	4b10      	ldr	r3, [pc, #64]	; (8003818 <prvCheckTasksWaitingTermination+0x50>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe fd11 	bl	8002208 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <prvCheckTasksWaitingTermination+0x54>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	4a0b      	ldr	r2, [pc, #44]	; (800381c <prvCheckTasksWaitingTermination+0x54>)
 80037ee:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <prvCheckTasksWaitingTermination+0x58>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <prvCheckTasksWaitingTermination+0x58>)
 80037f8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80037fa:	f000 fe43 	bl	8004484 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f810 	bl	8003824 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <prvCheckTasksWaitingTermination+0x58>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e1      	bne.n	80037d0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200001d0 	.word	0x200001d0
 800381c:	200001fc 	.word	0x200001fc
 8003820:	200001e4 	.word	0x200001e4

08003824 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	4618      	mov	r0, r3
 8003832:	f001 f803 	bl	800483c <vPortFree>
                vPortFree( pxTCB );
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f001 f800 	bl	800483c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <prvResetNextTaskUnblockTime+0x30>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <prvResetNextTaskUnblockTime+0x34>)
 8003854:	f04f 32ff 	mov.w	r2, #4294967295
 8003858:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800385a:	e005      	b.n	8003868 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <prvResetNextTaskUnblockTime+0x30>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <prvResetNextTaskUnblockTime+0x34>)
 8003866:	6013      	str	r3, [r2, #0]
}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	200001b4 	.word	0x200001b4
 8003878:	2000021c 	.word	0x2000021c

0800387c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <xTaskGetSchedulerState+0x34>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800388a:	2301      	movs	r3, #1
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	e008      	b.n	80038a2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <xTaskGetSchedulerState+0x38>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003898:	2302      	movs	r3, #2
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	e001      	b.n	80038a2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80038a2:	687b      	ldr	r3, [r7, #4]
    }
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	20000208 	.word	0x20000208
 80038b4:	20000224 	.word	0x20000224

080038b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d068      	beq.n	80039a0 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80038ce:	4b37      	ldr	r3, [pc, #220]	; (80039ac <xTaskPriorityDisinherit+0xf4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d00a      	beq.n	80038ee <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	60fb      	str	r3, [r7, #12]
    }
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10a      	bne.n	800390c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	60bb      	str	r3, [r7, #8]
    }
 8003908:	bf00      	nop
 800390a:	e7fe      	b.n	800390a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391e:	429a      	cmp	r2, r3
 8003920:	d03e      	beq.n	80039a0 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d13a      	bne.n	80039a0 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	3304      	adds	r3, #4
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fc6a 	bl	8002208 <uxListRemove>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	2201      	movs	r2, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43da      	mvns	r2, r3
 8003946:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <xTaskPriorityDisinherit+0xf8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4013      	ands	r3, r2
 800394c:	4a18      	ldr	r2, [pc, #96]	; (80039b0 <xTaskPriorityDisinherit+0xf8>)
 800394e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4619      	mov	r1, r3
 8003954:	204a      	movs	r0, #74	; 0x4a
 8003956:	f001 ff6f 	bl	8005838 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	f1c3 0205 	rsb	r2, r3, #5
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	2201      	movs	r2, #1
 8003974:	409a      	lsls	r2, r3
 8003976:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <xTaskPriorityDisinherit+0xf8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4313      	orrs	r3, r2
 800397c:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <xTaskPriorityDisinherit+0xf8>)
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <xTaskPriorityDisinherit+0xfc>)
 800398e:	441a      	add	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	3304      	adds	r3, #4
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f7fe fbd9 	bl	800214e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800399c:	2301      	movs	r3, #1
 800399e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80039a0:	697b      	ldr	r3, [r7, #20]
    }
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000124 	.word	0x20000124
 80039b0:	20000204 	.word	0x20000204
 80039b4:	20000128 	.word	0x20000128

080039b8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80039c2:	4b32      	ldr	r3, [pc, #200]	; (8003a8c <prvAddCurrentTaskToDelayedList+0xd4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039c8:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe fc1a 	bl	8002208 <uxListRemove>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10b      	bne.n	80039f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80039da:	4b2d      	ldr	r3, [pc, #180]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	2201      	movs	r2, #1
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43da      	mvns	r2, r3
 80039e8:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <prvAddCurrentTaskToDelayedList+0xdc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4013      	ands	r3, r2
 80039ee:	4a29      	ldr	r2, [pc, #164]	; (8003a94 <prvAddCurrentTaskToDelayedList+0xdc>)
 80039f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d110      	bne.n	8003a1c <prvAddCurrentTaskToDelayedList+0x64>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003a00:	4b23      	ldr	r3, [pc, #140]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	211b      	movs	r1, #27
 8003a06:	4618      	mov	r0, r3
 8003a08:	f002 fcd8 	bl	80063bc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a0c:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4820      	ldr	r0, [pc, #128]	; (8003a98 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003a16:	f7fe fb9a 	bl	800214e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a1a:	e032      	b.n	8003a82 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a24:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d20f      	bcs.n	8003a54 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003a34:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2104      	movs	r1, #4
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f002 fcbe 	bl	80063bc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a40:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f7fe fba2 	bl	8002196 <vListInsert>
}
 8003a52:	e016      	b.n	8003a82 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2104      	movs	r1, #4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f002 fcae 	bl	80063bc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	f7fe fb92 	bl	8002196 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003a72:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d202      	bcs.n	8003a82 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003a7c:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	6013      	str	r3, [r2, #0]
}
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000200 	.word	0x20000200
 8003a90:	20000124 	.word	0x20000124
 8003a94:	20000204 	.word	0x20000204
 8003a98:	200001e8 	.word	0x200001e8
 8003a9c:	200001b8 	.word	0x200001b8
 8003aa0:	200001b4 	.word	0x200001b4
 8003aa4:	2000021c 	.word	0x2000021c

08003aa8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003ab2:	f000 fad5 	bl	8004060 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <xTimerCreateTimerTask+0x54>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <xTimerCreateTimerTask+0x58>)
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003acc:	490d      	ldr	r1, [pc, #52]	; (8003b04 <xTimerCreateTimerTask+0x5c>)
 8003ace:	480e      	ldr	r0, [pc, #56]	; (8003b08 <xTimerCreateTimerTask+0x60>)
 8003ad0:	f7ff f91e 	bl	8002d10 <xTaskCreate>
 8003ad4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	603b      	str	r3, [r7, #0]
    }
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003af2:	687b      	ldr	r3, [r7, #4]
    }
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20000258 	.word	0x20000258
 8003b00:	2000025c 	.word	0x2000025c
 8003b04:	08007208 	.word	0x08007208
 8003b08:	08003c41 	.word	0x08003c41

08003b0c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	623b      	str	r3, [r7, #32]
    }
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003b3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <xTimerGenericCommand+0x98>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d02a      	beq.n	8003b98 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	dc18      	bgt.n	8003b86 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b54:	f7ff fe92 	bl	800387c <xTaskGetSchedulerState>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d109      	bne.n	8003b72 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <xTimerGenericCommand+0x98>)
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	f107 0114 	add.w	r1, r7, #20
 8003b66:	2300      	movs	r3, #0
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	f7fe fc67 	bl	800243c <xQueueGenericSend>
 8003b6e:	6278      	str	r0, [r7, #36]	; 0x24
 8003b70:	e012      	b.n	8003b98 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <xTimerGenericCommand+0x98>)
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	f107 0114 	add.w	r1, r7, #20
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f7fe fc5d 	bl	800243c <xQueueGenericSend>
 8003b82:	6278      	str	r0, [r7, #36]	; 0x24
 8003b84:	e008      	b.n	8003b98 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <xTimerGenericCommand+0x98>)
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	f107 0114 	add.w	r1, r7, #20
 8003b8e:	2300      	movs	r3, #0
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	f7fe fd79 	bl	8002688 <xQueueGenericSendFromISR>
 8003b96:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3728      	adds	r7, #40	; 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000258 	.word	0x20000258

08003ba8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb2:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <prvProcessExpiredTimer+0x94>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe fb21 	bl	8002208 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d022      	beq.n	8003c1a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	699a      	ldr	r2, [r3, #24]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	18d1      	adds	r1, r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	6978      	ldr	r0, [r7, #20]
 8003be2:	f000 f8d1 	bl	8003d88 <prvInsertTimerInActiveList>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01f      	beq.n	8003c2c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bec:	2300      	movs	r3, #0
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	6978      	ldr	r0, [r7, #20]
 8003bf8:	f7ff ff88 	bl	8003b0c <xTimerGenericCommand>
 8003bfc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d113      	bne.n	8003c2c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	60fb      	str	r3, [r7, #12]
    }
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	6978      	ldr	r0, [r7, #20]
 8003c32:	4798      	blx	r3
    }
 8003c34:	bf00      	nop
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000250 	.word	0x20000250

08003c40 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c48:	f107 0308 	add.w	r3, r7, #8
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 f857 	bl	8003d00 <prvGetNextExpireTime>
 8003c52:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4619      	mov	r1, r3
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f803 	bl	8003c64 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c5e:	f000 f8d5 	bl	8003e0c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c62:	e7f1      	b.n	8003c48 <prvTimerTask+0x8>

08003c64 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c6e:	f7ff fa19 	bl	80030a4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c72:	f107 0308 	add.w	r3, r7, #8
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f866 	bl	8003d48 <prvSampleTimeNow>
 8003c7c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d130      	bne.n	8003ce6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <prvProcessTimerOrBlockTask+0x3c>
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d806      	bhi.n	8003ca0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c92:	f7ff fa15 	bl	80030c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff85 	bl	8003ba8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c9e:	e024      	b.n	8003cea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <prvProcessTimerOrBlockTask+0x90>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <prvProcessTimerOrBlockTask+0x50>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <prvProcessTimerOrBlockTask+0x52>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <prvProcessTimerOrBlockTask+0x94>)
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f7fe ffef 	bl	8002ca8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003cca:	f7ff f9f9 	bl	80030c0 <xTaskResumeAll>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <prvProcessTimerOrBlockTask+0x98>)
 8003cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	f3bf 8f6f 	isb	sy
    }
 8003ce4:	e001      	b.n	8003cea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003ce6:	f7ff f9eb 	bl	80030c0 <xTaskResumeAll>
    }
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000254 	.word	0x20000254
 8003cf8:	20000258 	.word	0x20000258
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <prvGetNextExpireTime+0x44>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <prvGetNextExpireTime+0x16>
 8003d12:	2201      	movs	r2, #1
 8003d14:	e000      	b.n	8003d18 <prvGetNextExpireTime+0x18>
 8003d16:	2200      	movs	r2, #0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d24:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <prvGetNextExpireTime+0x44>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	e001      	b.n	8003d34 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003d34:	68fb      	ldr	r3, [r7, #12]
    }
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000250 	.word	0x20000250

08003d48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003d50:	f7ff fa56 	bl	8003200 <xTaskGetTickCount>
 8003d54:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <prvSampleTimeNow+0x3c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d205      	bcs.n	8003d6c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d60:	f000 f91a 	bl	8003f98 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e002      	b.n	8003d72 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d72:	4a04      	ldr	r2, [pc, #16]	; (8003d84 <prvSampleTimeNow+0x3c>)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d78:	68fb      	ldr	r3, [r7, #12]
    }
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000260 	.word	0x20000260

08003d88 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d812      	bhi.n	8003dd4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	1ad2      	subs	r2, r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d302      	bcc.n	8003dc2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e01b      	b.n	8003dfa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <prvInsertTimerInActiveList+0x7c>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4610      	mov	r0, r2
 8003dce:	f7fe f9e2 	bl	8002196 <vListInsert>
 8003dd2:	e012      	b.n	8003dfa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d206      	bcs.n	8003dea <prvInsertTimerInActiveList+0x62>
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d302      	bcc.n	8003dea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e007      	b.n	8003dfa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dea:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <prvInsertTimerInActiveList+0x80>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f7fe f9ce 	bl	8002196 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003dfa:	697b      	ldr	r3, [r7, #20]
    }
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20000254 	.word	0x20000254
 8003e08:	20000250 	.word	0x20000250

08003e0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08c      	sub	sp, #48	; 0x30
 8003e10:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e12:	e0ae      	b.n	8003f72 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f2c0 80aa 	blt.w	8003f70 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe f9eb 	bl	8002208 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff87 	bl	8003d48 <prvSampleTimeNow>
 8003e3a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b09      	cmp	r3, #9
 8003e40:	f200 8097 	bhi.w	8003f72 <prvProcessReceivedCommands+0x166>
 8003e44:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <prvProcessReceivedCommands+0x40>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e75 	.word	0x08003e75
 8003e50:	08003e75 	.word	0x08003e75
 8003e54:	08003e75 	.word	0x08003e75
 8003e58:	08003ee9 	.word	0x08003ee9
 8003e5c:	08003efd 	.word	0x08003efd
 8003e60:	08003f47 	.word	0x08003f47
 8003e64:	08003e75 	.word	0x08003e75
 8003e68:	08003e75 	.word	0x08003e75
 8003e6c:	08003ee9 	.word	0x08003ee9
 8003e70:	08003efd 	.word	0x08003efd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	18d1      	adds	r1, r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a3a      	ldr	r2, [r7, #32]
 8003e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e94:	f7ff ff78 	bl	8003d88 <prvInsertTimerInActiveList>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d069      	beq.n	8003f72 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ea4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d05e      	beq.n	8003f72 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	441a      	add	r2, r3
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ec6:	f7ff fe21 	bl	8003b0c <xTimerGenericCommand>
 8003eca:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d14f      	bne.n	8003f72 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	61bb      	str	r3, [r7, #24]
    }
 8003ee4:	bf00      	nop
 8003ee6:	e7fe      	b.n	8003ee6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003efa:	e03a      	b.n	8003f72 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	617b      	str	r3, [r7, #20]
    }
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	18d1      	adds	r1, r2, r3
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	6a3a      	ldr	r2, [r7, #32]
 8003f3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f40:	f7ff ff22 	bl	8003d88 <prvInsertTimerInActiveList>
                        break;
 8003f44:	e015      	b.n	8003f72 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d103      	bne.n	8003f5c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f56:	f000 fc71 	bl	800483c <vPortFree>
 8003f5a:	e00a      	b.n	8003f72 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f6e:	e000      	b.n	8003f72 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003f70:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f72:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <prvProcessReceivedCommands+0x188>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f107 0108 	add.w	r1, r7, #8
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe fc41 	bl	8002804 <xQueueReceive>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f47f af45 	bne.w	8003e14 <prvProcessReceivedCommands+0x8>
        }
    }
 8003f8a:	bf00      	nop
 8003f8c:	bf00      	nop
 8003f8e:	3728      	adds	r7, #40	; 0x28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000258 	.word	0x20000258

08003f98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f9e:	e048      	b.n	8004032 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fa0:	4b2d      	ldr	r3, [pc, #180]	; (8004058 <prvSwitchTimerLists+0xc0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003faa:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <prvSwitchTimerLists+0xc0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe f925 	bl	8002208 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d02e      	beq.n	8004032 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d90e      	bls.n	8004004 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ff2:	4b19      	ldr	r3, [pc, #100]	; (8004058 <prvSwitchTimerLists+0xc0>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f7fe f8ca 	bl	8002196 <vListInsert>
 8004002:	e016      	b.n	8004032 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004004:	2300      	movs	r3, #0
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	2300      	movs	r3, #0
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	2100      	movs	r1, #0
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff fd7c 	bl	8003b0c <xTimerGenericCommand>
 8004014:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	603b      	str	r3, [r7, #0]
    }
 800402e:	bf00      	nop
 8004030:	e7fe      	b.n	8004030 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <prvSwitchTimerLists+0xc0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1b1      	bne.n	8003fa0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <prvSwitchTimerLists+0xc0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <prvSwitchTimerLists+0xc4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a04      	ldr	r2, [pc, #16]	; (8004058 <prvSwitchTimerLists+0xc0>)
 8004048:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800404a:	4a04      	ldr	r2, [pc, #16]	; (800405c <prvSwitchTimerLists+0xc4>)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	6013      	str	r3, [r2, #0]
    }
 8004050:	bf00      	nop
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000250 	.word	0x20000250
 800405c:	20000254 	.word	0x20000254

08004060 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004064:	f000 f9de 	bl	8004424 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004068:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <prvCheckForValidListAndQueue+0x54>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d11d      	bne.n	80040ac <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004070:	4811      	ldr	r0, [pc, #68]	; (80040b8 <prvCheckForValidListAndQueue+0x58>)
 8004072:	f7fe f83f 	bl	80020f4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004076:	4811      	ldr	r0, [pc, #68]	; (80040bc <prvCheckForValidListAndQueue+0x5c>)
 8004078:	f7fe f83c 	bl	80020f4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800407c:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <prvCheckForValidListAndQueue+0x60>)
 800407e:	4a0e      	ldr	r2, [pc, #56]	; (80040b8 <prvCheckForValidListAndQueue+0x58>)
 8004080:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <prvCheckForValidListAndQueue+0x64>)
 8004084:	4a0d      	ldr	r2, [pc, #52]	; (80040bc <prvCheckForValidListAndQueue+0x5c>)
 8004086:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004088:	2200      	movs	r2, #0
 800408a:	210c      	movs	r1, #12
 800408c:	200a      	movs	r0, #10
 800408e:	f7fe f94d 	bl	800232c <xQueueGenericCreate>
 8004092:	4603      	mov	r3, r0
 8004094:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <prvCheckForValidListAndQueue+0x54>)
 8004096:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <prvCheckForValidListAndQueue+0x54>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <prvCheckForValidListAndQueue+0x54>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4908      	ldr	r1, [pc, #32]	; (80040c8 <prvCheckForValidListAndQueue+0x68>)
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fdcc 	bl	8002c44 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80040ac:	f000 f9ea 	bl	8004484 <vPortExitCritical>
    }
 80040b0:	bf00      	nop
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000258 	.word	0x20000258
 80040b8:	20000228 	.word	0x20000228
 80040bc:	2000023c 	.word	0x2000023c
 80040c0:	20000250 	.word	0x20000250
 80040c4:	20000254 	.word	0x20000254
 80040c8:	08007210 	.word	0x08007210

080040cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3b04      	subs	r3, #4
 80040dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3b04      	subs	r3, #4
 80040ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f023 0201 	bic.w	r2, r3, #1
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3b04      	subs	r3, #4
 80040fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80040fc:	4a0c      	ldr	r2, [pc, #48]	; (8004130 <pxPortInitialiseStack+0x64>)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3b14      	subs	r3, #20
 8004106:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3b04      	subs	r3, #4
 8004112:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f06f 0202 	mvn.w	r2, #2
 800411a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3b20      	subs	r3, #32
 8004120:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004122:	68fb      	ldr	r3, [r7, #12]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	08004135 	.word	0x08004135

08004134 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800413e:	4b12      	ldr	r3, [pc, #72]	; (8004188 <prvTaskExitError+0x54>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d00a      	beq.n	800415e <prvTaskExitError+0x2a>
        __asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	60fb      	str	r3, [r7, #12]
    }
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <prvTaskExitError+0x28>
        __asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	60bb      	str	r3, [r7, #8]
    }
 8004170:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004172:	bf00      	nop
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0fc      	beq.n	8004174 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	20000010 	.word	0x20000010
 800418c:	00000000 	.word	0x00000000

08004190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <pxCurrentTCBConst2>)
 8004192:	6819      	ldr	r1, [r3, #0]
 8004194:	6808      	ldr	r0, [r1, #0]
 8004196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800419a:	f380 8809 	msr	PSP, r0
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f380 8811 	msr	BASEPRI, r0
 80041aa:	4770      	bx	lr
 80041ac:	f3af 8000 	nop.w

080041b0 <pxCurrentTCBConst2>:
 80041b0:	20000124 	.word	0x20000124
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop

080041b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80041b8:	4808      	ldr	r0, [pc, #32]	; (80041dc <prvPortStartFirstTask+0x24>)
 80041ba:	6800      	ldr	r0, [r0, #0]
 80041bc:	6800      	ldr	r0, [r0, #0]
 80041be:	f380 8808 	msr	MSP, r0
 80041c2:	f04f 0000 	mov.w	r0, #0
 80041c6:	f380 8814 	msr	CONTROL, r0
 80041ca:	b662      	cpsie	i
 80041cc:	b661      	cpsie	f
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	df00      	svc	0
 80041d8:	bf00      	nop
 80041da:	0000      	.short	0x0000
 80041dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80041e0:	bf00      	nop
 80041e2:	bf00      	nop

080041e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041ea:	4b46      	ldr	r3, [pc, #280]	; (8004304 <xPortStartScheduler+0x120>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a46      	ldr	r2, [pc, #280]	; (8004308 <xPortStartScheduler+0x124>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d10a      	bne.n	800420a <xPortStartScheduler+0x26>
        __asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	613b      	str	r3, [r7, #16]
    }
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800420a:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <xPortStartScheduler+0x120>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a3f      	ldr	r2, [pc, #252]	; (800430c <xPortStartScheduler+0x128>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10a      	bne.n	800422a <xPortStartScheduler+0x46>
        __asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	60fb      	str	r3, [r7, #12]
    }
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800422a:	4b39      	ldr	r3, [pc, #228]	; (8004310 <xPortStartScheduler+0x12c>)
 800422c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	22ff      	movs	r2, #255	; 0xff
 800423a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800424c:	b2da      	uxtb	r2, r3
 800424e:	4b31      	ldr	r3, [pc, #196]	; (8004314 <xPortStartScheduler+0x130>)
 8004250:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004252:	4b31      	ldr	r3, [pc, #196]	; (8004318 <xPortStartScheduler+0x134>)
 8004254:	2207      	movs	r2, #7
 8004256:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004258:	e009      	b.n	800426e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800425a:	4b2f      	ldr	r3, [pc, #188]	; (8004318 <xPortStartScheduler+0x134>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3b01      	subs	r3, #1
 8004260:	4a2d      	ldr	r2, [pc, #180]	; (8004318 <xPortStartScheduler+0x134>)
 8004262:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b80      	cmp	r3, #128	; 0x80
 8004278:	d0ef      	beq.n	800425a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800427a:	4b27      	ldr	r3, [pc, #156]	; (8004318 <xPortStartScheduler+0x134>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f1c3 0307 	rsb	r3, r3, #7
 8004282:	2b04      	cmp	r3, #4
 8004284:	d00a      	beq.n	800429c <xPortStartScheduler+0xb8>
        __asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	60bb      	str	r3, [r7, #8]
    }
 8004298:	bf00      	nop
 800429a:	e7fe      	b.n	800429a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800429c:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <xPortStartScheduler+0x134>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <xPortStartScheduler+0x134>)
 80042a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042a6:	4b1c      	ldr	r3, [pc, #112]	; (8004318 <xPortStartScheduler+0x134>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042ae:	4a1a      	ldr	r2, [pc, #104]	; (8004318 <xPortStartScheduler+0x134>)
 80042b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80042ba:	4b18      	ldr	r3, [pc, #96]	; (800431c <xPortStartScheduler+0x138>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a17      	ldr	r2, [pc, #92]	; (800431c <xPortStartScheduler+0x138>)
 80042c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80042c6:	4b15      	ldr	r3, [pc, #84]	; (800431c <xPortStartScheduler+0x138>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a14      	ldr	r2, [pc, #80]	; (800431c <xPortStartScheduler+0x138>)
 80042cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80042d2:	f000 f963 	bl	800459c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <xPortStartScheduler+0x13c>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80042dc:	f000 f982 	bl	80045e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042e0:	4b10      	ldr	r3, [pc, #64]	; (8004324 <xPortStartScheduler+0x140>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a0f      	ldr	r2, [pc, #60]	; (8004324 <xPortStartScheduler+0x140>)
 80042e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80042ec:	f7ff ff64 	bl	80041b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80042f0:	f7ff f864 	bl	80033bc <vTaskSwitchContext>
    prvTaskExitError();
 80042f4:	f7ff ff1e 	bl	8004134 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	e000ed00 	.word	0xe000ed00
 8004308:	410fc271 	.word	0x410fc271
 800430c:	410fc270 	.word	0x410fc270
 8004310:	e000e400 	.word	0xe000e400
 8004314:	20000264 	.word	0x20000264
 8004318:	20000268 	.word	0x20000268
 800431c:	e000ed20 	.word	0xe000ed20
 8004320:	20000010 	.word	0x20000010
 8004324:	e000ef34 	.word	0xe000ef34

08004328 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800432e:	4b37      	ldr	r3, [pc, #220]	; (800440c <vInitPrioGroupValue+0xe4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a37      	ldr	r2, [pc, #220]	; (8004410 <vInitPrioGroupValue+0xe8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d10a      	bne.n	800434e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	613b      	str	r3, [r7, #16]
    }
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800434e:	4b2f      	ldr	r3, [pc, #188]	; (800440c <vInitPrioGroupValue+0xe4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a30      	ldr	r2, [pc, #192]	; (8004414 <vInitPrioGroupValue+0xec>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d10a      	bne.n	800436e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	60fb      	str	r3, [r7, #12]
    }
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800436e:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <vInitPrioGroupValue+0xf0>)
 8004370:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	22ff      	movs	r2, #255	; 0xff
 800437e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004390:	b2da      	uxtb	r2, r3
 8004392:	4b22      	ldr	r3, [pc, #136]	; (800441c <vInitPrioGroupValue+0xf4>)
 8004394:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004396:	4b22      	ldr	r3, [pc, #136]	; (8004420 <vInitPrioGroupValue+0xf8>)
 8004398:	2207      	movs	r2, #7
 800439a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800439c:	e009      	b.n	80043b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800439e:	4b20      	ldr	r3, [pc, #128]	; (8004420 <vInitPrioGroupValue+0xf8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <vInitPrioGroupValue+0xf8>)
 80043a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	d0ef      	beq.n	800439e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043be:	4b18      	ldr	r3, [pc, #96]	; (8004420 <vInitPrioGroupValue+0xf8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1c3 0307 	rsb	r3, r3, #7
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d00a      	beq.n	80043e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	60bb      	str	r3, [r7, #8]
    }
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043e0:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <vInitPrioGroupValue+0xf8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	4a0e      	ldr	r2, [pc, #56]	; (8004420 <vInitPrioGroupValue+0xf8>)
 80043e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <vInitPrioGroupValue+0xf8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043f2:	4a0b      	ldr	r2, [pc, #44]	; (8004420 <vInitPrioGroupValue+0xf8>)
 80043f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	e000ed00 	.word	0xe000ed00
 8004410:	410fc271 	.word	0x410fc271
 8004414:	410fc270 	.word	0x410fc270
 8004418:	e000e400 	.word	0xe000e400
 800441c:	20000264 	.word	0x20000264
 8004420:	20000268 	.word	0x20000268

08004424 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
        __asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	607b      	str	r3, [r7, #4]
    }
 800443c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800443e:	4b0f      	ldr	r3, [pc, #60]	; (800447c <vPortEnterCritical+0x58>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3301      	adds	r3, #1
 8004444:	4a0d      	ldr	r2, [pc, #52]	; (800447c <vPortEnterCritical+0x58>)
 8004446:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <vPortEnterCritical+0x58>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d10f      	bne.n	8004470 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <vPortEnterCritical+0x5c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <vPortEnterCritical+0x4c>
        __asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	603b      	str	r3, [r7, #0]
    }
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <vPortEnterCritical+0x4a>
    }
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	20000010 	.word	0x20000010
 8004480:	e000ed04 	.word	0xe000ed04

08004484 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800448a:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <vPortExitCritical+0x50>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <vPortExitCritical+0x24>
        __asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	607b      	str	r3, [r7, #4]
    }
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <vPortExitCritical+0x50>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	4a09      	ldr	r2, [pc, #36]	; (80044d4 <vPortExitCritical+0x50>)
 80044b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80044b2:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <vPortExitCritical+0x50>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d105      	bne.n	80044c6 <vPortExitCritical+0x42>
 80044ba:	2300      	movs	r3, #0
 80044bc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f383 8811 	msr	BASEPRI, r3
    }
 80044c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000010 	.word	0x20000010
	...

080044e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044e0:	f3ef 8009 	mrs	r0, PSP
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	4b15      	ldr	r3, [pc, #84]	; (8004540 <pxCurrentTCBConst>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	f01e 0f10 	tst.w	lr, #16
 80044f0:	bf08      	it	eq
 80044f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	6010      	str	r0, [r2, #0]
 80044fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004504:	f380 8811 	msr	BASEPRI, r0
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f7fe ff54 	bl	80033bc <vTaskSwitchContext>
 8004514:	f04f 0000 	mov.w	r0, #0
 8004518:	f380 8811 	msr	BASEPRI, r0
 800451c:	bc09      	pop	{r0, r3}
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	6808      	ldr	r0, [r1, #0]
 8004522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004526:	f01e 0f10 	tst.w	lr, #16
 800452a:	bf08      	it	eq
 800452c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004530:	f380 8809 	msr	PSP, r0
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	f3af 8000 	nop.w

08004540 <pxCurrentTCBConst>:
 8004540:	20000124 	.word	0x20000124
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop

08004548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
        __asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	607b      	str	r3, [r7, #4]
    }
 8004560:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004562:	f001 fdcf 	bl	8006104 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004566:	f7fe fe6d 	bl	8003244 <xTaskIncrementTick>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d006      	beq.n	800457e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004570:	f001 fe26 	bl	80061c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004574:	4b08      	ldr	r3, [pc, #32]	; (8004598 <SysTick_Handler+0x50>)
 8004576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e001      	b.n	8004582 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800457e:	f001 fe03 	bl	8006188 <SEGGER_SYSVIEW_RecordExitISR>
 8004582:	2300      	movs	r3, #0
 8004584:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	f383 8811 	msr	BASEPRI, r3
    }
 800458c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	e000ed04 	.word	0xe000ed04

0800459c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <vPortSetupTimerInterrupt+0x34>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045a6:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <vPortSetupTimerInterrupt+0x38>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <vPortSetupTimerInterrupt+0x3c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <vPortSetupTimerInterrupt+0x40>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <vPortSetupTimerInterrupt+0x44>)
 80045ba:	3b01      	subs	r3, #1
 80045bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045be:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <vPortSetupTimerInterrupt+0x34>)
 80045c0:	2207      	movs	r2, #7
 80045c2:	601a      	str	r2, [r3, #0]
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	e000e010 	.word	0xe000e010
 80045d4:	e000e018 	.word	0xe000e018
 80045d8:	20000000 	.word	0x20000000
 80045dc:	10624dd3 	.word	0x10624dd3
 80045e0:	e000e014 	.word	0xe000e014

080045e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80045e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045f4 <vPortEnableVFP+0x10>
 80045e8:	6801      	ldr	r1, [r0, #0]
 80045ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045ee:	6001      	str	r1, [r0, #0]
 80045f0:	4770      	bx	lr
 80045f2:	0000      	.short	0x0000
 80045f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop

080045fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004602:	f3ef 8305 	mrs	r3, IPSR
 8004606:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b0f      	cmp	r3, #15
 800460c:	d914      	bls.n	8004638 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800460e:	4a17      	ldr	r2, [pc, #92]	; (800466c <vPortValidateInterruptPriority+0x70>)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004618:	4b15      	ldr	r3, [pc, #84]	; (8004670 <vPortValidateInterruptPriority+0x74>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	7afa      	ldrb	r2, [r7, #11]
 800461e:	429a      	cmp	r2, r3
 8004620:	d20a      	bcs.n	8004638 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	607b      	str	r3, [r7, #4]
    }
 8004634:	bf00      	nop
 8004636:	e7fe      	b.n	8004636 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004638:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <vPortValidateInterruptPriority+0x78>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004640:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <vPortValidateInterruptPriority+0x7c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d90a      	bls.n	800465e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	603b      	str	r3, [r7, #0]
    }
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <vPortValidateInterruptPriority+0x60>
    }
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	e000e3f0 	.word	0xe000e3f0
 8004670:	20000264 	.word	0x20000264
 8004674:	e000ed0c 	.word	0xe000ed0c
 8004678:	20000268 	.word	0x20000268

0800467c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004688:	f7fe fd0c 	bl	80030a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800468c:	4b65      	ldr	r3, [pc, #404]	; (8004824 <pvPortMalloc+0x1a8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004694:	f000 f934 	bl	8004900 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004698:	4b63      	ldr	r3, [pc, #396]	; (8004828 <pvPortMalloc+0x1ac>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 80a7 	bne.w	80047f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d02d      	beq.n	8004708 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80046ac:	2208      	movs	r2, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d227      	bcs.n	8004708 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80046b8:	2208      	movs	r2, #8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d021      	beq.n	800470e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f023 0307 	bic.w	r3, r3, #7
 80046d0:	3308      	adds	r3, #8
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d214      	bcs.n	8004702 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f023 0307 	bic.w	r3, r3, #7
 80046de:	3308      	adds	r3, #8
 80046e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d010      	beq.n	800470e <pvPortMalloc+0x92>
        __asm volatile
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	617b      	str	r3, [r7, #20]
    }
 80046fe:	bf00      	nop
 8004700:	e7fe      	b.n	8004700 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004706:	e002      	b.n	800470e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	e000      	b.n	8004710 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800470e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d06e      	beq.n	80047f4 <pvPortMalloc+0x178>
 8004716:	4b45      	ldr	r3, [pc, #276]	; (800482c <pvPortMalloc+0x1b0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	d869      	bhi.n	80047f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004720:	4b43      	ldr	r3, [pc, #268]	; (8004830 <pvPortMalloc+0x1b4>)
 8004722:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004724:	4b42      	ldr	r3, [pc, #264]	; (8004830 <pvPortMalloc+0x1b4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800472a:	e004      	b.n	8004736 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	429a      	cmp	r2, r3
 800473e:	d903      	bls.n	8004748 <pvPortMalloc+0xcc>
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f1      	bne.n	800472c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004748:	4b36      	ldr	r3, [pc, #216]	; (8004824 <pvPortMalloc+0x1a8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474e:	429a      	cmp	r2, r3
 8004750:	d050      	beq.n	80047f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2208      	movs	r2, #8
 8004758:	4413      	add	r3, r2
 800475a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	1ad2      	subs	r2, r2, r3
 800476c:	2308      	movs	r3, #8
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	429a      	cmp	r2, r3
 8004772:	d91f      	bls.n	80047b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <pvPortMalloc+0x120>
        __asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	613b      	str	r3, [r7, #16]
    }
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	1ad2      	subs	r2, r2, r3
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047ae:	69b8      	ldr	r0, [r7, #24]
 80047b0:	f000 f908 	bl	80049c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047b4:	4b1d      	ldr	r3, [pc, #116]	; (800482c <pvPortMalloc+0x1b0>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	4a1b      	ldr	r2, [pc, #108]	; (800482c <pvPortMalloc+0x1b0>)
 80047c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047c2:	4b1a      	ldr	r3, [pc, #104]	; (800482c <pvPortMalloc+0x1b0>)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <pvPortMalloc+0x1b8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d203      	bcs.n	80047d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047ce:	4b17      	ldr	r3, [pc, #92]	; (800482c <pvPortMalloc+0x1b0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a18      	ldr	r2, [pc, #96]	; (8004834 <pvPortMalloc+0x1b8>)
 80047d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	4b13      	ldr	r3, [pc, #76]	; (8004828 <pvPortMalloc+0x1ac>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	431a      	orrs	r2, r3
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80047ea:	4b13      	ldr	r3, [pc, #76]	; (8004838 <pvPortMalloc+0x1bc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3301      	adds	r3, #1
 80047f0:	4a11      	ldr	r2, [pc, #68]	; (8004838 <pvPortMalloc+0x1bc>)
 80047f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80047f4:	f7fe fc64 	bl	80030c0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <pvPortMalloc+0x19c>
        __asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	60fb      	str	r3, [r7, #12]
    }
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <pvPortMalloc+0x19a>
    return pvReturn;
 8004818:	69fb      	ldr	r3, [r7, #28]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3728      	adds	r7, #40	; 0x28
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20012e74 	.word	0x20012e74
 8004828:	20012e88 	.word	0x20012e88
 800482c:	20012e78 	.word	0x20012e78
 8004830:	20012e6c 	.word	0x20012e6c
 8004834:	20012e7c 	.word	0x20012e7c
 8004838:	20012e80 	.word	0x20012e80

0800483c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d04d      	beq.n	80048ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800484e:	2308      	movs	r3, #8
 8004850:	425b      	negs	r3, r3
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4413      	add	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <vPortFree+0xb8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <vPortFree+0x44>
        __asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	60fb      	str	r3, [r7, #12]
    }
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <vPortFree+0x62>
        __asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	60bb      	str	r3, [r7, #8]
    }
 800489a:	bf00      	nop
 800489c:	e7fe      	b.n	800489c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <vPortFree+0xb8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01e      	beq.n	80048ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11a      	bne.n	80048ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <vPortFree+0xb8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	43db      	mvns	r3, r3
 80048be:	401a      	ands	r2, r3
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80048c4:	f7fe fbee 	bl	80030a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <vPortFree+0xbc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4413      	add	r3, r2
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <vPortFree+0xbc>)
 80048d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048d6:	6938      	ldr	r0, [r7, #16]
 80048d8:	f000 f874 	bl	80049c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80048dc:	4b07      	ldr	r3, [pc, #28]	; (80048fc <vPortFree+0xc0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3301      	adds	r3, #1
 80048e2:	4a06      	ldr	r2, [pc, #24]	; (80048fc <vPortFree+0xc0>)
 80048e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80048e6:	f7fe fbeb 	bl	80030c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80048ea:	bf00      	nop
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20012e88 	.word	0x20012e88
 80048f8:	20012e78 	.word	0x20012e78
 80048fc:	20012e84 	.word	0x20012e84

08004900 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004906:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800490a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800490c:	4b27      	ldr	r3, [pc, #156]	; (80049ac <prvHeapInit+0xac>)
 800490e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00c      	beq.n	8004934 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3307      	adds	r3, #7
 800491e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0307 	bic.w	r3, r3, #7
 8004926:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <prvHeapInit+0xac>)
 8004930:	4413      	add	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004938:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <prvHeapInit+0xb0>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800493e:	4b1c      	ldr	r3, [pc, #112]	; (80049b0 <prvHeapInit+0xb0>)
 8004940:	2200      	movs	r2, #0
 8004942:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	4413      	add	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800494c:	2208      	movs	r2, #8
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0307 	bic.w	r3, r3, #7
 800495a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <prvHeapInit+0xb4>)
 8004960:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004962:	4b14      	ldr	r3, [pc, #80]	; (80049b4 <prvHeapInit+0xb4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2200      	movs	r2, #0
 8004968:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <prvHeapInit+0xb4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	1ad2      	subs	r2, r2, r3
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <prvHeapInit+0xb4>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <prvHeapInit+0xb8>)
 800498e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4a09      	ldr	r2, [pc, #36]	; (80049bc <prvHeapInit+0xbc>)
 8004996:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004998:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <prvHeapInit+0xc0>)
 800499a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800499e:	601a      	str	r2, [r3, #0]
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	2000026c 	.word	0x2000026c
 80049b0:	20012e6c 	.word	0x20012e6c
 80049b4:	20012e74 	.word	0x20012e74
 80049b8:	20012e7c 	.word	0x20012e7c
 80049bc:	20012e78 	.word	0x20012e78
 80049c0:	20012e88 	.word	0x20012e88

080049c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049cc:	4b28      	ldr	r3, [pc, #160]	; (8004a70 <prvInsertBlockIntoFreeList+0xac>)
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e002      	b.n	80049d8 <prvInsertBlockIntoFreeList+0x14>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d8f7      	bhi.n	80049d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4413      	add	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d108      	bne.n	8004a06 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	441a      	add	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	441a      	add	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d118      	bne.n	8004a4c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <prvInsertBlockIntoFreeList+0xb0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d00d      	beq.n	8004a42 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e008      	b.n	8004a54 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a42:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <prvInsertBlockIntoFreeList+0xb0>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e003      	b.n	8004a54 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d002      	beq.n	8004a62 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20012e6c 	.word	0x20012e6c
 8004a74:	20012e74 	.word	0x20012e74

08004a78 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a7c:	4803      	ldr	r0, [pc, #12]	; (8004a8c <_cbSendSystemDesc+0x14>)
 8004a7e:	f001 faeb 	bl	8006058 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a82:	4803      	ldr	r0, [pc, #12]	; (8004a90 <_cbSendSystemDesc+0x18>)
 8004a84:	f001 fae8 	bl	8006058 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a88:	bf00      	nop
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	08007218 	.word	0x08007218
 8004a90:	0800725c 	.word	0x0800725c

08004a94 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a9e:	6819      	ldr	r1, [r3, #0]
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004aa2:	4a06      	ldr	r2, [pc, #24]	; (8004abc <SEGGER_SYSVIEW_Conf+0x28>)
 8004aa4:	f000 fe56 	bl	8005754 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004aa8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004aac:	f000 fe96 	bl	80057dc <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ab0:	bf00      	nop
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000000 	.word	0x20000000
 8004ab8:	08004a79 	.word	0x08004a79
 8004abc:	080072fc 	.word	0x080072fc

08004ac0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	e033      	b.n	8004b34 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004acc:	491e      	ldr	r1, [pc, #120]	; (8004b48 <_cbSendTaskList+0x88>)
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	491a      	ldr	r1, [pc, #104]	; (8004b48 <_cbSendTaskList+0x88>)
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	3304      	adds	r3, #4
 8004aec:	6819      	ldr	r1, [r3, #0]
 8004aee:	4c16      	ldr	r4, [pc, #88]	; (8004b48 <_cbSendTaskList+0x88>)
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4423      	add	r3, r4
 8004afc:	3308      	adds	r3, #8
 8004afe:	681c      	ldr	r4, [r3, #0]
 8004b00:	4d11      	ldr	r5, [pc, #68]	; (8004b48 <_cbSendTaskList+0x88>)
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	442b      	add	r3, r5
 8004b0e:	330c      	adds	r3, #12
 8004b10:	681d      	ldr	r5, [r3, #0]
 8004b12:	4e0d      	ldr	r6, [pc, #52]	; (8004b48 <_cbSendTaskList+0x88>)
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4433      	add	r3, r6
 8004b20:	3310      	adds	r3, #16
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	462b      	mov	r3, r5
 8004b28:	4622      	mov	r2, r4
 8004b2a:	f000 f8bd 	bl	8004ca8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3301      	adds	r3, #1
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <_cbSendTaskList+0x8c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d3c6      	bcc.n	8004acc <_cbSendTaskList+0xc>
  }
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b48:	20012e8c 	.word	0x20012e8c
 8004b4c:	20012f2c 	.word	0x20012f2c

08004b50 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b58:	f7fe fb62 	bl	8003220 <xTaskGetTickCountFromISR>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2200      	movs	r2, #0
 8004b60:	469a      	mov	sl, r3
 8004b62:	4693      	mov	fp, r2
 8004b64:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	f04f 0a00 	mov.w	sl, #0
 8004b74:	f04f 0b00 	mov.w	fp, #0
 8004b78:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004b7c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004b80:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004b84:	4652      	mov	r2, sl
 8004b86:	465b      	mov	r3, fp
 8004b88:	1a14      	subs	r4, r2, r0
 8004b8a:	eb63 0501 	sbc.w	r5, r3, r1
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	00ab      	lsls	r3, r5, #2
 8004b98:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004b9c:	00a2      	lsls	r2, r4, #2
 8004b9e:	4614      	mov	r4, r2
 8004ba0:	461d      	mov	r5, r3
 8004ba2:	eb14 0800 	adds.w	r8, r4, r0
 8004ba6:	eb45 0901 	adc.w	r9, r5, r1
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bbe:	4690      	mov	r8, r2
 8004bc0:	4699      	mov	r9, r3
 8004bc2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004bd8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004be6:	2205      	movs	r2, #5
 8004be8:	492b      	ldr	r1, [pc, #172]	; (8004c98 <SYSVIEW_AddTask+0xc0>)
 8004bea:	68b8      	ldr	r0, [r7, #8]
 8004bec:	f001 fdca 	bl	8006784 <memcmp>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d04b      	beq.n	8004c8e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004bf6:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b07      	cmp	r3, #7
 8004bfc:	d903      	bls.n	8004c06 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004bfe:	4828      	ldr	r0, [pc, #160]	; (8004ca0 <SYSVIEW_AddTask+0xc8>)
 8004c00:	f001 fd28 	bl	8006654 <SEGGER_SYSVIEW_Warn>
    return;
 8004c04:	e044      	b.n	8004c90 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c06:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4926      	ldr	r1, [pc, #152]	; (8004ca4 <SYSVIEW_AddTask+0xcc>)
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c1a:	4b20      	ldr	r3, [pc, #128]	; (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4921      	ldr	r1, [pc, #132]	; (8004ca4 <SYSVIEW_AddTask+0xcc>)
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004c30:	4b1a      	ldr	r3, [pc, #104]	; (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	491b      	ldr	r1, [pc, #108]	; (8004ca4 <SYSVIEW_AddTask+0xcc>)
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	3308      	adds	r3, #8
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4916      	ldr	r1, [pc, #88]	; (8004ca4 <SYSVIEW_AddTask+0xcc>)
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	330c      	adds	r3, #12
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4910      	ldr	r1, [pc, #64]	; (8004ca4 <SYSVIEW_AddTask+0xcc>)
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3310      	adds	r3, #16
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c72:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3301      	adds	r3, #1
 8004c78:	4a08      	ldr	r2, [pc, #32]	; (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c7a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 f80e 	bl	8004ca8 <SYSVIEW_SendTaskInfo>
 8004c8c:	e000      	b.n	8004c90 <SYSVIEW_AddTask+0xb8>
    return;
 8004c8e:	bf00      	nop

}
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	0800726c 	.word	0x0800726c
 8004c9c:	20012f2c 	.word	0x20012f2c
 8004ca0:	08007274 	.word	0x08007274
 8004ca4:	20012e8c 	.word	0x20012e8c

08004ca8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004cb6:	f107 0314 	add.w	r3, r7, #20
 8004cba:	2214      	movs	r2, #20
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 fd7e 	bl	80067c0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 f8c3 	bl	8005e68 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ce2:	bf00      	nop
 8004ce4:	3728      	adds	r7, #40	; 0x28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004cf2:	4b24      	ldr	r3, [pc, #144]	; (8004d84 <_DoInit+0x98>)
 8004cf4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2203      	movs	r2, #3
 8004d00:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a20      	ldr	r2, [pc, #128]	; (8004d88 <_DoInit+0x9c>)
 8004d06:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a20      	ldr	r2, [pc, #128]	; (8004d8c <_DoInit+0xa0>)
 8004d0c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d14:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <_DoInit+0x9c>)
 8004d2c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <_DoInit+0xa4>)
 8004d32:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2210      	movs	r2, #16
 8004d38:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3307      	adds	r3, #7
 8004d50:	4a10      	ldr	r2, [pc, #64]	; (8004d94 <_DoInit+0xa8>)
 8004d52:	6810      	ldr	r0, [r2, #0]
 8004d54:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d56:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a0e      	ldr	r2, [pc, #56]	; (8004d98 <_DoInit+0xac>)
 8004d5e:	6810      	ldr	r0, [r2, #0]
 8004d60:	6018      	str	r0, [r3, #0]
 8004d62:	8891      	ldrh	r1, [r2, #4]
 8004d64:	7992      	ldrb	r2, [r2, #6]
 8004d66:	8099      	strh	r1, [r3, #4]
 8004d68:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d6a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d74:	f3bf 8f5f 	dmb	sy
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	20012f30 	.word	0x20012f30
 8004d88:	080072c4 	.word	0x080072c4
 8004d8c:	20012fd8 	.word	0x20012fd8
 8004d90:	200133d8 	.word	0x200133d8
 8004d94:	080072d0 	.word	0x080072d0
 8004d98:	080072d4 	.word	0x080072d4

08004d9c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	; 0x28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004da8:	2300      	movs	r3, #0
 8004daa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d905      	bls.n	8004dcc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dca:	e007      	b.n	8004ddc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	69b9      	ldr	r1, [r7, #24]
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	1acb      	subs	r3, r1, r3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de6:	4293      	cmp	r3, r2
 8004de8:	bf28      	it	cs
 8004dea:	4613      	movcs	r3, r2
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4293      	cmp	r3, r2
 8004df4:	bf28      	it	cs
 8004df6:	4613      	movcs	r3, r2
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	6978      	ldr	r0, [r7, #20]
 8004e0a:	f001 fccb 	bl	80067a4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004e0e:	6a3a      	ldr	r2, [r7, #32]
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	4413      	add	r3, r2
 8004e14:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	4413      	add	r3, r2
 8004e1c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	4413      	add	r3, r2
 8004e2c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d101      	bne.n	8004e3c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e3c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1b2      	bne.n	8004db2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3728      	adds	r7, #40	; 0x28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b088      	sub	sp, #32
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d911      	bls.n	8004e9e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	4413      	add	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	6938      	ldr	r0, [r7, #16]
 8004e8a:	f001 fc8b 	bl	80067a4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e8e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	441a      	add	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004e9c:	e01f      	b.n	8004ede <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	6938      	ldr	r0, [r7, #16]
 8004eb2:	f001 fc77 	bl	80067a4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	4413      	add	r3, r2
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6938      	ldr	r0, [r7, #16]
 8004ed0:	f001 fc68 	bl	80067a4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ed4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	60da      	str	r2, [r3, #12]
}
 8004ede:	bf00      	nop
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004ee6:	b480      	push	{r7}
 8004ee8:	b087      	sub	sp, #28
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d808      	bhi.n	8004f14 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad2      	subs	r2, r2, r3
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	e004      	b.n	8004f1e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004f1e:	697b      	ldr	r3, [r7, #20]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08c      	sub	sp, #48	; 0x30
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004f38:	4b3e      	ldr	r3, [pc, #248]	; (8005034 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f3a:	623b      	str	r3, [r7, #32]
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <SEGGER_RTT_ReadNoLock+0x1e>
 8004f46:	f7ff fed1 	bl	8004cec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4413      	add	r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	3360      	adds	r3, #96	; 0x60
 8004f56:	4a37      	ldr	r2, [pc, #220]	; (8005034 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f58:	4413      	add	r3, r2
 8004f5a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d92b      	bls.n	8004fd0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4293      	cmp	r3, r2
 8004f88:	bf28      	it	cs
 8004f8a:	4613      	movcs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	4413      	add	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	6939      	ldr	r1, [r7, #16]
 8004f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f9e:	f001 fc01 	bl	80067a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	4413      	add	r3, r2
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d101      	bne.n	8004fd0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	bf28      	it	cs
 8004fe0:	4613      	movcs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d019      	beq.n	800501e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	4413      	add	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	6939      	ldr	r1, [r7, #16]
 8004ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ffa:	f001 fbd3 	bl	80067a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4413      	add	r3, r2
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4413      	add	r3, r2
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005028:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800502c:	4618      	mov	r0, r3
 800502e:	3730      	adds	r7, #48	; 0x30
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20012f30 	.word	0x20012f30

08005038 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	4613      	mov	r3, r2
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	4413      	add	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005056:	4413      	add	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d029      	beq.n	80050b6 <SEGGER_RTT_WriteNoLock+0x7e>
 8005062:	2b02      	cmp	r3, #2
 8005064:	d82e      	bhi.n	80050c4 <SEGGER_RTT_WriteNoLock+0x8c>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <SEGGER_RTT_WriteNoLock+0x38>
 800506a:	2b01      	cmp	r3, #1
 800506c:	d013      	beq.n	8005096 <SEGGER_RTT_WriteNoLock+0x5e>
 800506e:	e029      	b.n	80050c4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005070:	6978      	ldr	r0, [r7, #20]
 8005072:	f7ff ff38 	bl	8004ee6 <_GetAvailWriteSpace>
 8005076:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d202      	bcs.n	8005086 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005080:	2300      	movs	r3, #0
 8005082:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005084:	e021      	b.n	80050ca <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	69b9      	ldr	r1, [r7, #24]
 800508e:	6978      	ldr	r0, [r7, #20]
 8005090:	f7ff fee1 	bl	8004e56 <_WriteNoCheck>
    break;
 8005094:	e019      	b.n	80050ca <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005096:	6978      	ldr	r0, [r7, #20]
 8005098:	f7ff ff25 	bl	8004ee6 <_GetAvailWriteSpace>
 800509c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4293      	cmp	r3, r2
 80050a4:	bf28      	it	cs
 80050a6:	4613      	movcs	r3, r2
 80050a8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80050aa:	69fa      	ldr	r2, [r7, #28]
 80050ac:	69b9      	ldr	r1, [r7, #24]
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7ff fed1 	bl	8004e56 <_WriteNoCheck>
    break;
 80050b4:	e009      	b.n	80050ca <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	69b9      	ldr	r1, [r7, #24]
 80050ba:	6978      	ldr	r0, [r7, #20]
 80050bc:	f7ff fe6e 	bl	8004d9c <_WriteBlocking>
 80050c0:	61f8      	str	r0, [r7, #28]
    break;
 80050c2:	e002      	b.n	80050ca <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
    break;
 80050c8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80050ca:	69fb      	ldr	r3, [r7, #28]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20012f30 	.word	0x20012f30

080050d8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80050e4:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <SEGGER_RTT_Write+0x48>)
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <SEGGER_RTT_Write+0x1e>
 80050f2:	f7ff fdfb 	bl	8004cec <_DoInit>
  SEGGER_RTT_LOCK();
 80050f6:	f3ef 8311 	mrs	r3, BASEPRI
 80050fa:	f04f 0120 	mov.w	r1, #32
 80050fe:	f381 8811 	msr	BASEPRI, r1
 8005102:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff ff95 	bl	8005038 <SEGGER_RTT_WriteNoLock>
 800510e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005116:	697b      	ldr	r3, [r7, #20]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20012f30 	.word	0x20012f30

08005124 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005132:	4b3d      	ldr	r3, [pc, #244]	; (8005228 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005140:	f7ff fdd4 	bl	8004cec <_DoInit>
  SEGGER_RTT_LOCK();
 8005144:	f3ef 8311 	mrs	r3, BASEPRI
 8005148:	f04f 0120 	mov.w	r1, #32
 800514c:	f381 8811 	msr	BASEPRI, r1
 8005150:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005152:	4b35      	ldr	r3, [pc, #212]	; (8005228 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005154:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800515a:	6939      	ldr	r1, [r7, #16]
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	4613      	mov	r3, r2
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	4413      	add	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	440b      	add	r3, r1
 800516a:	3304      	adds	r3, #4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	3301      	adds	r3, #1
 8005176:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	429a      	cmp	r2, r3
 8005180:	dbeb      	blt.n	800515a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005182:	e000      	b.n	8005186 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005184:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	429a      	cmp	r2, r3
 800518e:	da3f      	bge.n	8005210 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005190:	6939      	ldr	r1, [r7, #16]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	440b      	add	r3, r1
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80051a4:	6939      	ldr	r1, [r7, #16]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	4613      	mov	r3, r2
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	4413      	add	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	440b      	add	r3, r1
 80051b4:	3304      	adds	r3, #4
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80051ba:	6939      	ldr	r1, [r7, #16]
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	4613      	mov	r3, r2
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	4413      	add	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	440b      	add	r3, r1
 80051c8:	3320      	adds	r3, #32
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80051ce:	6939      	ldr	r1, [r7, #16]
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	4613      	mov	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	440b      	add	r3, r1
 80051dc:	3328      	adds	r3, #40	; 0x28
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80051e2:	6939      	ldr	r1, [r7, #16]
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	440b      	add	r3, r1
 80051f0:	3324      	adds	r3, #36	; 0x24
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80051f6:	6939      	ldr	r1, [r7, #16]
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	4613      	mov	r3, r2
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	4413      	add	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	440b      	add	r3, r1
 8005204:	332c      	adds	r3, #44	; 0x2c
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800520a:	f3bf 8f5f 	dmb	sy
 800520e:	e002      	b.n	8005216 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005210:	f04f 33ff 	mov.w	r3, #4294967295
 8005214:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800521c:	69fb      	ldr	r3, [r7, #28]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20012f30 	.word	0x20012f30

0800522c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800523a:	4b33      	ldr	r3, [pc, #204]	; (8005308 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005248:	f7ff fd50 	bl	8004cec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800524c:	4b2e      	ldr	r3, [pc, #184]	; (8005308 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800524e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	461a      	mov	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4293      	cmp	r3, r2
 800525a:	d24d      	bcs.n	80052f8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800525c:	f3ef 8311 	mrs	r3, BASEPRI
 8005260:	f04f 0120 	mov.w	r1, #32
 8005264:	f381 8811 	msr	BASEPRI, r1
 8005268:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d031      	beq.n	80052d4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005270:	6979      	ldr	r1, [r7, #20]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4613      	mov	r3, r2
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	440b      	add	r3, r1
 800527e:	3360      	adds	r3, #96	; 0x60
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005284:	6979      	ldr	r1, [r7, #20]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4613      	mov	r3, r2
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	4413      	add	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	440b      	add	r3, r1
 8005292:	3364      	adds	r3, #100	; 0x64
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005298:	6979      	ldr	r1, [r7, #20]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4613      	mov	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	440b      	add	r3, r1
 80052a6:	3368      	adds	r3, #104	; 0x68
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80052ac:	6979      	ldr	r1, [r7, #20]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	440b      	add	r3, r1
 80052ba:	3370      	adds	r3, #112	; 0x70
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80052c0:	6979      	ldr	r1, [r7, #20]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4613      	mov	r3, r2
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4413      	add	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	440b      	add	r3, r1
 80052ce:	336c      	adds	r3, #108	; 0x6c
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80052d4:	6979      	ldr	r1, [r7, #20]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4613      	mov	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	440b      	add	r3, r1
 80052e2:	3374      	adds	r3, #116	; 0x74
 80052e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052e8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	e002      	b.n	80052fe <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295
 80052fc:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80052fe:	69fb      	ldr	r3, [r7, #28]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3720      	adds	r7, #32
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20012f30 	.word	0x20012f30

0800530c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800531c:	e002      	b.n	8005324 <_EncodeStr+0x18>
    Len++;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	3301      	adds	r3, #1
 8005322:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4413      	add	r3, r2
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f6      	bne.n	800531e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	d901      	bls.n	800533c <_EncodeStr+0x30>
    Len = Limit;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2bfe      	cmp	r3, #254	; 0xfe
 8005340:	d806      	bhi.n	8005350 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	60fa      	str	r2, [r7, #12]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	e011      	b.n	8005374 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	60fa      	str	r2, [r7, #12]
 8005356:	22ff      	movs	r2, #255	; 0xff
 8005358:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	60fa      	str	r2, [r7, #12]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	0a19      	lsrs	r1, r3, #8
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	60fa      	str	r2, [r7, #12]
 8005370:	b2ca      	uxtb	r2, r1
 8005372:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005378:	e00a      	b.n	8005390 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	1c53      	adds	r3, r2, #1
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	1c59      	adds	r1, r3, #1
 8005384:	60f9      	str	r1, [r7, #12]
 8005386:	7812      	ldrb	r2, [r2, #0]
 8005388:	701a      	strb	r2, [r3, #0]
    n++;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	3301      	adds	r3, #1
 800538e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	429a      	cmp	r2, r3
 8005396:	d3f0      	bcc.n	800537a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005398:	68fb      	ldr	r3, [r7, #12]
}
 800539a:	4618      	mov	r0, r3
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3304      	adds	r3, #4
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053c6:	4b36      	ldr	r3, [pc, #216]	; (80054a0 <_HandleIncomingPacket+0xe0>)
 80053c8:	7e1b      	ldrb	r3, [r3, #24]
 80053ca:	4618      	mov	r0, r3
 80053cc:	1cfb      	adds	r3, r7, #3
 80053ce:	2201      	movs	r2, #1
 80053d0:	4619      	mov	r1, r3
 80053d2:	f7ff fdab 	bl	8004f2c <SEGGER_RTT_ReadNoLock>
 80053d6:	4603      	mov	r3, r0
 80053d8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	dd54      	ble.n	800548a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d032      	beq.n	800544c <_HandleIncomingPacket+0x8c>
 80053e6:	2b80      	cmp	r3, #128	; 0x80
 80053e8:	dc42      	bgt.n	8005470 <_HandleIncomingPacket+0xb0>
 80053ea:	2b07      	cmp	r3, #7
 80053ec:	dc16      	bgt.n	800541c <_HandleIncomingPacket+0x5c>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	dd3e      	ble.n	8005470 <_HandleIncomingPacket+0xb0>
 80053f2:	3b01      	subs	r3, #1
 80053f4:	2b06      	cmp	r3, #6
 80053f6:	d83b      	bhi.n	8005470 <_HandleIncomingPacket+0xb0>
 80053f8:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <_HandleIncomingPacket+0x40>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	08005423 	.word	0x08005423
 8005404:	08005429 	.word	0x08005429
 8005408:	0800542f 	.word	0x0800542f
 800540c:	08005435 	.word	0x08005435
 8005410:	0800543b 	.word	0x0800543b
 8005414:	08005441 	.word	0x08005441
 8005418:	08005447 	.word	0x08005447
 800541c:	2b7f      	cmp	r3, #127	; 0x7f
 800541e:	d036      	beq.n	800548e <_HandleIncomingPacket+0xce>
 8005420:	e026      	b.n	8005470 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005422:	f000 fba7 	bl	8005b74 <SEGGER_SYSVIEW_Start>
      break;
 8005426:	e037      	b.n	8005498 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005428:	f000 fc5e 	bl	8005ce8 <SEGGER_SYSVIEW_Stop>
      break;
 800542c:	e034      	b.n	8005498 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800542e:	f000 fe37 	bl	80060a0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005432:	e031      	b.n	8005498 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005434:	f000 fdfc 	bl	8006030 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005438:	e02e      	b.n	8005498 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800543a:	f000 fc7b 	bl	8005d34 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800543e:	e02b      	b.n	8005498 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005440:	f001 f8ca 	bl	80065d8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005444:	e028      	b.n	8005498 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005446:	f001 f8a9 	bl	800659c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800544a:	e025      	b.n	8005498 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800544c:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <_HandleIncomingPacket+0xe0>)
 800544e:	7e1b      	ldrb	r3, [r3, #24]
 8005450:	4618      	mov	r0, r3
 8005452:	1cfb      	adds	r3, r7, #3
 8005454:	2201      	movs	r2, #1
 8005456:	4619      	mov	r1, r3
 8005458:	f7ff fd68 	bl	8004f2c <SEGGER_RTT_ReadNoLock>
 800545c:	4603      	mov	r3, r0
 800545e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	dd15      	ble.n	8005492 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	4618      	mov	r0, r3
 800546a:	f001 f817 	bl	800649c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800546e:	e010      	b.n	8005492 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	b25b      	sxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	da0e      	bge.n	8005496 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <_HandleIncomingPacket+0xe0>)
 800547a:	7e1b      	ldrb	r3, [r3, #24]
 800547c:	4618      	mov	r0, r3
 800547e:	1cfb      	adds	r3, r7, #3
 8005480:	2201      	movs	r2, #1
 8005482:	4619      	mov	r1, r3
 8005484:	f7ff fd52 	bl	8004f2c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005488:	e005      	b.n	8005496 <_HandleIncomingPacket+0xd6>
    }
  }
 800548a:	bf00      	nop
 800548c:	e004      	b.n	8005498 <_HandleIncomingPacket+0xd8>
      break;
 800548e:	bf00      	nop
 8005490:	e002      	b.n	8005498 <_HandleIncomingPacket+0xd8>
      break;
 8005492:	bf00      	nop
 8005494:	e000      	b.n	8005498 <_HandleIncomingPacket+0xd8>
      break;
 8005496:	bf00      	nop
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	200143f0 	.word	0x200143f0

080054a4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08c      	sub	sp, #48	; 0x30
 80054a8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80054aa:	2301      	movs	r3, #1
 80054ac:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80054ae:	1d3b      	adds	r3, r7, #4
 80054b0:	3301      	adds	r3, #1
 80054b2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b8:	4b31      	ldr	r3, [pc, #196]	; (8005580 <_TrySendOverflowPacket+0xdc>)
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054be:	e00b      	b.n	80054d8 <_TrySendOverflowPacket+0x34>
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	1c59      	adds	r1, r3, #1
 80054c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	09db      	lsrs	r3, r3, #7
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	2b7f      	cmp	r3, #127	; 0x7f
 80054dc:	d8f0      	bhi.n	80054c0 <_TrySendOverflowPacket+0x1c>
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054ee:	4b25      	ldr	r3, [pc, #148]	; (8005584 <_TrySendOverflowPacket+0xe0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054f4:	4b22      	ldr	r3, [pc, #136]	; (8005580 <_TrySendOverflowPacket+0xdc>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	623b      	str	r3, [r7, #32]
 8005506:	e00b      	b.n	8005520 <_TrySendOverflowPacket+0x7c>
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	b2da      	uxtb	r2, r3
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	1c59      	adds	r1, r3, #1
 8005510:	6279      	str	r1, [r7, #36]	; 0x24
 8005512:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	09db      	lsrs	r3, r3, #7
 800551e:	623b      	str	r3, [r7, #32]
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	2b7f      	cmp	r3, #127	; 0x7f
 8005524:	d8f0      	bhi.n	8005508 <_TrySendOverflowPacket+0x64>
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	627a      	str	r2, [r7, #36]	; 0x24
 800552c:	6a3a      	ldr	r2, [r7, #32]
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005536:	4b12      	ldr	r3, [pc, #72]	; (8005580 <_TrySendOverflowPacket+0xdc>)
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	4618      	mov	r0, r3
 800553c:	1d3b      	adds	r3, r7, #4
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	461a      	mov	r2, r3
 8005544:	1d3b      	adds	r3, r7, #4
 8005546:	4619      	mov	r1, r3
 8005548:	f7fa fe4a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800554c:	4603      	mov	r3, r0
 800554e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d009      	beq.n	800556a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005556:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <_TrySendOverflowPacket+0xdc>)
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800555c:	4b08      	ldr	r3, [pc, #32]	; (8005580 <_TrySendOverflowPacket+0xdc>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	3b01      	subs	r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	4b06      	ldr	r3, [pc, #24]	; (8005580 <_TrySendOverflowPacket+0xdc>)
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e004      	b.n	8005574 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <_TrySendOverflowPacket+0xdc>)
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	3301      	adds	r3, #1
 8005570:	4a03      	ldr	r2, [pc, #12]	; (8005580 <_TrySendOverflowPacket+0xdc>)
 8005572:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005574:	693b      	ldr	r3, [r7, #16]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3730      	adds	r7, #48	; 0x30
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	200143f0 	.word	0x200143f0
 8005584:	e0001004 	.word	0xe0001004

08005588 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	; 0x28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005594:	4b6c      	ldr	r3, [pc, #432]	; (8005748 <_SendPacket+0x1c0>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d010      	beq.n	80055be <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800559c:	4b6a      	ldr	r3, [pc, #424]	; (8005748 <_SendPacket+0x1c0>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80a3 	beq.w	80056ec <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80055a6:	4b68      	ldr	r3, [pc, #416]	; (8005748 <_SendPacket+0x1c0>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d109      	bne.n	80055c2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80055ae:	f7ff ff79 	bl	80054a4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80055b2:	4b65      	ldr	r3, [pc, #404]	; (8005748 <_SendPacket+0x1c0>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	f040 809a 	bne.w	80056f0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80055bc:	e001      	b.n	80055c2 <_SendPacket+0x3a>
    goto Send;
 80055be:	bf00      	nop
 80055c0:	e000      	b.n	80055c4 <_SendPacket+0x3c>
Send:
 80055c2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b1f      	cmp	r3, #31
 80055c8:	d809      	bhi.n	80055de <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80055ca:	4b5f      	ldr	r3, [pc, #380]	; (8005748 <_SendPacket+0x1c0>)
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f040 808b 	bne.w	80056f4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b17      	cmp	r3, #23
 80055e2:	d807      	bhi.n	80055f4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	e03d      	b.n	8005670 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005600:	d912      	bls.n	8005628 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	09da      	lsrs	r2, r3, #7
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3b01      	subs	r3, #1
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	b2db      	uxtb	r3, r3
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	3a01      	subs	r2, #1
 800561a:	60fa      	str	r2, [r7, #12]
 800561c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e006      	b.n	8005636 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3b01      	subs	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	b2da      	uxtb	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b7f      	cmp	r3, #127	; 0x7f
 800563a:	d912      	bls.n	8005662 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	09da      	lsrs	r2, r3, #7
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3b01      	subs	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	3a01      	subs	r2, #1
 8005654:	60fa      	str	r2, [r7, #12]
 8005656:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800565a:	b2da      	uxtb	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	e006      	b.n	8005670 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3b01      	subs	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005670:	4b36      	ldr	r3, [pc, #216]	; (800574c <_SendPacket+0x1c4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005676:	4b34      	ldr	r3, [pc, #208]	; (8005748 <_SendPacket+0x1c0>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	623b      	str	r3, [r7, #32]
 8005688:	e00b      	b.n	80056a2 <_SendPacket+0x11a>
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	1c59      	adds	r1, r3, #1
 8005692:	6279      	str	r1, [r7, #36]	; 0x24
 8005694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	09db      	lsrs	r3, r3, #7
 80056a0:	623b      	str	r3, [r7, #32]
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	2b7f      	cmp	r3, #127	; 0x7f
 80056a6:	d8f0      	bhi.n	800568a <_SendPacket+0x102>
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	627a      	str	r2, [r7, #36]	; 0x24
 80056ae:	6a3a      	ldr	r2, [r7, #32]
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80056b8:	4b23      	ldr	r3, [pc, #140]	; (8005748 <_SendPacket+0x1c0>)
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	4618      	mov	r0, r3
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	f7fa fd8a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056cc:	4603      	mov	r3, r0
 80056ce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80056d6:	4a1c      	ldr	r2, [pc, #112]	; (8005748 <_SendPacket+0x1c0>)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	60d3      	str	r3, [r2, #12]
 80056dc:	e00b      	b.n	80056f6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80056de:	4b1a      	ldr	r3, [pc, #104]	; (8005748 <_SendPacket+0x1c0>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	3301      	adds	r3, #1
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <_SendPacket+0x1c0>)
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	e004      	b.n	80056f6 <_SendPacket+0x16e>
    goto SendDone;
 80056ec:	bf00      	nop
 80056ee:	e002      	b.n	80056f6 <_SendPacket+0x16e>
      goto SendDone;
 80056f0:	bf00      	nop
 80056f2:	e000      	b.n	80056f6 <_SendPacket+0x16e>
      goto SendDone;
 80056f4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80056f6:	4b14      	ldr	r3, [pc, #80]	; (8005748 <_SendPacket+0x1c0>)
 80056f8:	7e1b      	ldrb	r3, [r3, #24]
 80056fa:	4619      	mov	r1, r3
 80056fc:	4a14      	ldr	r2, [pc, #80]	; (8005750 <_SendPacket+0x1c8>)
 80056fe:	460b      	mov	r3, r1
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	440b      	add	r3, r1
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4413      	add	r3, r2
 8005708:	336c      	adds	r3, #108	; 0x6c
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <_SendPacket+0x1c0>)
 800570e:	7e1b      	ldrb	r3, [r3, #24]
 8005710:	4618      	mov	r0, r3
 8005712:	490f      	ldr	r1, [pc, #60]	; (8005750 <_SendPacket+0x1c8>)
 8005714:	4603      	mov	r3, r0
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	4403      	add	r3, r0
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	440b      	add	r3, r1
 800571e:	3370      	adds	r3, #112	; 0x70
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d00b      	beq.n	800573e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005726:	4b08      	ldr	r3, [pc, #32]	; (8005748 <_SendPacket+0x1c0>)
 8005728:	789b      	ldrb	r3, [r3, #2]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d107      	bne.n	800573e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800572e:	4b06      	ldr	r3, [pc, #24]	; (8005748 <_SendPacket+0x1c0>)
 8005730:	2201      	movs	r2, #1
 8005732:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005734:	f7ff fe44 	bl	80053c0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005738:	4b03      	ldr	r3, [pc, #12]	; (8005748 <_SendPacket+0x1c0>)
 800573a:	2200      	movs	r2, #0
 800573c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800573e:	bf00      	nop
 8005740:	3728      	adds	r7, #40	; 0x28
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	200143f0 	.word	0x200143f0
 800574c:	e0001004 	.word	0xe0001004
 8005750:	20012f30 	.word	0x20012f30

08005754 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005762:	2300      	movs	r3, #0
 8005764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005768:	4917      	ldr	r1, [pc, #92]	; (80057c8 <SEGGER_SYSVIEW_Init+0x74>)
 800576a:	4818      	ldr	r0, [pc, #96]	; (80057cc <SEGGER_SYSVIEW_Init+0x78>)
 800576c:	f7ff fcda 	bl	8005124 <SEGGER_RTT_AllocUpBuffer>
 8005770:	4603      	mov	r3, r0
 8005772:	b2da      	uxtb	r2, r3
 8005774:	4b16      	ldr	r3, [pc, #88]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005776:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005778:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 800577a:	785a      	ldrb	r2, [r3, #1]
 800577c:	4b14      	ldr	r3, [pc, #80]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 800577e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005780:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005782:	7e1b      	ldrb	r3, [r3, #24]
 8005784:	4618      	mov	r0, r3
 8005786:	2300      	movs	r3, #0
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	2308      	movs	r3, #8
 800578c:	4a11      	ldr	r2, [pc, #68]	; (80057d4 <SEGGER_SYSVIEW_Init+0x80>)
 800578e:	490f      	ldr	r1, [pc, #60]	; (80057cc <SEGGER_SYSVIEW_Init+0x78>)
 8005790:	f7ff fd4c 	bl	800522c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005794:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005796:	2200      	movs	r2, #0
 8005798:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800579a:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <SEGGER_SYSVIEW_Init+0x84>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80057a0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80057a2:	4a0b      	ldr	r2, [pc, #44]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80057a8:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80057ae:	4a08      	ldr	r2, [pc, #32]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80057b4:	4a06      	ldr	r2, [pc, #24]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80057ba:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	200133e8 	.word	0x200133e8
 80057cc:	080072dc 	.word	0x080072dc
 80057d0:	200143f0 	.word	0x200143f0
 80057d4:	200143e8 	.word	0x200143e8
 80057d8:	e0001004 	.word	0xe0001004

080057dc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80057e4:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6113      	str	r3, [r2, #16]
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	200143f0 	.word	0x200143f0

080057fc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005804:	f3ef 8311 	mrs	r3, BASEPRI
 8005808:	f04f 0120 	mov.w	r1, #32
 800580c:	f381 8811 	msr	BASEPRI, r1
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	4808      	ldr	r0, [pc, #32]	; (8005834 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005814:	f7ff fdc7 	bl	80053a6 <_PreparePacket>
 8005818:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	68b8      	ldr	r0, [r7, #8]
 8005820:	f7ff feb2 	bl	8005588 <_SendPacket>
  RECORD_END();
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f383 8811 	msr	BASEPRI, r3
}
 800582a:	bf00      	nop
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20014420 	.word	0x20014420

08005838 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005842:	f3ef 8311 	mrs	r3, BASEPRI
 8005846:	f04f 0120 	mov.w	r1, #32
 800584a:	f381 8811 	msr	BASEPRI, r1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	4816      	ldr	r0, [pc, #88]	; (80058ac <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005852:	f7ff fda8 	bl	80053a6 <_PreparePacket>
 8005856:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	61bb      	str	r3, [r7, #24]
 8005864:	e00b      	b.n	800587e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	1c59      	adds	r1, r3, #1
 800586e:	61f9      	str	r1, [r7, #28]
 8005870:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	09db      	lsrs	r3, r3, #7
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b7f      	cmp	r3, #127	; 0x7f
 8005882:	d8f0      	bhi.n	8005866 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	61fa      	str	r2, [r7, #28]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	6938      	ldr	r0, [r7, #16]
 800589a:	f7ff fe75 	bl	8005588 <_SendPacket>
  RECORD_END();
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f383 8811 	msr	BASEPRI, r3
}
 80058a4:	bf00      	nop
 80058a6:	3720      	adds	r7, #32
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20014420 	.word	0x20014420

080058b0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08c      	sub	sp, #48	; 0x30
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80058bc:	f3ef 8311 	mrs	r3, BASEPRI
 80058c0:	f04f 0120 	mov.w	r1, #32
 80058c4:	f381 8811 	msr	BASEPRI, r1
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	4825      	ldr	r0, [pc, #148]	; (8005960 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80058cc:	f7ff fd6b 	bl	80053a6 <_PreparePacket>
 80058d0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058de:	e00b      	b.n	80058f8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e6:	1c59      	adds	r1, r3, #1
 80058e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	09db      	lsrs	r3, r3, #7
 80058f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	2b7f      	cmp	r3, #127	; 0x7f
 80058fc:	d8f0      	bhi.n	80058e0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	623b      	str	r3, [r7, #32]
 8005916:	e00b      	b.n	8005930 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	b2da      	uxtb	r2, r3
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	1c59      	adds	r1, r3, #1
 8005920:	6279      	str	r1, [r7, #36]	; 0x24
 8005922:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	09db      	lsrs	r3, r3, #7
 800592e:	623b      	str	r3, [r7, #32]
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	2b7f      	cmp	r3, #127	; 0x7f
 8005934:	d8f0      	bhi.n	8005918 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	627a      	str	r2, [r7, #36]	; 0x24
 800593c:	6a3a      	ldr	r2, [r7, #32]
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	6979      	ldr	r1, [r7, #20]
 800594a:	69b8      	ldr	r0, [r7, #24]
 800594c:	f7ff fe1c 	bl	8005588 <_SendPacket>
  RECORD_END();
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f383 8811 	msr	BASEPRI, r3
}
 8005956:	bf00      	nop
 8005958:	3730      	adds	r7, #48	; 0x30
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20014420 	.word	0x20014420

08005964 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b08e      	sub	sp, #56	; 0x38
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005972:	f3ef 8311 	mrs	r3, BASEPRI
 8005976:	f04f 0120 	mov.w	r1, #32
 800597a:	f381 8811 	msr	BASEPRI, r1
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	4832      	ldr	r0, [pc, #200]	; (8005a4c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005982:	f7ff fd10 	bl	80053a6 <_PreparePacket>
 8005986:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	633b      	str	r3, [r7, #48]	; 0x30
 8005994:	e00b      	b.n	80059ae <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	b2da      	uxtb	r2, r3
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	1c59      	adds	r1, r3, #1
 800599e:	6379      	str	r1, [r7, #52]	; 0x34
 80059a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	09db      	lsrs	r3, r3, #7
 80059ac:	633b      	str	r3, [r7, #48]	; 0x30
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	2b7f      	cmp	r3, #127	; 0x7f
 80059b2:	d8f0      	bhi.n	8005996 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80059b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	637a      	str	r2, [r7, #52]	; 0x34
 80059ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80059cc:	e00b      	b.n	80059e6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	1c59      	adds	r1, r3, #1
 80059d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	09db      	lsrs	r3, r3, #7
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	2b7f      	cmp	r3, #127	; 0x7f
 80059ea:	d8f0      	bhi.n	80059ce <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	e00b      	b.n	8005a1e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	1c59      	adds	r1, r3, #1
 8005a0e:	6279      	str	r1, [r7, #36]	; 0x24
 8005a10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	09db      	lsrs	r3, r3, #7
 8005a1c:	623b      	str	r3, [r7, #32]
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	2b7f      	cmp	r3, #127	; 0x7f
 8005a22:	d8f0      	bhi.n	8005a06 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	627a      	str	r2, [r7, #36]	; 0x24
 8005a2a:	6a3a      	ldr	r2, [r7, #32]
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	69b8      	ldr	r0, [r7, #24]
 8005a3a:	f7ff fda5 	bl	8005588 <_SendPacket>
  RECORD_END();
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	f383 8811 	msr	BASEPRI, r3
}
 8005a44:	bf00      	nop
 8005a46:	3738      	adds	r7, #56	; 0x38
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20014420 	.word	0x20014420

08005a50 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b090      	sub	sp, #64	; 0x40
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a62:	f04f 0120 	mov.w	r1, #32
 8005a66:	f381 8811 	msr	BASEPRI, r1
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	4840      	ldr	r0, [pc, #256]	; (8005b70 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005a6e:	f7ff fc9a 	bl	80053a6 <_PreparePacket>
 8005a72:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a80:	e00b      	b.n	8005a9a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a88:	1c59      	adds	r1, r3, #1
 8005a8a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005a8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	09db      	lsrs	r3, r3, #7
 8005a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a9e:	d8f0      	bhi.n	8005a82 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab8:	e00b      	b.n	8005ad2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac0:	1c59      	adds	r1, r3, #1
 8005ac2:	6379      	str	r1, [r7, #52]	; 0x34
 8005ac4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	09db      	lsrs	r3, r3, #7
 8005ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ad6:	d8f0      	bhi.n	8005aba <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	637a      	str	r2, [r7, #52]	; 0x34
 8005ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af0:	e00b      	b.n	8005b0a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	1c59      	adds	r1, r3, #1
 8005afa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	09db      	lsrs	r3, r3, #7
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0e:	d8f0      	bhi.n	8005af2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
 8005b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b26:	623b      	str	r3, [r7, #32]
 8005b28:	e00b      	b.n	8005b42 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	1c59      	adds	r1, r3, #1
 8005b32:	6279      	str	r1, [r7, #36]	; 0x24
 8005b34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	701a      	strb	r2, [r3, #0]
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	09db      	lsrs	r3, r3, #7
 8005b40:	623b      	str	r3, [r7, #32]
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	2b7f      	cmp	r3, #127	; 0x7f
 8005b46:	d8f0      	bhi.n	8005b2a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	627a      	str	r2, [r7, #36]	; 0x24
 8005b4e:	6a3a      	ldr	r2, [r7, #32]
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	6979      	ldr	r1, [r7, #20]
 8005b5c:	69b8      	ldr	r0, [r7, #24]
 8005b5e:	f7ff fd13 	bl	8005588 <_SendPacket>
  RECORD_END();
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f383 8811 	msr	BASEPRI, r3
}
 8005b68:	bf00      	nop
 8005b6a:	3740      	adds	r7, #64	; 0x40
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20014420 	.word	0x20014420

08005b74 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08c      	sub	sp, #48	; 0x30
 8005b78:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005b7a:	4b58      	ldr	r3, [pc, #352]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005b80:	f3ef 8311 	mrs	r3, BASEPRI
 8005b84:	f04f 0120 	mov.w	r1, #32
 8005b88:	f381 8811 	msr	BASEPRI, r1
 8005b8c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005b8e:	4b53      	ldr	r3, [pc, #332]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	220a      	movs	r2, #10
 8005b94:	4952      	ldr	r1, [pc, #328]	; (8005ce0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fa fb22 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005ba2:	200a      	movs	r0, #10
 8005ba4:	f7ff fe2a 	bl	80057fc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ba8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bac:	f04f 0120 	mov.w	r1, #32
 8005bb0:	f381 8811 	msr	BASEPRI, r1
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	484b      	ldr	r0, [pc, #300]	; (8005ce4 <SEGGER_SYSVIEW_Start+0x170>)
 8005bb8:	f7ff fbf5 	bl	80053a6 <_PreparePacket>
 8005bbc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc6:	4b45      	ldr	r3, [pc, #276]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bcc:	e00b      	b.n	8005be6 <SEGGER_SYSVIEW_Start+0x72>
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	1c59      	adds	r1, r3, #1
 8005bd6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	09db      	lsrs	r3, r3, #7
 8005be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bea:	d8f0      	bhi.n	8005bce <SEGGER_SYSVIEW_Start+0x5a>
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005c00:	4b36      	ldr	r3, [pc, #216]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	e00b      	b.n	8005c20 <SEGGER_SYSVIEW_Start+0xac>
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	1c59      	adds	r1, r3, #1
 8005c10:	6279      	str	r1, [r7, #36]	; 0x24
 8005c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	09db      	lsrs	r3, r3, #7
 8005c1e:	623b      	str	r3, [r7, #32]
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	2b7f      	cmp	r3, #127	; 0x7f
 8005c24:	d8f0      	bhi.n	8005c08 <SEGGER_SYSVIEW_Start+0x94>
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	627a      	str	r2, [r7, #36]	; 0x24
 8005c2c:	6a3a      	ldr	r2, [r7, #32]
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	4b28      	ldr	r3, [pc, #160]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	e00b      	b.n	8005c5a <SEGGER_SYSVIEW_Start+0xe6>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	1c59      	adds	r1, r3, #1
 8005c4a:	61f9      	str	r1, [r7, #28]
 8005c4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	09db      	lsrs	r3, r3, #7
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c5e:	d8f0      	bhi.n	8005c42 <SEGGER_SYSVIEW_Start+0xce>
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	61fa      	str	r2, [r7, #28]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	e00b      	b.n	8005c92 <SEGGER_SYSVIEW_Start+0x11e>
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	1c59      	adds	r1, r3, #1
 8005c82:	6179      	str	r1, [r7, #20]
 8005c84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	09db      	lsrs	r3, r3, #7
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b7f      	cmp	r3, #127	; 0x7f
 8005c96:	d8f0      	bhi.n	8005c7a <SEGGER_SYSVIEW_Start+0x106>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	617a      	str	r2, [r7, #20]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ca8:	2218      	movs	r2, #24
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff fc6b 	bl	8005588 <_SendPacket>
      RECORD_END();
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005cb8:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005cc0:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005cc6:	f000 f9eb 	bl	80060a0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005cca:	f000 f9b1 	bl	8006030 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005cce:	f000 fc83 	bl	80065d8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005cd2:	bf00      	nop
 8005cd4:	3730      	adds	r7, #48	; 0x30
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	200143f0 	.word	0x200143f0
 8005ce0:	08007304 	.word	0x08007304
 8005ce4:	20014420 	.word	0x20014420

08005ce8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005cee:	f3ef 8311 	mrs	r3, BASEPRI
 8005cf2:	f04f 0120 	mov.w	r1, #32
 8005cf6:	f381 8811 	msr	BASEPRI, r1
 8005cfa:	607b      	str	r3, [r7, #4]
 8005cfc:	480b      	ldr	r0, [pc, #44]	; (8005d2c <SEGGER_SYSVIEW_Stop+0x44>)
 8005cfe:	f7ff fb52 	bl	80053a6 <_PreparePacket>
 8005d02:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005d04:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005d0c:	220b      	movs	r2, #11
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6838      	ldr	r0, [r7, #0]
 8005d12:	f7ff fc39 	bl	8005588 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f383 8811 	msr	BASEPRI, r3
}
 8005d22:	bf00      	nop
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20014420 	.word	0x20014420
 8005d30:	200143f0 	.word	0x200143f0

08005d34 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08c      	sub	sp, #48	; 0x30
 8005d38:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d3e:	f04f 0120 	mov.w	r1, #32
 8005d42:	f381 8811 	msr	BASEPRI, r1
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	4845      	ldr	r0, [pc, #276]	; (8005e60 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005d4a:	f7ff fb2c 	bl	80053a6 <_PreparePacket>
 8005d4e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d58:	4b42      	ldr	r3, [pc, #264]	; (8005e64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d5e:	e00b      	b.n	8005d78 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	1c59      	adds	r1, r3, #1
 8005d68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	09db      	lsrs	r3, r3, #7
 8005d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d7c:	d8f0      	bhi.n	8005d60 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
 8005d92:	4b34      	ldr	r3, [pc, #208]	; (8005e64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	623b      	str	r3, [r7, #32]
 8005d98:	e00b      	b.n	8005db2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	1c59      	adds	r1, r3, #1
 8005da2:	6279      	str	r1, [r7, #36]	; 0x24
 8005da4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	09db      	lsrs	r3, r3, #7
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	2b7f      	cmp	r3, #127	; 0x7f
 8005db6:	d8f0      	bhi.n	8005d9a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	627a      	str	r2, [r7, #36]	; 0x24
 8005dbe:	6a3a      	ldr	r2, [r7, #32]
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	4b25      	ldr	r3, [pc, #148]	; (8005e64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	e00b      	b.n	8005dec <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	1c59      	adds	r1, r3, #1
 8005ddc:	61f9      	str	r1, [r7, #28]
 8005dde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	09db      	lsrs	r3, r3, #7
 8005dea:	61bb      	str	r3, [r7, #24]
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b7f      	cmp	r3, #127	; 0x7f
 8005df0:	d8f0      	bhi.n	8005dd4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	61fa      	str	r2, [r7, #28]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	e00b      	b.n	8005e24 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	1c59      	adds	r1, r3, #1
 8005e14:	6179      	str	r1, [r7, #20]
 8005e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	09db      	lsrs	r3, r3, #7
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2b7f      	cmp	r3, #127	; 0x7f
 8005e28:	d8f0      	bhi.n	8005e0c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	617a      	str	r2, [r7, #20]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005e3a:	2218      	movs	r2, #24
 8005e3c:	6879      	ldr	r1, [r7, #4]
 8005e3e:	68b8      	ldr	r0, [r7, #8]
 8005e40:	f7ff fba2 	bl	8005588 <_SendPacket>
  RECORD_END();
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005e4a:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005e52:	4b04      	ldr	r3, [pc, #16]	; (8005e64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	4798      	blx	r3
  }
}
 8005e58:	bf00      	nop
 8005e5a:	3730      	adds	r7, #48	; 0x30
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20014420 	.word	0x20014420
 8005e64:	200143f0 	.word	0x200143f0

08005e68 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b092      	sub	sp, #72	; 0x48
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005e70:	f3ef 8311 	mrs	r3, BASEPRI
 8005e74:	f04f 0120 	mov.w	r1, #32
 8005e78:	f381 8811 	msr	BASEPRI, r1
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	486a      	ldr	r0, [pc, #424]	; (8006028 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005e80:	f7ff fa91 	bl	80053a6 <_PreparePacket>
 8005e84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b66      	ldr	r3, [pc, #408]	; (800602c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	643b      	str	r3, [r7, #64]	; 0x40
 8005e9a:	e00b      	b.n	8005eb4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea2:	1c59      	adds	r1, r3, #1
 8005ea4:	6479      	str	r1, [r7, #68]	; 0x44
 8005ea6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb0:	09db      	lsrs	r3, r3, #7
 8005eb2:	643b      	str	r3, [r7, #64]	; 0x40
 8005eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005eb8:	d8f0      	bhi.n	8005e9c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	647a      	str	r2, [r7, #68]	; 0x44
 8005ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed4:	e00b      	b.n	8005eee <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005edc:	1c59      	adds	r1, r3, #1
 8005ede:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ee0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	09db      	lsrs	r3, r3, #7
 8005eec:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef2:	d8f0      	bhi.n	8005ed6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f02:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff f9fd 	bl	800530c <_EncodeStr>
 8005f12:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005f14:	2209      	movs	r2, #9
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	6938      	ldr	r0, [r7, #16]
 8005f1a:	f7ff fb35 	bl	8005588 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	637b      	str	r3, [r7, #52]	; 0x34
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b40      	ldr	r3, [pc, #256]	; (800602c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	633b      	str	r3, [r7, #48]	; 0x30
 8005f32:	e00b      	b.n	8005f4c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	1c59      	adds	r1, r3, #1
 8005f3c:	6379      	str	r1, [r7, #52]	; 0x34
 8005f3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	09db      	lsrs	r3, r3, #7
 8005f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f50:	d8f0      	bhi.n	8005f34 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	637a      	str	r2, [r7, #52]	; 0x34
 8005f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f6c:	e00b      	b.n	8005f86 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	1c59      	adds	r1, r3, #1
 8005f76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	09db      	lsrs	r3, r3, #7
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	2b7f      	cmp	r3, #127	; 0x7f
 8005f8a:	d8f0      	bhi.n	8005f6e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	623b      	str	r3, [r7, #32]
 8005fa6:	e00b      	b.n	8005fc0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	1c59      	adds	r1, r3, #1
 8005fb0:	6279      	str	r1, [r7, #36]	; 0x24
 8005fb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	09db      	lsrs	r3, r3, #7
 8005fbe:	623b      	str	r3, [r7, #32]
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc4:	d8f0      	bhi.n	8005fa8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	627a      	str	r2, [r7, #36]	; 0x24
 8005fcc:	6a3a      	ldr	r2, [r7, #32]
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	e00b      	b.n	8005ff8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	1c59      	adds	r1, r3, #1
 8005fe8:	61f9      	str	r1, [r7, #28]
 8005fea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	09db      	lsrs	r3, r3, #7
 8005ff6:	61bb      	str	r3, [r7, #24]
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8005ffc:	d8f0      	bhi.n	8005fe0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	61fa      	str	r2, [r7, #28]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800600e:	2215      	movs	r2, #21
 8006010:	68f9      	ldr	r1, [r7, #12]
 8006012:	6938      	ldr	r0, [r7, #16]
 8006014:	f7ff fab8 	bl	8005588 <_SendPacket>
  RECORD_END();
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f383 8811 	msr	BASEPRI, r3
}
 800601e:	bf00      	nop
 8006020:	3748      	adds	r7, #72	; 0x48
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20014420 	.word	0x20014420
 800602c:	200143f0 	.word	0x200143f0

08006030 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006034:	4b07      	ldr	r3, [pc, #28]	; (8006054 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006046:	4b03      	ldr	r3, [pc, #12]	; (8006054 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4798      	blx	r3
  }
}
 800604e:	bf00      	nop
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	200143f0 	.word	0x200143f0

08006058 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006060:	f3ef 8311 	mrs	r3, BASEPRI
 8006064:	f04f 0120 	mov.w	r1, #32
 8006068:	f381 8811 	msr	BASEPRI, r1
 800606c:	617b      	str	r3, [r7, #20]
 800606e:	480b      	ldr	r0, [pc, #44]	; (800609c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006070:	f7ff f999 	bl	80053a6 <_PreparePacket>
 8006074:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006076:	2280      	movs	r2, #128	; 0x80
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	6938      	ldr	r0, [r7, #16]
 800607c:	f7ff f946 	bl	800530c <_EncodeStr>
 8006080:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006082:	220e      	movs	r2, #14
 8006084:	68f9      	ldr	r1, [r7, #12]
 8006086:	6938      	ldr	r0, [r7, #16]
 8006088:	f7ff fa7e 	bl	8005588 <_SendPacket>
  RECORD_END();
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f383 8811 	msr	BASEPRI, r3
}
 8006092:	bf00      	nop
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20014420 	.word	0x20014420

080060a0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80060a0:	b590      	push	{r4, r7, lr}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80060a6:	4b15      	ldr	r3, [pc, #84]	; (80060fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d01a      	beq.n	80060e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d015      	beq.n	80060e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80060b8:	4b10      	ldr	r3, [pc, #64]	; (80060fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4798      	blx	r3
 80060c0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80060c4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80060c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	000a      	movs	r2, r1
 80060d4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80060d6:	4613      	mov	r3, r2
 80060d8:	461a      	mov	r2, r3
 80060da:	4621      	mov	r1, r4
 80060dc:	200d      	movs	r0, #13
 80060de:	f7ff fbe7 	bl	80058b0 <SEGGER_SYSVIEW_RecordU32x2>
 80060e2:	e006      	b.n	80060f2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4619      	mov	r1, r3
 80060ea:	200c      	movs	r0, #12
 80060ec:	f7ff fba4 	bl	8005838 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd90      	pop	{r4, r7, pc}
 80060fa:	bf00      	nop
 80060fc:	200143f0 	.word	0x200143f0
 8006100:	e0001004 	.word	0xe0001004

08006104 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800610a:	f3ef 8311 	mrs	r3, BASEPRI
 800610e:	f04f 0120 	mov.w	r1, #32
 8006112:	f381 8811 	msr	BASEPRI, r1
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	4819      	ldr	r0, [pc, #100]	; (8006180 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800611a:	f7ff f944 	bl	80053a6 <_PreparePacket>
 800611e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006124:	4b17      	ldr	r3, [pc, #92]	; (8006184 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	e00b      	b.n	8006150 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	1c59      	adds	r1, r3, #1
 8006140:	6179      	str	r1, [r7, #20]
 8006142:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	09db      	lsrs	r3, r3, #7
 800614e:	613b      	str	r3, [r7, #16]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	2b7f      	cmp	r3, #127	; 0x7f
 8006154:	d8f0      	bhi.n	8006138 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	617a      	str	r2, [r7, #20]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006166:	2202      	movs	r2, #2
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	68b8      	ldr	r0, [r7, #8]
 800616c:	f7ff fa0c 	bl	8005588 <_SendPacket>
  RECORD_END();
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f383 8811 	msr	BASEPRI, r3
}
 8006176:	bf00      	nop
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20014420 	.word	0x20014420
 8006184:	e000ed04 	.word	0xe000ed04

08006188 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800618e:	f3ef 8311 	mrs	r3, BASEPRI
 8006192:	f04f 0120 	mov.w	r1, #32
 8006196:	f381 8811 	msr	BASEPRI, r1
 800619a:	607b      	str	r3, [r7, #4]
 800619c:	4807      	ldr	r0, [pc, #28]	; (80061bc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800619e:	f7ff f902 	bl	80053a6 <_PreparePacket>
 80061a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80061a4:	2203      	movs	r2, #3
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6838      	ldr	r0, [r7, #0]
 80061aa:	f7ff f9ed 	bl	8005588 <_SendPacket>
  RECORD_END();
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f383 8811 	msr	BASEPRI, r3
}
 80061b4:	bf00      	nop
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20014420 	.word	0x20014420

080061c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061c6:	f3ef 8311 	mrs	r3, BASEPRI
 80061ca:	f04f 0120 	mov.w	r1, #32
 80061ce:	f381 8811 	msr	BASEPRI, r1
 80061d2:	607b      	str	r3, [r7, #4]
 80061d4:	4807      	ldr	r0, [pc, #28]	; (80061f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80061d6:	f7ff f8e6 	bl	80053a6 <_PreparePacket>
 80061da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80061dc:	2212      	movs	r2, #18
 80061de:	6839      	ldr	r1, [r7, #0]
 80061e0:	6838      	ldr	r0, [r7, #0]
 80061e2:	f7ff f9d1 	bl	8005588 <_SendPacket>
  RECORD_END();
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f383 8811 	msr	BASEPRI, r3
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20014420 	.word	0x20014420

080061f8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006202:	f04f 0120 	mov.w	r1, #32
 8006206:	f381 8811 	msr	BASEPRI, r1
 800620a:	607b      	str	r3, [r7, #4]
 800620c:	4807      	ldr	r0, [pc, #28]	; (800622c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800620e:	f7ff f8ca 	bl	80053a6 <_PreparePacket>
 8006212:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006214:	2211      	movs	r2, #17
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6838      	ldr	r0, [r7, #0]
 800621a:	f7ff f9b5 	bl	8005588 <_SendPacket>
  RECORD_END();
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f383 8811 	msr	BASEPRI, r3
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20014420 	.word	0x20014420

08006230 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006238:	f3ef 8311 	mrs	r3, BASEPRI
 800623c:	f04f 0120 	mov.w	r1, #32
 8006240:	f381 8811 	msr	BASEPRI, r1
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	4819      	ldr	r0, [pc, #100]	; (80062ac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006248:	f7ff f8ad 	bl	80053a6 <_PreparePacket>
 800624c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006252:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	61fb      	str	r3, [r7, #28]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	e00b      	b.n	800627e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	b2da      	uxtb	r2, r3
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	1c59      	adds	r1, r3, #1
 800626e:	61f9      	str	r1, [r7, #28]
 8006270:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	09db      	lsrs	r3, r3, #7
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b7f      	cmp	r3, #127	; 0x7f
 8006282:	d8f0      	bhi.n	8006266 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	61fa      	str	r2, [r7, #28]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006294:	2208      	movs	r2, #8
 8006296:	68f9      	ldr	r1, [r7, #12]
 8006298:	6938      	ldr	r0, [r7, #16]
 800629a:	f7ff f975 	bl	8005588 <_SendPacket>
  RECORD_END();
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f383 8811 	msr	BASEPRI, r3
}
 80062a4:	bf00      	nop
 80062a6:	3720      	adds	r7, #32
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20014420 	.word	0x20014420
 80062b0:	200143f0 	.word	0x200143f0

080062b4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062bc:	f3ef 8311 	mrs	r3, BASEPRI
 80062c0:	f04f 0120 	mov.w	r1, #32
 80062c4:	f381 8811 	msr	BASEPRI, r1
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	4819      	ldr	r0, [pc, #100]	; (8006330 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80062cc:	f7ff f86b 	bl	80053a6 <_PreparePacket>
 80062d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062d6:	4b17      	ldr	r3, [pc, #92]	; (8006334 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	e00b      	b.n	8006302 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	1c59      	adds	r1, r3, #1
 80062f2:	61f9      	str	r1, [r7, #28]
 80062f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	09db      	lsrs	r3, r3, #7
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b7f      	cmp	r3, #127	; 0x7f
 8006306:	d8f0      	bhi.n	80062ea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	61fa      	str	r2, [r7, #28]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006318:	2204      	movs	r2, #4
 800631a:	68f9      	ldr	r1, [r7, #12]
 800631c:	6938      	ldr	r0, [r7, #16]
 800631e:	f7ff f933 	bl	8005588 <_SendPacket>
  RECORD_END();
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f383 8811 	msr	BASEPRI, r3
}
 8006328:	bf00      	nop
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20014420 	.word	0x20014420
 8006334:	200143f0 	.word	0x200143f0

08006338 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006340:	f3ef 8311 	mrs	r3, BASEPRI
 8006344:	f04f 0120 	mov.w	r1, #32
 8006348:	f381 8811 	msr	BASEPRI, r1
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	4819      	ldr	r0, [pc, #100]	; (80063b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006350:	f7ff f829 	bl	80053a6 <_PreparePacket>
 8006354:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800635a:	4b17      	ldr	r3, [pc, #92]	; (80063b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	e00b      	b.n	8006386 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	b2da      	uxtb	r2, r3
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	1c59      	adds	r1, r3, #1
 8006376:	61f9      	str	r1, [r7, #28]
 8006378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	09db      	lsrs	r3, r3, #7
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2b7f      	cmp	r3, #127	; 0x7f
 800638a:	d8f0      	bhi.n	800636e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	61fa      	str	r2, [r7, #28]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800639c:	2206      	movs	r2, #6
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	6938      	ldr	r0, [r7, #16]
 80063a2:	f7ff f8f1 	bl	8005588 <_SendPacket>
  RECORD_END();
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f383 8811 	msr	BASEPRI, r3
}
 80063ac:	bf00      	nop
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	20014420 	.word	0x20014420
 80063b8:	200143f0 	.word	0x200143f0

080063bc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80063c6:	f3ef 8311 	mrs	r3, BASEPRI
 80063ca:	f04f 0120 	mov.w	r1, #32
 80063ce:	f381 8811 	msr	BASEPRI, r1
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	4827      	ldr	r0, [pc, #156]	; (8006474 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80063d6:	f7fe ffe6 	bl	80053a6 <_PreparePacket>
 80063da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	623b      	str	r3, [r7, #32]
 80063f2:	e00b      	b.n	800640c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	1c59      	adds	r1, r3, #1
 80063fc:	6279      	str	r1, [r7, #36]	; 0x24
 80063fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	09db      	lsrs	r3, r3, #7
 800640a:	623b      	str	r3, [r7, #32]
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	2b7f      	cmp	r3, #127	; 0x7f
 8006410:	d8f0      	bhi.n	80063f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	627a      	str	r2, [r7, #36]	; 0x24
 8006418:	6a3a      	ldr	r2, [r7, #32]
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	61fb      	str	r3, [r7, #28]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	e00b      	b.n	8006444 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	b2da      	uxtb	r2, r3
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	1c59      	adds	r1, r3, #1
 8006434:	61f9      	str	r1, [r7, #28]
 8006436:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	09db      	lsrs	r3, r3, #7
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2b7f      	cmp	r3, #127	; 0x7f
 8006448:	d8f0      	bhi.n	800642c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	61fa      	str	r2, [r7, #28]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800645a:	2207      	movs	r2, #7
 800645c:	68f9      	ldr	r1, [r7, #12]
 800645e:	6938      	ldr	r0, [r7, #16]
 8006460:	f7ff f892 	bl	8005588 <_SendPacket>
  RECORD_END();
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f383 8811 	msr	BASEPRI, r3
}
 800646a:	bf00      	nop
 800646c:	3728      	adds	r7, #40	; 0x28
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20014420 	.word	0x20014420
 8006478:	200143f0 	.word	0x200143f0

0800647c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006484:	4b04      	ldr	r3, [pc, #16]	; (8006498 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	1ad3      	subs	r3, r2, r3
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	200143f0 	.word	0x200143f0

0800649c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b08c      	sub	sp, #48	; 0x30
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80064a6:	4b3b      	ldr	r3, [pc, #236]	; (8006594 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d06d      	beq.n	800658a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80064ae:	4b39      	ldr	r3, [pc, #228]	; (8006594 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80064b4:	2300      	movs	r3, #0
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b8:	e008      	b.n	80064cc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	3301      	adds	r3, #1
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d3f2      	bcc.n	80064ba <SEGGER_SYSVIEW_SendModule+0x1e>
 80064d4:	e000      	b.n	80064d8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80064d6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d055      	beq.n	800658a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064de:	f3ef 8311 	mrs	r3, BASEPRI
 80064e2:	f04f 0120 	mov.w	r1, #32
 80064e6:	f381 8811 	msr	BASEPRI, r1
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	482a      	ldr	r0, [pc, #168]	; (8006598 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80064ee:	f7fe ff5a 	bl	80053a6 <_PreparePacket>
 80064f2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	623b      	str	r3, [r7, #32]
 8006500:	e00b      	b.n	800651a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	b2da      	uxtb	r2, r3
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	1c59      	adds	r1, r3, #1
 800650a:	6279      	str	r1, [r7, #36]	; 0x24
 800650c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	09db      	lsrs	r3, r3, #7
 8006518:	623b      	str	r3, [r7, #32]
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	2b7f      	cmp	r3, #127	; 0x7f
 800651e:	d8f0      	bhi.n	8006502 <SEGGER_SYSVIEW_SendModule+0x66>
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	627a      	str	r2, [r7, #36]	; 0x24
 8006526:	6a3a      	ldr	r2, [r7, #32]
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	e00b      	b.n	8006554 <SEGGER_SYSVIEW_SendModule+0xb8>
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	1c59      	adds	r1, r3, #1
 8006544:	61f9      	str	r1, [r7, #28]
 8006546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	09db      	lsrs	r3, r3, #7
 8006552:	61bb      	str	r3, [r7, #24]
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	2b7f      	cmp	r3, #127	; 0x7f
 8006558:	d8f0      	bhi.n	800653c <SEGGER_SYSVIEW_SendModule+0xa0>
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	61fa      	str	r2, [r7, #28]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2280      	movs	r2, #128	; 0x80
 8006570:	4619      	mov	r1, r3
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f7fe feca 	bl	800530c <_EncodeStr>
 8006578:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800657a:	2216      	movs	r2, #22
 800657c:	68f9      	ldr	r1, [r7, #12]
 800657e:	6938      	ldr	r0, [r7, #16]
 8006580:	f7ff f802 	bl	8005588 <_SendPacket>
      RECORD_END();
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800658a:	bf00      	nop
 800658c:	3730      	adds	r7, #48	; 0x30
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20014418 	.word	0x20014418
 8006598:	20014420 	.word	0x20014420

0800659c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80065a2:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00f      	beq.n	80065ca <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80065aa:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1f2      	bne.n	80065b0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80065ca:	bf00      	nop
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20014418 	.word	0x20014418

080065d8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80065de:	f3ef 8311 	mrs	r3, BASEPRI
 80065e2:	f04f 0120 	mov.w	r1, #32
 80065e6:	f381 8811 	msr	BASEPRI, r1
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	4817      	ldr	r0, [pc, #92]	; (800664c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80065ee:	f7fe feda 	bl	80053a6 <_PreparePacket>
 80065f2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	4b14      	ldr	r3, [pc, #80]	; (8006650 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	e00b      	b.n	800661c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	b2da      	uxtb	r2, r3
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	1c59      	adds	r1, r3, #1
 800660c:	6179      	str	r1, [r7, #20]
 800660e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	09db      	lsrs	r3, r3, #7
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b7f      	cmp	r3, #127	; 0x7f
 8006620:	d8f0      	bhi.n	8006604 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	617a      	str	r2, [r7, #20]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006632:	221b      	movs	r2, #27
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	68b8      	ldr	r0, [r7, #8]
 8006638:	f7fe ffa6 	bl	8005588 <_SendPacket>
  RECORD_END();
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f383 8811 	msr	BASEPRI, r3
}
 8006642:	bf00      	nop
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20014420 	.word	0x20014420
 8006650:	2001441c 	.word	0x2001441c

08006654 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b08a      	sub	sp, #40	; 0x28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800665c:	f3ef 8311 	mrs	r3, BASEPRI
 8006660:	f04f 0120 	mov.w	r1, #32
 8006664:	f381 8811 	msr	BASEPRI, r1
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	4827      	ldr	r0, [pc, #156]	; (8006708 <SEGGER_SYSVIEW_Warn+0xb4>)
 800666c:	f7fe fe9b 	bl	80053a6 <_PreparePacket>
 8006670:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006672:	2280      	movs	r2, #128	; 0x80
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	6938      	ldr	r0, [r7, #16]
 8006678:	f7fe fe48 	bl	800530c <_EncodeStr>
 800667c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
 8006682:	2301      	movs	r3, #1
 8006684:	623b      	str	r3, [r7, #32]
 8006686:	e00b      	b.n	80066a0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	1c59      	adds	r1, r3, #1
 8006690:	6279      	str	r1, [r7, #36]	; 0x24
 8006692:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	09db      	lsrs	r3, r3, #7
 800669e:	623b      	str	r3, [r7, #32]
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	2b7f      	cmp	r3, #127	; 0x7f
 80066a4:	d8f0      	bhi.n	8006688 <SEGGER_SYSVIEW_Warn+0x34>
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	627a      	str	r2, [r7, #36]	; 0x24
 80066ac:	6a3a      	ldr	r2, [r7, #32]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	2300      	movs	r3, #0
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	e00b      	b.n	80066d8 <SEGGER_SYSVIEW_Warn+0x84>
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	1c59      	adds	r1, r3, #1
 80066c8:	61f9      	str	r1, [r7, #28]
 80066ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	09db      	lsrs	r3, r3, #7
 80066d6:	61bb      	str	r3, [r7, #24]
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b7f      	cmp	r3, #127	; 0x7f
 80066dc:	d8f0      	bhi.n	80066c0 <SEGGER_SYSVIEW_Warn+0x6c>
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	61fa      	str	r2, [r7, #28]
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066ee:	221a      	movs	r2, #26
 80066f0:	68f9      	ldr	r1, [r7, #12]
 80066f2:	6938      	ldr	r0, [r7, #16]
 80066f4:	f7fe ff48 	bl	8005588 <_SendPacket>
  RECORD_END();
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f383 8811 	msr	BASEPRI, r3
}
 80066fe:	bf00      	nop
 8006700:	3728      	adds	r7, #40	; 0x28
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20014420 	.word	0x20014420

0800670c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	2000      	movs	r0, #0
 8006720:	f7fe fcda 	bl	80050d8 <SEGGER_RTT_Write>
  return len;
 8006724:	683b      	ldr	r3, [r7, #0]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <__errno>:
 8006730:	4b01      	ldr	r3, [pc, #4]	; (8006738 <__errno+0x8>)
 8006732:	6818      	ldr	r0, [r3, #0]
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000014 	.word	0x20000014

0800673c <__libc_init_array>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	4d0d      	ldr	r5, [pc, #52]	; (8006774 <__libc_init_array+0x38>)
 8006740:	4c0d      	ldr	r4, [pc, #52]	; (8006778 <__libc_init_array+0x3c>)
 8006742:	1b64      	subs	r4, r4, r5
 8006744:	10a4      	asrs	r4, r4, #2
 8006746:	2600      	movs	r6, #0
 8006748:	42a6      	cmp	r6, r4
 800674a:	d109      	bne.n	8006760 <__libc_init_array+0x24>
 800674c:	4d0b      	ldr	r5, [pc, #44]	; (800677c <__libc_init_array+0x40>)
 800674e:	4c0c      	ldr	r4, [pc, #48]	; (8006780 <__libc_init_array+0x44>)
 8006750:	f000 fd2a 	bl	80071a8 <_init>
 8006754:	1b64      	subs	r4, r4, r5
 8006756:	10a4      	asrs	r4, r4, #2
 8006758:	2600      	movs	r6, #0
 800675a:	42a6      	cmp	r6, r4
 800675c:	d105      	bne.n	800676a <__libc_init_array+0x2e>
 800675e:	bd70      	pop	{r4, r5, r6, pc}
 8006760:	f855 3b04 	ldr.w	r3, [r5], #4
 8006764:	4798      	blx	r3
 8006766:	3601      	adds	r6, #1
 8006768:	e7ee      	b.n	8006748 <__libc_init_array+0xc>
 800676a:	f855 3b04 	ldr.w	r3, [r5], #4
 800676e:	4798      	blx	r3
 8006770:	3601      	adds	r6, #1
 8006772:	e7f2      	b.n	800675a <__libc_init_array+0x1e>
 8006774:	0800737c 	.word	0x0800737c
 8006778:	0800737c 	.word	0x0800737c
 800677c:	0800737c 	.word	0x0800737c
 8006780:	08007380 	.word	0x08007380

08006784 <memcmp>:
 8006784:	b510      	push	{r4, lr}
 8006786:	3901      	subs	r1, #1
 8006788:	4402      	add	r2, r0
 800678a:	4290      	cmp	r0, r2
 800678c:	d101      	bne.n	8006792 <memcmp+0xe>
 800678e:	2000      	movs	r0, #0
 8006790:	e005      	b.n	800679e <memcmp+0x1a>
 8006792:	7803      	ldrb	r3, [r0, #0]
 8006794:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006798:	42a3      	cmp	r3, r4
 800679a:	d001      	beq.n	80067a0 <memcmp+0x1c>
 800679c:	1b18      	subs	r0, r3, r4
 800679e:	bd10      	pop	{r4, pc}
 80067a0:	3001      	adds	r0, #1
 80067a2:	e7f2      	b.n	800678a <memcmp+0x6>

080067a4 <memcpy>:
 80067a4:	440a      	add	r2, r1
 80067a6:	4291      	cmp	r1, r2
 80067a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80067ac:	d100      	bne.n	80067b0 <memcpy+0xc>
 80067ae:	4770      	bx	lr
 80067b0:	b510      	push	{r4, lr}
 80067b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ba:	4291      	cmp	r1, r2
 80067bc:	d1f9      	bne.n	80067b2 <memcpy+0xe>
 80067be:	bd10      	pop	{r4, pc}

080067c0 <memset>:
 80067c0:	4402      	add	r2, r0
 80067c2:	4603      	mov	r3, r0
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d100      	bne.n	80067ca <memset+0xa>
 80067c8:	4770      	bx	lr
 80067ca:	f803 1b01 	strb.w	r1, [r3], #1
 80067ce:	e7f9      	b.n	80067c4 <memset+0x4>

080067d0 <_puts_r>:
 80067d0:	b570      	push	{r4, r5, r6, lr}
 80067d2:	460e      	mov	r6, r1
 80067d4:	4605      	mov	r5, r0
 80067d6:	b118      	cbz	r0, 80067e0 <_puts_r+0x10>
 80067d8:	6983      	ldr	r3, [r0, #24]
 80067da:	b90b      	cbnz	r3, 80067e0 <_puts_r+0x10>
 80067dc:	f000 fa48 	bl	8006c70 <__sinit>
 80067e0:	69ab      	ldr	r3, [r5, #24]
 80067e2:	68ac      	ldr	r4, [r5, #8]
 80067e4:	b913      	cbnz	r3, 80067ec <_puts_r+0x1c>
 80067e6:	4628      	mov	r0, r5
 80067e8:	f000 fa42 	bl	8006c70 <__sinit>
 80067ec:	4b2c      	ldr	r3, [pc, #176]	; (80068a0 <_puts_r+0xd0>)
 80067ee:	429c      	cmp	r4, r3
 80067f0:	d120      	bne.n	8006834 <_puts_r+0x64>
 80067f2:	686c      	ldr	r4, [r5, #4]
 80067f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067f6:	07db      	lsls	r3, r3, #31
 80067f8:	d405      	bmi.n	8006806 <_puts_r+0x36>
 80067fa:	89a3      	ldrh	r3, [r4, #12]
 80067fc:	0598      	lsls	r0, r3, #22
 80067fe:	d402      	bmi.n	8006806 <_puts_r+0x36>
 8006800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006802:	f000 fad3 	bl	8006dac <__retarget_lock_acquire_recursive>
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	0719      	lsls	r1, r3, #28
 800680a:	d51d      	bpl.n	8006848 <_puts_r+0x78>
 800680c:	6923      	ldr	r3, [r4, #16]
 800680e:	b1db      	cbz	r3, 8006848 <_puts_r+0x78>
 8006810:	3e01      	subs	r6, #1
 8006812:	68a3      	ldr	r3, [r4, #8]
 8006814:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006818:	3b01      	subs	r3, #1
 800681a:	60a3      	str	r3, [r4, #8]
 800681c:	bb39      	cbnz	r1, 800686e <_puts_r+0x9e>
 800681e:	2b00      	cmp	r3, #0
 8006820:	da38      	bge.n	8006894 <_puts_r+0xc4>
 8006822:	4622      	mov	r2, r4
 8006824:	210a      	movs	r1, #10
 8006826:	4628      	mov	r0, r5
 8006828:	f000 f848 	bl	80068bc <__swbuf_r>
 800682c:	3001      	adds	r0, #1
 800682e:	d011      	beq.n	8006854 <_puts_r+0x84>
 8006830:	250a      	movs	r5, #10
 8006832:	e011      	b.n	8006858 <_puts_r+0x88>
 8006834:	4b1b      	ldr	r3, [pc, #108]	; (80068a4 <_puts_r+0xd4>)
 8006836:	429c      	cmp	r4, r3
 8006838:	d101      	bne.n	800683e <_puts_r+0x6e>
 800683a:	68ac      	ldr	r4, [r5, #8]
 800683c:	e7da      	b.n	80067f4 <_puts_r+0x24>
 800683e:	4b1a      	ldr	r3, [pc, #104]	; (80068a8 <_puts_r+0xd8>)
 8006840:	429c      	cmp	r4, r3
 8006842:	bf08      	it	eq
 8006844:	68ec      	ldreq	r4, [r5, #12]
 8006846:	e7d5      	b.n	80067f4 <_puts_r+0x24>
 8006848:	4621      	mov	r1, r4
 800684a:	4628      	mov	r0, r5
 800684c:	f000 f888 	bl	8006960 <__swsetup_r>
 8006850:	2800      	cmp	r0, #0
 8006852:	d0dd      	beq.n	8006810 <_puts_r+0x40>
 8006854:	f04f 35ff 	mov.w	r5, #4294967295
 8006858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800685a:	07da      	lsls	r2, r3, #31
 800685c:	d405      	bmi.n	800686a <_puts_r+0x9a>
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	059b      	lsls	r3, r3, #22
 8006862:	d402      	bmi.n	800686a <_puts_r+0x9a>
 8006864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006866:	f000 faa2 	bl	8006dae <__retarget_lock_release_recursive>
 800686a:	4628      	mov	r0, r5
 800686c:	bd70      	pop	{r4, r5, r6, pc}
 800686e:	2b00      	cmp	r3, #0
 8006870:	da04      	bge.n	800687c <_puts_r+0xac>
 8006872:	69a2      	ldr	r2, [r4, #24]
 8006874:	429a      	cmp	r2, r3
 8006876:	dc06      	bgt.n	8006886 <_puts_r+0xb6>
 8006878:	290a      	cmp	r1, #10
 800687a:	d004      	beq.n	8006886 <_puts_r+0xb6>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	6022      	str	r2, [r4, #0]
 8006882:	7019      	strb	r1, [r3, #0]
 8006884:	e7c5      	b.n	8006812 <_puts_r+0x42>
 8006886:	4622      	mov	r2, r4
 8006888:	4628      	mov	r0, r5
 800688a:	f000 f817 	bl	80068bc <__swbuf_r>
 800688e:	3001      	adds	r0, #1
 8006890:	d1bf      	bne.n	8006812 <_puts_r+0x42>
 8006892:	e7df      	b.n	8006854 <_puts_r+0x84>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	250a      	movs	r5, #10
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	6022      	str	r2, [r4, #0]
 800689c:	701d      	strb	r5, [r3, #0]
 800689e:	e7db      	b.n	8006858 <_puts_r+0x88>
 80068a0:	08007334 	.word	0x08007334
 80068a4:	08007354 	.word	0x08007354
 80068a8:	08007314 	.word	0x08007314

080068ac <puts>:
 80068ac:	4b02      	ldr	r3, [pc, #8]	; (80068b8 <puts+0xc>)
 80068ae:	4601      	mov	r1, r0
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	f7ff bf8d 	b.w	80067d0 <_puts_r>
 80068b6:	bf00      	nop
 80068b8:	20000014 	.word	0x20000014

080068bc <__swbuf_r>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	460e      	mov	r6, r1
 80068c0:	4614      	mov	r4, r2
 80068c2:	4605      	mov	r5, r0
 80068c4:	b118      	cbz	r0, 80068ce <__swbuf_r+0x12>
 80068c6:	6983      	ldr	r3, [r0, #24]
 80068c8:	b90b      	cbnz	r3, 80068ce <__swbuf_r+0x12>
 80068ca:	f000 f9d1 	bl	8006c70 <__sinit>
 80068ce:	4b21      	ldr	r3, [pc, #132]	; (8006954 <__swbuf_r+0x98>)
 80068d0:	429c      	cmp	r4, r3
 80068d2:	d12b      	bne.n	800692c <__swbuf_r+0x70>
 80068d4:	686c      	ldr	r4, [r5, #4]
 80068d6:	69a3      	ldr	r3, [r4, #24]
 80068d8:	60a3      	str	r3, [r4, #8]
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	071a      	lsls	r2, r3, #28
 80068de:	d52f      	bpl.n	8006940 <__swbuf_r+0x84>
 80068e0:	6923      	ldr	r3, [r4, #16]
 80068e2:	b36b      	cbz	r3, 8006940 <__swbuf_r+0x84>
 80068e4:	6923      	ldr	r3, [r4, #16]
 80068e6:	6820      	ldr	r0, [r4, #0]
 80068e8:	1ac0      	subs	r0, r0, r3
 80068ea:	6963      	ldr	r3, [r4, #20]
 80068ec:	b2f6      	uxtb	r6, r6
 80068ee:	4283      	cmp	r3, r0
 80068f0:	4637      	mov	r7, r6
 80068f2:	dc04      	bgt.n	80068fe <__swbuf_r+0x42>
 80068f4:	4621      	mov	r1, r4
 80068f6:	4628      	mov	r0, r5
 80068f8:	f000 f926 	bl	8006b48 <_fflush_r>
 80068fc:	bb30      	cbnz	r0, 800694c <__swbuf_r+0x90>
 80068fe:	68a3      	ldr	r3, [r4, #8]
 8006900:	3b01      	subs	r3, #1
 8006902:	60a3      	str	r3, [r4, #8]
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	6022      	str	r2, [r4, #0]
 800690a:	701e      	strb	r6, [r3, #0]
 800690c:	6963      	ldr	r3, [r4, #20]
 800690e:	3001      	adds	r0, #1
 8006910:	4283      	cmp	r3, r0
 8006912:	d004      	beq.n	800691e <__swbuf_r+0x62>
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	07db      	lsls	r3, r3, #31
 8006918:	d506      	bpl.n	8006928 <__swbuf_r+0x6c>
 800691a:	2e0a      	cmp	r6, #10
 800691c:	d104      	bne.n	8006928 <__swbuf_r+0x6c>
 800691e:	4621      	mov	r1, r4
 8006920:	4628      	mov	r0, r5
 8006922:	f000 f911 	bl	8006b48 <_fflush_r>
 8006926:	b988      	cbnz	r0, 800694c <__swbuf_r+0x90>
 8006928:	4638      	mov	r0, r7
 800692a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800692c:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <__swbuf_r+0x9c>)
 800692e:	429c      	cmp	r4, r3
 8006930:	d101      	bne.n	8006936 <__swbuf_r+0x7a>
 8006932:	68ac      	ldr	r4, [r5, #8]
 8006934:	e7cf      	b.n	80068d6 <__swbuf_r+0x1a>
 8006936:	4b09      	ldr	r3, [pc, #36]	; (800695c <__swbuf_r+0xa0>)
 8006938:	429c      	cmp	r4, r3
 800693a:	bf08      	it	eq
 800693c:	68ec      	ldreq	r4, [r5, #12]
 800693e:	e7ca      	b.n	80068d6 <__swbuf_r+0x1a>
 8006940:	4621      	mov	r1, r4
 8006942:	4628      	mov	r0, r5
 8006944:	f000 f80c 	bl	8006960 <__swsetup_r>
 8006948:	2800      	cmp	r0, #0
 800694a:	d0cb      	beq.n	80068e4 <__swbuf_r+0x28>
 800694c:	f04f 37ff 	mov.w	r7, #4294967295
 8006950:	e7ea      	b.n	8006928 <__swbuf_r+0x6c>
 8006952:	bf00      	nop
 8006954:	08007334 	.word	0x08007334
 8006958:	08007354 	.word	0x08007354
 800695c:	08007314 	.word	0x08007314

08006960 <__swsetup_r>:
 8006960:	4b32      	ldr	r3, [pc, #200]	; (8006a2c <__swsetup_r+0xcc>)
 8006962:	b570      	push	{r4, r5, r6, lr}
 8006964:	681d      	ldr	r5, [r3, #0]
 8006966:	4606      	mov	r6, r0
 8006968:	460c      	mov	r4, r1
 800696a:	b125      	cbz	r5, 8006976 <__swsetup_r+0x16>
 800696c:	69ab      	ldr	r3, [r5, #24]
 800696e:	b913      	cbnz	r3, 8006976 <__swsetup_r+0x16>
 8006970:	4628      	mov	r0, r5
 8006972:	f000 f97d 	bl	8006c70 <__sinit>
 8006976:	4b2e      	ldr	r3, [pc, #184]	; (8006a30 <__swsetup_r+0xd0>)
 8006978:	429c      	cmp	r4, r3
 800697a:	d10f      	bne.n	800699c <__swsetup_r+0x3c>
 800697c:	686c      	ldr	r4, [r5, #4]
 800697e:	89a3      	ldrh	r3, [r4, #12]
 8006980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006984:	0719      	lsls	r1, r3, #28
 8006986:	d42c      	bmi.n	80069e2 <__swsetup_r+0x82>
 8006988:	06dd      	lsls	r5, r3, #27
 800698a:	d411      	bmi.n	80069b0 <__swsetup_r+0x50>
 800698c:	2309      	movs	r3, #9
 800698e:	6033      	str	r3, [r6, #0]
 8006990:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006994:	81a3      	strh	r3, [r4, #12]
 8006996:	f04f 30ff 	mov.w	r0, #4294967295
 800699a:	e03e      	b.n	8006a1a <__swsetup_r+0xba>
 800699c:	4b25      	ldr	r3, [pc, #148]	; (8006a34 <__swsetup_r+0xd4>)
 800699e:	429c      	cmp	r4, r3
 80069a0:	d101      	bne.n	80069a6 <__swsetup_r+0x46>
 80069a2:	68ac      	ldr	r4, [r5, #8]
 80069a4:	e7eb      	b.n	800697e <__swsetup_r+0x1e>
 80069a6:	4b24      	ldr	r3, [pc, #144]	; (8006a38 <__swsetup_r+0xd8>)
 80069a8:	429c      	cmp	r4, r3
 80069aa:	bf08      	it	eq
 80069ac:	68ec      	ldreq	r4, [r5, #12]
 80069ae:	e7e6      	b.n	800697e <__swsetup_r+0x1e>
 80069b0:	0758      	lsls	r0, r3, #29
 80069b2:	d512      	bpl.n	80069da <__swsetup_r+0x7a>
 80069b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069b6:	b141      	cbz	r1, 80069ca <__swsetup_r+0x6a>
 80069b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069bc:	4299      	cmp	r1, r3
 80069be:	d002      	beq.n	80069c6 <__swsetup_r+0x66>
 80069c0:	4630      	mov	r0, r6
 80069c2:	f000 fa5b 	bl	8006e7c <_free_r>
 80069c6:	2300      	movs	r3, #0
 80069c8:	6363      	str	r3, [r4, #52]	; 0x34
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069d0:	81a3      	strh	r3, [r4, #12]
 80069d2:	2300      	movs	r3, #0
 80069d4:	6063      	str	r3, [r4, #4]
 80069d6:	6923      	ldr	r3, [r4, #16]
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	89a3      	ldrh	r3, [r4, #12]
 80069dc:	f043 0308 	orr.w	r3, r3, #8
 80069e0:	81a3      	strh	r3, [r4, #12]
 80069e2:	6923      	ldr	r3, [r4, #16]
 80069e4:	b94b      	cbnz	r3, 80069fa <__swsetup_r+0x9a>
 80069e6:	89a3      	ldrh	r3, [r4, #12]
 80069e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f0:	d003      	beq.n	80069fa <__swsetup_r+0x9a>
 80069f2:	4621      	mov	r1, r4
 80069f4:	4630      	mov	r0, r6
 80069f6:	f000 fa01 	bl	8006dfc <__smakebuf_r>
 80069fa:	89a0      	ldrh	r0, [r4, #12]
 80069fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a00:	f010 0301 	ands.w	r3, r0, #1
 8006a04:	d00a      	beq.n	8006a1c <__swsetup_r+0xbc>
 8006a06:	2300      	movs	r3, #0
 8006a08:	60a3      	str	r3, [r4, #8]
 8006a0a:	6963      	ldr	r3, [r4, #20]
 8006a0c:	425b      	negs	r3, r3
 8006a0e:	61a3      	str	r3, [r4, #24]
 8006a10:	6923      	ldr	r3, [r4, #16]
 8006a12:	b943      	cbnz	r3, 8006a26 <__swsetup_r+0xc6>
 8006a14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a18:	d1ba      	bne.n	8006990 <__swsetup_r+0x30>
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	0781      	lsls	r1, r0, #30
 8006a1e:	bf58      	it	pl
 8006a20:	6963      	ldrpl	r3, [r4, #20]
 8006a22:	60a3      	str	r3, [r4, #8]
 8006a24:	e7f4      	b.n	8006a10 <__swsetup_r+0xb0>
 8006a26:	2000      	movs	r0, #0
 8006a28:	e7f7      	b.n	8006a1a <__swsetup_r+0xba>
 8006a2a:	bf00      	nop
 8006a2c:	20000014 	.word	0x20000014
 8006a30:	08007334 	.word	0x08007334
 8006a34:	08007354 	.word	0x08007354
 8006a38:	08007314 	.word	0x08007314

08006a3c <__sflush_r>:
 8006a3c:	898a      	ldrh	r2, [r1, #12]
 8006a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a42:	4605      	mov	r5, r0
 8006a44:	0710      	lsls	r0, r2, #28
 8006a46:	460c      	mov	r4, r1
 8006a48:	d458      	bmi.n	8006afc <__sflush_r+0xc0>
 8006a4a:	684b      	ldr	r3, [r1, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	dc05      	bgt.n	8006a5c <__sflush_r+0x20>
 8006a50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dc02      	bgt.n	8006a5c <__sflush_r+0x20>
 8006a56:	2000      	movs	r0, #0
 8006a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a5e:	2e00      	cmp	r6, #0
 8006a60:	d0f9      	beq.n	8006a56 <__sflush_r+0x1a>
 8006a62:	2300      	movs	r3, #0
 8006a64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a68:	682f      	ldr	r7, [r5, #0]
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	d032      	beq.n	8006ad4 <__sflush_r+0x98>
 8006a6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	075a      	lsls	r2, r3, #29
 8006a74:	d505      	bpl.n	8006a82 <__sflush_r+0x46>
 8006a76:	6863      	ldr	r3, [r4, #4]
 8006a78:	1ac0      	subs	r0, r0, r3
 8006a7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a7c:	b10b      	cbz	r3, 8006a82 <__sflush_r+0x46>
 8006a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a80:	1ac0      	subs	r0, r0, r3
 8006a82:	2300      	movs	r3, #0
 8006a84:	4602      	mov	r2, r0
 8006a86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a88:	6a21      	ldr	r1, [r4, #32]
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	47b0      	blx	r6
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	d106      	bne.n	8006aa2 <__sflush_r+0x66>
 8006a94:	6829      	ldr	r1, [r5, #0]
 8006a96:	291d      	cmp	r1, #29
 8006a98:	d82c      	bhi.n	8006af4 <__sflush_r+0xb8>
 8006a9a:	4a2a      	ldr	r2, [pc, #168]	; (8006b44 <__sflush_r+0x108>)
 8006a9c:	40ca      	lsrs	r2, r1
 8006a9e:	07d6      	lsls	r6, r2, #31
 8006aa0:	d528      	bpl.n	8006af4 <__sflush_r+0xb8>
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	6062      	str	r2, [r4, #4]
 8006aa6:	04d9      	lsls	r1, r3, #19
 8006aa8:	6922      	ldr	r2, [r4, #16]
 8006aaa:	6022      	str	r2, [r4, #0]
 8006aac:	d504      	bpl.n	8006ab8 <__sflush_r+0x7c>
 8006aae:	1c42      	adds	r2, r0, #1
 8006ab0:	d101      	bne.n	8006ab6 <__sflush_r+0x7a>
 8006ab2:	682b      	ldr	r3, [r5, #0]
 8006ab4:	b903      	cbnz	r3, 8006ab8 <__sflush_r+0x7c>
 8006ab6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aba:	602f      	str	r7, [r5, #0]
 8006abc:	2900      	cmp	r1, #0
 8006abe:	d0ca      	beq.n	8006a56 <__sflush_r+0x1a>
 8006ac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ac4:	4299      	cmp	r1, r3
 8006ac6:	d002      	beq.n	8006ace <__sflush_r+0x92>
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 f9d7 	bl	8006e7c <_free_r>
 8006ace:	2000      	movs	r0, #0
 8006ad0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ad2:	e7c1      	b.n	8006a58 <__sflush_r+0x1c>
 8006ad4:	6a21      	ldr	r1, [r4, #32]
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4628      	mov	r0, r5
 8006ada:	47b0      	blx	r6
 8006adc:	1c41      	adds	r1, r0, #1
 8006ade:	d1c7      	bne.n	8006a70 <__sflush_r+0x34>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0c4      	beq.n	8006a70 <__sflush_r+0x34>
 8006ae6:	2b1d      	cmp	r3, #29
 8006ae8:	d001      	beq.n	8006aee <__sflush_r+0xb2>
 8006aea:	2b16      	cmp	r3, #22
 8006aec:	d101      	bne.n	8006af2 <__sflush_r+0xb6>
 8006aee:	602f      	str	r7, [r5, #0]
 8006af0:	e7b1      	b.n	8006a56 <__sflush_r+0x1a>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af8:	81a3      	strh	r3, [r4, #12]
 8006afa:	e7ad      	b.n	8006a58 <__sflush_r+0x1c>
 8006afc:	690f      	ldr	r7, [r1, #16]
 8006afe:	2f00      	cmp	r7, #0
 8006b00:	d0a9      	beq.n	8006a56 <__sflush_r+0x1a>
 8006b02:	0793      	lsls	r3, r2, #30
 8006b04:	680e      	ldr	r6, [r1, #0]
 8006b06:	bf08      	it	eq
 8006b08:	694b      	ldreq	r3, [r1, #20]
 8006b0a:	600f      	str	r7, [r1, #0]
 8006b0c:	bf18      	it	ne
 8006b0e:	2300      	movne	r3, #0
 8006b10:	eba6 0807 	sub.w	r8, r6, r7
 8006b14:	608b      	str	r3, [r1, #8]
 8006b16:	f1b8 0f00 	cmp.w	r8, #0
 8006b1a:	dd9c      	ble.n	8006a56 <__sflush_r+0x1a>
 8006b1c:	6a21      	ldr	r1, [r4, #32]
 8006b1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b20:	4643      	mov	r3, r8
 8006b22:	463a      	mov	r2, r7
 8006b24:	4628      	mov	r0, r5
 8006b26:	47b0      	blx	r6
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	dc06      	bgt.n	8006b3a <__sflush_r+0xfe>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	e78e      	b.n	8006a58 <__sflush_r+0x1c>
 8006b3a:	4407      	add	r7, r0
 8006b3c:	eba8 0800 	sub.w	r8, r8, r0
 8006b40:	e7e9      	b.n	8006b16 <__sflush_r+0xda>
 8006b42:	bf00      	nop
 8006b44:	20400001 	.word	0x20400001

08006b48 <_fflush_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	690b      	ldr	r3, [r1, #16]
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	b913      	cbnz	r3, 8006b58 <_fflush_r+0x10>
 8006b52:	2500      	movs	r5, #0
 8006b54:	4628      	mov	r0, r5
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	b118      	cbz	r0, 8006b62 <_fflush_r+0x1a>
 8006b5a:	6983      	ldr	r3, [r0, #24]
 8006b5c:	b90b      	cbnz	r3, 8006b62 <_fflush_r+0x1a>
 8006b5e:	f000 f887 	bl	8006c70 <__sinit>
 8006b62:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <_fflush_r+0x6c>)
 8006b64:	429c      	cmp	r4, r3
 8006b66:	d11b      	bne.n	8006ba0 <_fflush_r+0x58>
 8006b68:	686c      	ldr	r4, [r5, #4]
 8006b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0ef      	beq.n	8006b52 <_fflush_r+0xa>
 8006b72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b74:	07d0      	lsls	r0, r2, #31
 8006b76:	d404      	bmi.n	8006b82 <_fflush_r+0x3a>
 8006b78:	0599      	lsls	r1, r3, #22
 8006b7a:	d402      	bmi.n	8006b82 <_fflush_r+0x3a>
 8006b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b7e:	f000 f915 	bl	8006dac <__retarget_lock_acquire_recursive>
 8006b82:	4628      	mov	r0, r5
 8006b84:	4621      	mov	r1, r4
 8006b86:	f7ff ff59 	bl	8006a3c <__sflush_r>
 8006b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b8c:	07da      	lsls	r2, r3, #31
 8006b8e:	4605      	mov	r5, r0
 8006b90:	d4e0      	bmi.n	8006b54 <_fflush_r+0xc>
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	059b      	lsls	r3, r3, #22
 8006b96:	d4dd      	bmi.n	8006b54 <_fflush_r+0xc>
 8006b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b9a:	f000 f908 	bl	8006dae <__retarget_lock_release_recursive>
 8006b9e:	e7d9      	b.n	8006b54 <_fflush_r+0xc>
 8006ba0:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <_fflush_r+0x70>)
 8006ba2:	429c      	cmp	r4, r3
 8006ba4:	d101      	bne.n	8006baa <_fflush_r+0x62>
 8006ba6:	68ac      	ldr	r4, [r5, #8]
 8006ba8:	e7df      	b.n	8006b6a <_fflush_r+0x22>
 8006baa:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <_fflush_r+0x74>)
 8006bac:	429c      	cmp	r4, r3
 8006bae:	bf08      	it	eq
 8006bb0:	68ec      	ldreq	r4, [r5, #12]
 8006bb2:	e7da      	b.n	8006b6a <_fflush_r+0x22>
 8006bb4:	08007334 	.word	0x08007334
 8006bb8:	08007354 	.word	0x08007354
 8006bbc:	08007314 	.word	0x08007314

08006bc0 <std>:
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	b510      	push	{r4, lr}
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8006bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bce:	6083      	str	r3, [r0, #8]
 8006bd0:	8181      	strh	r1, [r0, #12]
 8006bd2:	6643      	str	r3, [r0, #100]	; 0x64
 8006bd4:	81c2      	strh	r2, [r0, #14]
 8006bd6:	6183      	str	r3, [r0, #24]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	2208      	movs	r2, #8
 8006bdc:	305c      	adds	r0, #92	; 0x5c
 8006bde:	f7ff fdef 	bl	80067c0 <memset>
 8006be2:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <std+0x38>)
 8006be4:	6263      	str	r3, [r4, #36]	; 0x24
 8006be6:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <std+0x3c>)
 8006be8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <std+0x40>)
 8006bec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bee:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <std+0x44>)
 8006bf0:	6224      	str	r4, [r4, #32]
 8006bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	bf00      	nop
 8006bf8:	0800705d 	.word	0x0800705d
 8006bfc:	0800707f 	.word	0x0800707f
 8006c00:	080070b7 	.word	0x080070b7
 8006c04:	080070db 	.word	0x080070db

08006c08 <_cleanup_r>:
 8006c08:	4901      	ldr	r1, [pc, #4]	; (8006c10 <_cleanup_r+0x8>)
 8006c0a:	f000 b8af 	b.w	8006d6c <_fwalk_reent>
 8006c0e:	bf00      	nop
 8006c10:	08006b49 	.word	0x08006b49

08006c14 <__sfmoreglue>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	2268      	movs	r2, #104	; 0x68
 8006c18:	1e4d      	subs	r5, r1, #1
 8006c1a:	4355      	muls	r5, r2
 8006c1c:	460e      	mov	r6, r1
 8006c1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c22:	f000 f997 	bl	8006f54 <_malloc_r>
 8006c26:	4604      	mov	r4, r0
 8006c28:	b140      	cbz	r0, 8006c3c <__sfmoreglue+0x28>
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	e9c0 1600 	strd	r1, r6, [r0]
 8006c30:	300c      	adds	r0, #12
 8006c32:	60a0      	str	r0, [r4, #8]
 8006c34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c38:	f7ff fdc2 	bl	80067c0 <memset>
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	bd70      	pop	{r4, r5, r6, pc}

08006c40 <__sfp_lock_acquire>:
 8006c40:	4801      	ldr	r0, [pc, #4]	; (8006c48 <__sfp_lock_acquire+0x8>)
 8006c42:	f000 b8b3 	b.w	8006dac <__retarget_lock_acquire_recursive>
 8006c46:	bf00      	nop
 8006c48:	20014504 	.word	0x20014504

08006c4c <__sfp_lock_release>:
 8006c4c:	4801      	ldr	r0, [pc, #4]	; (8006c54 <__sfp_lock_release+0x8>)
 8006c4e:	f000 b8ae 	b.w	8006dae <__retarget_lock_release_recursive>
 8006c52:	bf00      	nop
 8006c54:	20014504 	.word	0x20014504

08006c58 <__sinit_lock_acquire>:
 8006c58:	4801      	ldr	r0, [pc, #4]	; (8006c60 <__sinit_lock_acquire+0x8>)
 8006c5a:	f000 b8a7 	b.w	8006dac <__retarget_lock_acquire_recursive>
 8006c5e:	bf00      	nop
 8006c60:	20014505 	.word	0x20014505

08006c64 <__sinit_lock_release>:
 8006c64:	4801      	ldr	r0, [pc, #4]	; (8006c6c <__sinit_lock_release+0x8>)
 8006c66:	f000 b8a2 	b.w	8006dae <__retarget_lock_release_recursive>
 8006c6a:	bf00      	nop
 8006c6c:	20014505 	.word	0x20014505

08006c70 <__sinit>:
 8006c70:	b510      	push	{r4, lr}
 8006c72:	4604      	mov	r4, r0
 8006c74:	f7ff fff0 	bl	8006c58 <__sinit_lock_acquire>
 8006c78:	69a3      	ldr	r3, [r4, #24]
 8006c7a:	b11b      	cbz	r3, 8006c84 <__sinit+0x14>
 8006c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c80:	f7ff bff0 	b.w	8006c64 <__sinit_lock_release>
 8006c84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c88:	6523      	str	r3, [r4, #80]	; 0x50
 8006c8a:	4b13      	ldr	r3, [pc, #76]	; (8006cd8 <__sinit+0x68>)
 8006c8c:	4a13      	ldr	r2, [pc, #76]	; (8006cdc <__sinit+0x6c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c92:	42a3      	cmp	r3, r4
 8006c94:	bf04      	itt	eq
 8006c96:	2301      	moveq	r3, #1
 8006c98:	61a3      	streq	r3, [r4, #24]
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 f820 	bl	8006ce0 <__sfp>
 8006ca0:	6060      	str	r0, [r4, #4]
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 f81c 	bl	8006ce0 <__sfp>
 8006ca8:	60a0      	str	r0, [r4, #8]
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 f818 	bl	8006ce0 <__sfp>
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	60e0      	str	r0, [r4, #12]
 8006cb4:	2104      	movs	r1, #4
 8006cb6:	6860      	ldr	r0, [r4, #4]
 8006cb8:	f7ff ff82 	bl	8006bc0 <std>
 8006cbc:	68a0      	ldr	r0, [r4, #8]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	2109      	movs	r1, #9
 8006cc2:	f7ff ff7d 	bl	8006bc0 <std>
 8006cc6:	68e0      	ldr	r0, [r4, #12]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	2112      	movs	r1, #18
 8006ccc:	f7ff ff78 	bl	8006bc0 <std>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	61a3      	str	r3, [r4, #24]
 8006cd4:	e7d2      	b.n	8006c7c <__sinit+0xc>
 8006cd6:	bf00      	nop
 8006cd8:	08007310 	.word	0x08007310
 8006cdc:	08006c09 	.word	0x08006c09

08006ce0 <__sfp>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	4607      	mov	r7, r0
 8006ce4:	f7ff ffac 	bl	8006c40 <__sfp_lock_acquire>
 8006ce8:	4b1e      	ldr	r3, [pc, #120]	; (8006d64 <__sfp+0x84>)
 8006cea:	681e      	ldr	r6, [r3, #0]
 8006cec:	69b3      	ldr	r3, [r6, #24]
 8006cee:	b913      	cbnz	r3, 8006cf6 <__sfp+0x16>
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f7ff ffbd 	bl	8006c70 <__sinit>
 8006cf6:	3648      	adds	r6, #72	; 0x48
 8006cf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	d503      	bpl.n	8006d08 <__sfp+0x28>
 8006d00:	6833      	ldr	r3, [r6, #0]
 8006d02:	b30b      	cbz	r3, 8006d48 <__sfp+0x68>
 8006d04:	6836      	ldr	r6, [r6, #0]
 8006d06:	e7f7      	b.n	8006cf8 <__sfp+0x18>
 8006d08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d0c:	b9d5      	cbnz	r5, 8006d44 <__sfp+0x64>
 8006d0e:	4b16      	ldr	r3, [pc, #88]	; (8006d68 <__sfp+0x88>)
 8006d10:	60e3      	str	r3, [r4, #12]
 8006d12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d16:	6665      	str	r5, [r4, #100]	; 0x64
 8006d18:	f000 f847 	bl	8006daa <__retarget_lock_init_recursive>
 8006d1c:	f7ff ff96 	bl	8006c4c <__sfp_lock_release>
 8006d20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d28:	6025      	str	r5, [r4, #0]
 8006d2a:	61a5      	str	r5, [r4, #24]
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	4629      	mov	r1, r5
 8006d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d34:	f7ff fd44 	bl	80067c0 <memset>
 8006d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d40:	4620      	mov	r0, r4
 8006d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d44:	3468      	adds	r4, #104	; 0x68
 8006d46:	e7d9      	b.n	8006cfc <__sfp+0x1c>
 8006d48:	2104      	movs	r1, #4
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	f7ff ff62 	bl	8006c14 <__sfmoreglue>
 8006d50:	4604      	mov	r4, r0
 8006d52:	6030      	str	r0, [r6, #0]
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d1d5      	bne.n	8006d04 <__sfp+0x24>
 8006d58:	f7ff ff78 	bl	8006c4c <__sfp_lock_release>
 8006d5c:	230c      	movs	r3, #12
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	e7ee      	b.n	8006d40 <__sfp+0x60>
 8006d62:	bf00      	nop
 8006d64:	08007310 	.word	0x08007310
 8006d68:	ffff0001 	.word	0xffff0001

08006d6c <_fwalk_reent>:
 8006d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d70:	4606      	mov	r6, r0
 8006d72:	4688      	mov	r8, r1
 8006d74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d78:	2700      	movs	r7, #0
 8006d7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d7e:	f1b9 0901 	subs.w	r9, r9, #1
 8006d82:	d505      	bpl.n	8006d90 <_fwalk_reent+0x24>
 8006d84:	6824      	ldr	r4, [r4, #0]
 8006d86:	2c00      	cmp	r4, #0
 8006d88:	d1f7      	bne.n	8006d7a <_fwalk_reent+0xe>
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d90:	89ab      	ldrh	r3, [r5, #12]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d907      	bls.n	8006da6 <_fwalk_reent+0x3a>
 8006d96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	d003      	beq.n	8006da6 <_fwalk_reent+0x3a>
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4630      	mov	r0, r6
 8006da2:	47c0      	blx	r8
 8006da4:	4307      	orrs	r7, r0
 8006da6:	3568      	adds	r5, #104	; 0x68
 8006da8:	e7e9      	b.n	8006d7e <_fwalk_reent+0x12>

08006daa <__retarget_lock_init_recursive>:
 8006daa:	4770      	bx	lr

08006dac <__retarget_lock_acquire_recursive>:
 8006dac:	4770      	bx	lr

08006dae <__retarget_lock_release_recursive>:
 8006dae:	4770      	bx	lr

08006db0 <__swhatbuf_r>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	460e      	mov	r6, r1
 8006db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db8:	2900      	cmp	r1, #0
 8006dba:	b096      	sub	sp, #88	; 0x58
 8006dbc:	4614      	mov	r4, r2
 8006dbe:	461d      	mov	r5, r3
 8006dc0:	da08      	bge.n	8006dd4 <__swhatbuf_r+0x24>
 8006dc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	602a      	str	r2, [r5, #0]
 8006dca:	061a      	lsls	r2, r3, #24
 8006dcc:	d410      	bmi.n	8006df0 <__swhatbuf_r+0x40>
 8006dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dd2:	e00e      	b.n	8006df2 <__swhatbuf_r+0x42>
 8006dd4:	466a      	mov	r2, sp
 8006dd6:	f000 f995 	bl	8007104 <_fstat_r>
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	dbf1      	blt.n	8006dc2 <__swhatbuf_r+0x12>
 8006dde:	9a01      	ldr	r2, [sp, #4]
 8006de0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006de4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006de8:	425a      	negs	r2, r3
 8006dea:	415a      	adcs	r2, r3
 8006dec:	602a      	str	r2, [r5, #0]
 8006dee:	e7ee      	b.n	8006dce <__swhatbuf_r+0x1e>
 8006df0:	2340      	movs	r3, #64	; 0x40
 8006df2:	2000      	movs	r0, #0
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	b016      	add	sp, #88	; 0x58
 8006df8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006dfc <__smakebuf_r>:
 8006dfc:	898b      	ldrh	r3, [r1, #12]
 8006dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e00:	079d      	lsls	r5, r3, #30
 8006e02:	4606      	mov	r6, r0
 8006e04:	460c      	mov	r4, r1
 8006e06:	d507      	bpl.n	8006e18 <__smakebuf_r+0x1c>
 8006e08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	6123      	str	r3, [r4, #16]
 8006e10:	2301      	movs	r3, #1
 8006e12:	6163      	str	r3, [r4, #20]
 8006e14:	b002      	add	sp, #8
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	ab01      	add	r3, sp, #4
 8006e1a:	466a      	mov	r2, sp
 8006e1c:	f7ff ffc8 	bl	8006db0 <__swhatbuf_r>
 8006e20:	9900      	ldr	r1, [sp, #0]
 8006e22:	4605      	mov	r5, r0
 8006e24:	4630      	mov	r0, r6
 8006e26:	f000 f895 	bl	8006f54 <_malloc_r>
 8006e2a:	b948      	cbnz	r0, 8006e40 <__smakebuf_r+0x44>
 8006e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e30:	059a      	lsls	r2, r3, #22
 8006e32:	d4ef      	bmi.n	8006e14 <__smakebuf_r+0x18>
 8006e34:	f023 0303 	bic.w	r3, r3, #3
 8006e38:	f043 0302 	orr.w	r3, r3, #2
 8006e3c:	81a3      	strh	r3, [r4, #12]
 8006e3e:	e7e3      	b.n	8006e08 <__smakebuf_r+0xc>
 8006e40:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <__smakebuf_r+0x7c>)
 8006e42:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	6020      	str	r0, [r4, #0]
 8006e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4c:	81a3      	strh	r3, [r4, #12]
 8006e4e:	9b00      	ldr	r3, [sp, #0]
 8006e50:	6163      	str	r3, [r4, #20]
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	6120      	str	r0, [r4, #16]
 8006e56:	b15b      	cbz	r3, 8006e70 <__smakebuf_r+0x74>
 8006e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f000 f963 	bl	8007128 <_isatty_r>
 8006e62:	b128      	cbz	r0, 8006e70 <__smakebuf_r+0x74>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	f043 0301 	orr.w	r3, r3, #1
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	89a0      	ldrh	r0, [r4, #12]
 8006e72:	4305      	orrs	r5, r0
 8006e74:	81a5      	strh	r5, [r4, #12]
 8006e76:	e7cd      	b.n	8006e14 <__smakebuf_r+0x18>
 8006e78:	08006c09 	.word	0x08006c09

08006e7c <_free_r>:
 8006e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e7e:	2900      	cmp	r1, #0
 8006e80:	d044      	beq.n	8006f0c <_free_r+0x90>
 8006e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e86:	9001      	str	r0, [sp, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e8e:	bfb8      	it	lt
 8006e90:	18e4      	addlt	r4, r4, r3
 8006e92:	f000 f96b 	bl	800716c <__malloc_lock>
 8006e96:	4a1e      	ldr	r2, [pc, #120]	; (8006f10 <_free_r+0x94>)
 8006e98:	9801      	ldr	r0, [sp, #4]
 8006e9a:	6813      	ldr	r3, [r2, #0]
 8006e9c:	b933      	cbnz	r3, 8006eac <_free_r+0x30>
 8006e9e:	6063      	str	r3, [r4, #4]
 8006ea0:	6014      	str	r4, [r2, #0]
 8006ea2:	b003      	add	sp, #12
 8006ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ea8:	f000 b966 	b.w	8007178 <__malloc_unlock>
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	d908      	bls.n	8006ec2 <_free_r+0x46>
 8006eb0:	6825      	ldr	r5, [r4, #0]
 8006eb2:	1961      	adds	r1, r4, r5
 8006eb4:	428b      	cmp	r3, r1
 8006eb6:	bf01      	itttt	eq
 8006eb8:	6819      	ldreq	r1, [r3, #0]
 8006eba:	685b      	ldreq	r3, [r3, #4]
 8006ebc:	1949      	addeq	r1, r1, r5
 8006ebe:	6021      	streq	r1, [r4, #0]
 8006ec0:	e7ed      	b.n	8006e9e <_free_r+0x22>
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	b10b      	cbz	r3, 8006ecc <_free_r+0x50>
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	d9fa      	bls.n	8006ec2 <_free_r+0x46>
 8006ecc:	6811      	ldr	r1, [r2, #0]
 8006ece:	1855      	adds	r5, r2, r1
 8006ed0:	42a5      	cmp	r5, r4
 8006ed2:	d10b      	bne.n	8006eec <_free_r+0x70>
 8006ed4:	6824      	ldr	r4, [r4, #0]
 8006ed6:	4421      	add	r1, r4
 8006ed8:	1854      	adds	r4, r2, r1
 8006eda:	42a3      	cmp	r3, r4
 8006edc:	6011      	str	r1, [r2, #0]
 8006ede:	d1e0      	bne.n	8006ea2 <_free_r+0x26>
 8006ee0:	681c      	ldr	r4, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	6053      	str	r3, [r2, #4]
 8006ee6:	4421      	add	r1, r4
 8006ee8:	6011      	str	r1, [r2, #0]
 8006eea:	e7da      	b.n	8006ea2 <_free_r+0x26>
 8006eec:	d902      	bls.n	8006ef4 <_free_r+0x78>
 8006eee:	230c      	movs	r3, #12
 8006ef0:	6003      	str	r3, [r0, #0]
 8006ef2:	e7d6      	b.n	8006ea2 <_free_r+0x26>
 8006ef4:	6825      	ldr	r5, [r4, #0]
 8006ef6:	1961      	adds	r1, r4, r5
 8006ef8:	428b      	cmp	r3, r1
 8006efa:	bf04      	itt	eq
 8006efc:	6819      	ldreq	r1, [r3, #0]
 8006efe:	685b      	ldreq	r3, [r3, #4]
 8006f00:	6063      	str	r3, [r4, #4]
 8006f02:	bf04      	itt	eq
 8006f04:	1949      	addeq	r1, r1, r5
 8006f06:	6021      	streq	r1, [r4, #0]
 8006f08:	6054      	str	r4, [r2, #4]
 8006f0a:	e7ca      	b.n	8006ea2 <_free_r+0x26>
 8006f0c:	b003      	add	sp, #12
 8006f0e:	bd30      	pop	{r4, r5, pc}
 8006f10:	20014508 	.word	0x20014508

08006f14 <sbrk_aligned>:
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	4e0e      	ldr	r6, [pc, #56]	; (8006f50 <sbrk_aligned+0x3c>)
 8006f18:	460c      	mov	r4, r1
 8006f1a:	6831      	ldr	r1, [r6, #0]
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	b911      	cbnz	r1, 8006f26 <sbrk_aligned+0x12>
 8006f20:	f000 f88c 	bl	800703c <_sbrk_r>
 8006f24:	6030      	str	r0, [r6, #0]
 8006f26:	4621      	mov	r1, r4
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f000 f887 	bl	800703c <_sbrk_r>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d00a      	beq.n	8006f48 <sbrk_aligned+0x34>
 8006f32:	1cc4      	adds	r4, r0, #3
 8006f34:	f024 0403 	bic.w	r4, r4, #3
 8006f38:	42a0      	cmp	r0, r4
 8006f3a:	d007      	beq.n	8006f4c <sbrk_aligned+0x38>
 8006f3c:	1a21      	subs	r1, r4, r0
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f000 f87c 	bl	800703c <_sbrk_r>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d101      	bne.n	8006f4c <sbrk_aligned+0x38>
 8006f48:	f04f 34ff 	mov.w	r4, #4294967295
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	bd70      	pop	{r4, r5, r6, pc}
 8006f50:	2001450c 	.word	0x2001450c

08006f54 <_malloc_r>:
 8006f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f58:	1ccd      	adds	r5, r1, #3
 8006f5a:	f025 0503 	bic.w	r5, r5, #3
 8006f5e:	3508      	adds	r5, #8
 8006f60:	2d0c      	cmp	r5, #12
 8006f62:	bf38      	it	cc
 8006f64:	250c      	movcc	r5, #12
 8006f66:	2d00      	cmp	r5, #0
 8006f68:	4607      	mov	r7, r0
 8006f6a:	db01      	blt.n	8006f70 <_malloc_r+0x1c>
 8006f6c:	42a9      	cmp	r1, r5
 8006f6e:	d905      	bls.n	8006f7c <_malloc_r+0x28>
 8006f70:	230c      	movs	r3, #12
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	2600      	movs	r6, #0
 8006f76:	4630      	mov	r0, r6
 8006f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7c:	4e2e      	ldr	r6, [pc, #184]	; (8007038 <_malloc_r+0xe4>)
 8006f7e:	f000 f8f5 	bl	800716c <__malloc_lock>
 8006f82:	6833      	ldr	r3, [r6, #0]
 8006f84:	461c      	mov	r4, r3
 8006f86:	bb34      	cbnz	r4, 8006fd6 <_malloc_r+0x82>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	f7ff ffc2 	bl	8006f14 <sbrk_aligned>
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	4604      	mov	r4, r0
 8006f94:	d14d      	bne.n	8007032 <_malloc_r+0xde>
 8006f96:	6834      	ldr	r4, [r6, #0]
 8006f98:	4626      	mov	r6, r4
 8006f9a:	2e00      	cmp	r6, #0
 8006f9c:	d140      	bne.n	8007020 <_malloc_r+0xcc>
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	eb04 0803 	add.w	r8, r4, r3
 8006fa8:	f000 f848 	bl	800703c <_sbrk_r>
 8006fac:	4580      	cmp	r8, r0
 8006fae:	d13a      	bne.n	8007026 <_malloc_r+0xd2>
 8006fb0:	6821      	ldr	r1, [r4, #0]
 8006fb2:	3503      	adds	r5, #3
 8006fb4:	1a6d      	subs	r5, r5, r1
 8006fb6:	f025 0503 	bic.w	r5, r5, #3
 8006fba:	3508      	adds	r5, #8
 8006fbc:	2d0c      	cmp	r5, #12
 8006fbe:	bf38      	it	cc
 8006fc0:	250c      	movcc	r5, #12
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	f7ff ffa5 	bl	8006f14 <sbrk_aligned>
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d02b      	beq.n	8007026 <_malloc_r+0xd2>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	442b      	add	r3, r5
 8006fd2:	6023      	str	r3, [r4, #0]
 8006fd4:	e00e      	b.n	8006ff4 <_malloc_r+0xa0>
 8006fd6:	6822      	ldr	r2, [r4, #0]
 8006fd8:	1b52      	subs	r2, r2, r5
 8006fda:	d41e      	bmi.n	800701a <_malloc_r+0xc6>
 8006fdc:	2a0b      	cmp	r2, #11
 8006fde:	d916      	bls.n	800700e <_malloc_r+0xba>
 8006fe0:	1961      	adds	r1, r4, r5
 8006fe2:	42a3      	cmp	r3, r4
 8006fe4:	6025      	str	r5, [r4, #0]
 8006fe6:	bf18      	it	ne
 8006fe8:	6059      	strne	r1, [r3, #4]
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	bf08      	it	eq
 8006fee:	6031      	streq	r1, [r6, #0]
 8006ff0:	5162      	str	r2, [r4, r5]
 8006ff2:	604b      	str	r3, [r1, #4]
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f104 060b 	add.w	r6, r4, #11
 8006ffa:	f000 f8bd 	bl	8007178 <__malloc_unlock>
 8006ffe:	f026 0607 	bic.w	r6, r6, #7
 8007002:	1d23      	adds	r3, r4, #4
 8007004:	1af2      	subs	r2, r6, r3
 8007006:	d0b6      	beq.n	8006f76 <_malloc_r+0x22>
 8007008:	1b9b      	subs	r3, r3, r6
 800700a:	50a3      	str	r3, [r4, r2]
 800700c:	e7b3      	b.n	8006f76 <_malloc_r+0x22>
 800700e:	6862      	ldr	r2, [r4, #4]
 8007010:	42a3      	cmp	r3, r4
 8007012:	bf0c      	ite	eq
 8007014:	6032      	streq	r2, [r6, #0]
 8007016:	605a      	strne	r2, [r3, #4]
 8007018:	e7ec      	b.n	8006ff4 <_malloc_r+0xa0>
 800701a:	4623      	mov	r3, r4
 800701c:	6864      	ldr	r4, [r4, #4]
 800701e:	e7b2      	b.n	8006f86 <_malloc_r+0x32>
 8007020:	4634      	mov	r4, r6
 8007022:	6876      	ldr	r6, [r6, #4]
 8007024:	e7b9      	b.n	8006f9a <_malloc_r+0x46>
 8007026:	230c      	movs	r3, #12
 8007028:	603b      	str	r3, [r7, #0]
 800702a:	4638      	mov	r0, r7
 800702c:	f000 f8a4 	bl	8007178 <__malloc_unlock>
 8007030:	e7a1      	b.n	8006f76 <_malloc_r+0x22>
 8007032:	6025      	str	r5, [r4, #0]
 8007034:	e7de      	b.n	8006ff4 <_malloc_r+0xa0>
 8007036:	bf00      	nop
 8007038:	20014508 	.word	0x20014508

0800703c <_sbrk_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d06      	ldr	r5, [pc, #24]	; (8007058 <_sbrk_r+0x1c>)
 8007040:	2300      	movs	r3, #0
 8007042:	4604      	mov	r4, r0
 8007044:	4608      	mov	r0, r1
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	f7f9 fdea 	bl	8000c20 <_sbrk>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_sbrk_r+0x1a>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_sbrk_r+0x1a>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20014510 	.word	0x20014510

0800705c <__sread>:
 800705c:	b510      	push	{r4, lr}
 800705e:	460c      	mov	r4, r1
 8007060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007064:	f000 f88e 	bl	8007184 <_read_r>
 8007068:	2800      	cmp	r0, #0
 800706a:	bfab      	itete	ge
 800706c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800706e:	89a3      	ldrhlt	r3, [r4, #12]
 8007070:	181b      	addge	r3, r3, r0
 8007072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007076:	bfac      	ite	ge
 8007078:	6563      	strge	r3, [r4, #84]	; 0x54
 800707a:	81a3      	strhlt	r3, [r4, #12]
 800707c:	bd10      	pop	{r4, pc}

0800707e <__swrite>:
 800707e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007082:	461f      	mov	r7, r3
 8007084:	898b      	ldrh	r3, [r1, #12]
 8007086:	05db      	lsls	r3, r3, #23
 8007088:	4605      	mov	r5, r0
 800708a:	460c      	mov	r4, r1
 800708c:	4616      	mov	r6, r2
 800708e:	d505      	bpl.n	800709c <__swrite+0x1e>
 8007090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007094:	2302      	movs	r3, #2
 8007096:	2200      	movs	r2, #0
 8007098:	f000 f856 	bl	8007148 <_lseek_r>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	4632      	mov	r2, r6
 80070aa:	463b      	mov	r3, r7
 80070ac:	4628      	mov	r0, r5
 80070ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b2:	f7ff bb2b 	b.w	800670c <_write_r>

080070b6 <__sseek>:
 80070b6:	b510      	push	{r4, lr}
 80070b8:	460c      	mov	r4, r1
 80070ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070be:	f000 f843 	bl	8007148 <_lseek_r>
 80070c2:	1c43      	adds	r3, r0, #1
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	bf15      	itete	ne
 80070c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80070ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070d2:	81a3      	strheq	r3, [r4, #12]
 80070d4:	bf18      	it	ne
 80070d6:	81a3      	strhne	r3, [r4, #12]
 80070d8:	bd10      	pop	{r4, pc}

080070da <__sclose>:
 80070da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070de:	f000 b801 	b.w	80070e4 <_close_r>
	...

080070e4 <_close_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4d06      	ldr	r5, [pc, #24]	; (8007100 <_close_r+0x1c>)
 80070e8:	2300      	movs	r3, #0
 80070ea:	4604      	mov	r4, r0
 80070ec:	4608      	mov	r0, r1
 80070ee:	602b      	str	r3, [r5, #0]
 80070f0:	f7f9 fd61 	bl	8000bb6 <_close>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_close_r+0x1a>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_close_r+0x1a>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	20014510 	.word	0x20014510

08007104 <_fstat_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4d07      	ldr	r5, [pc, #28]	; (8007124 <_fstat_r+0x20>)
 8007108:	2300      	movs	r3, #0
 800710a:	4604      	mov	r4, r0
 800710c:	4608      	mov	r0, r1
 800710e:	4611      	mov	r1, r2
 8007110:	602b      	str	r3, [r5, #0]
 8007112:	f7f9 fd5c 	bl	8000bce <_fstat>
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	d102      	bne.n	8007120 <_fstat_r+0x1c>
 800711a:	682b      	ldr	r3, [r5, #0]
 800711c:	b103      	cbz	r3, 8007120 <_fstat_r+0x1c>
 800711e:	6023      	str	r3, [r4, #0]
 8007120:	bd38      	pop	{r3, r4, r5, pc}
 8007122:	bf00      	nop
 8007124:	20014510 	.word	0x20014510

08007128 <_isatty_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d06      	ldr	r5, [pc, #24]	; (8007144 <_isatty_r+0x1c>)
 800712c:	2300      	movs	r3, #0
 800712e:	4604      	mov	r4, r0
 8007130:	4608      	mov	r0, r1
 8007132:	602b      	str	r3, [r5, #0]
 8007134:	f7f9 fd5b 	bl	8000bee <_isatty>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_isatty_r+0x1a>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b103      	cbz	r3, 8007142 <_isatty_r+0x1a>
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	20014510 	.word	0x20014510

08007148 <_lseek_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d07      	ldr	r5, [pc, #28]	; (8007168 <_lseek_r+0x20>)
 800714c:	4604      	mov	r4, r0
 800714e:	4608      	mov	r0, r1
 8007150:	4611      	mov	r1, r2
 8007152:	2200      	movs	r2, #0
 8007154:	602a      	str	r2, [r5, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	f7f9 fd54 	bl	8000c04 <_lseek>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d102      	bne.n	8007166 <_lseek_r+0x1e>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b103      	cbz	r3, 8007166 <_lseek_r+0x1e>
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	20014510 	.word	0x20014510

0800716c <__malloc_lock>:
 800716c:	4801      	ldr	r0, [pc, #4]	; (8007174 <__malloc_lock+0x8>)
 800716e:	f7ff be1d 	b.w	8006dac <__retarget_lock_acquire_recursive>
 8007172:	bf00      	nop
 8007174:	20014503 	.word	0x20014503

08007178 <__malloc_unlock>:
 8007178:	4801      	ldr	r0, [pc, #4]	; (8007180 <__malloc_unlock+0x8>)
 800717a:	f7ff be18 	b.w	8006dae <__retarget_lock_release_recursive>
 800717e:	bf00      	nop
 8007180:	20014503 	.word	0x20014503

08007184 <_read_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4d07      	ldr	r5, [pc, #28]	; (80071a4 <_read_r+0x20>)
 8007188:	4604      	mov	r4, r0
 800718a:	4608      	mov	r0, r1
 800718c:	4611      	mov	r1, r2
 800718e:	2200      	movs	r2, #0
 8007190:	602a      	str	r2, [r5, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	f7f9 fcf2 	bl	8000b7c <_read>
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	d102      	bne.n	80071a2 <_read_r+0x1e>
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	b103      	cbz	r3, 80071a2 <_read_r+0x1e>
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	bd38      	pop	{r3, r4, r5, pc}
 80071a4:	20014510 	.word	0x20014510

080071a8 <_init>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr

080071b4 <_fini>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	bf00      	nop
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr
