
002_LED_toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800cbe8  0800cbe8  0001cbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd40  0800cd40  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd40  0800cd40  0001cd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd48  0800cd48  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd48  0800cd48  0001cd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd4c  0800cd4c  0001cd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800cd50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014c24  200000a0  0800cdf0  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014cc4  0800cdf0  00024cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000239b4  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005587  00000000  00000000  00043a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db8  00000000  00000000  00049010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b40  00000000  00000000  0004adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b098  00000000  00000000  0004c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000247ca  00000000  00000000  000679a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3b68  00000000  00000000  0008c16a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012fcd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e78  00000000  00000000  0012fd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cbd0 	.word	0x0800cbd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	0800cbd0 	.word	0x0800cbd0

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012f10 	.word	0x20012f10

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f103 0208 	add.w	r2, r3, #8
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f04f 32ff 	mov.w	r2, #4294967295
 8000590:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f103 0208 	add.w	r2, r3, #8
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f103 0208 	add.w	r2, r3, #8
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005d2:	b480      	push	{r7}
 80005d4:	b085      	sub	sp, #20
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	689a      	ldr	r2, [r3, #8]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800061a:	b480      	push	{r7}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000630:	d103      	bne.n	800063a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	691b      	ldr	r3, [r3, #16]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	e00c      	b.n	8000654 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3308      	adds	r3, #8
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	e002      	b.n	8000648 <vListInsert+0x2e>
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	429a      	cmp	r2, r3
 8000652:	d2f6      	bcs.n	8000642 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	685a      	ldr	r2, [r3, #4]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	601a      	str	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	6892      	ldr	r2, [r2, #8]
 80006a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	6852      	ldr	r2, [r2, #4]
 80006ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d103      	bne.n	80006c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	1e5a      	subs	r2, r3, #1
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10a      	bne.n	800070a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f8:	f383 8811 	msr	BASEPRI, r3
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	f3bf 8f4f 	dsb	sy
 8000704:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000706:	bf00      	nop
 8000708:	e7fe      	b.n	8000708 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800070a:	f002 f8cb 	bl	80028a4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000716:	68f9      	ldr	r1, [r7, #12]
 8000718:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800071a:	fb01 f303 	mul.w	r3, r1, r3
 800071e:	441a      	add	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2200      	movs	r2, #0
 8000728:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800073a:	3b01      	subs	r3, #1
 800073c:	68f9      	ldr	r1, [r7, #12]
 800073e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000740:	fb01 f303 	mul.w	r3, r1, r3
 8000744:	441a      	add	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	22ff      	movs	r2, #255	; 0xff
 8000756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d114      	bne.n	800078a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	691b      	ldr	r3, [r3, #16]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d01a      	beq.n	800079e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3310      	adds	r3, #16
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f927 	bl	80019c0 <xTaskRemoveFromEventList>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d012      	beq.n	800079e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <xQueueGenericReset+0xcc>)
 800077a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	f3bf 8f4f 	dsb	sy
 8000784:	f3bf 8f6f 	isb	sy
 8000788:	e009      	b.n	800079e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3310      	adds	r3, #16
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fef2 	bl	8000578 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3324      	adds	r3, #36	; 0x24
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff feed 	bl	8000578 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800079e:	f002 f8b1 	bl	8002904 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	e000ed04 	.word	0xe000ed04

080007b0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	4613      	mov	r3, r2
 80007bc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d10a      	bne.n	80007da <xQueueGenericCreate+0x2a>
        __asm volatile
 80007c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c8:	f383 8811 	msr	BASEPRI, r3
 80007cc:	f3bf 8f6f 	isb	sy
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	61bb      	str	r3, [r7, #24]
    }
 80007d6:	bf00      	nop
 80007d8:	e7fe      	b.n	80007d8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	68ba      	ldr	r2, [r7, #8]
 80007de:	fb02 f303 	mul.w	r3, r2, r3
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d006      	beq.n	80007f8 <xQueueGenericCreate+0x48>
 80007ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d101      	bne.n	80007fc <xQueueGenericCreate+0x4c>
 80007f8:	2301      	movs	r3, #1
 80007fa:	e000      	b.n	80007fe <xQueueGenericCreate+0x4e>
 80007fc:	2300      	movs	r3, #0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <xQueueGenericCreate+0x68>
        __asm volatile
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	617b      	str	r3, [r7, #20]
    }
 8000814:	bf00      	nop
 8000816:	e7fe      	b.n	8000816 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800081e:	d90a      	bls.n	8000836 <xQueueGenericCreate+0x86>
        __asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	613b      	str	r3, [r7, #16]
    }
 8000832:	bf00      	nop
 8000834:	e7fe      	b.n	8000834 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	3350      	adds	r3, #80	; 0x50
 800083a:	4618      	mov	r0, r3
 800083c:	f002 f95e 	bl	8002afc <pvPortMalloc>
 8000840:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000842:	6a3b      	ldr	r3, [r7, #32]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00d      	beq.n	8000864 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	3350      	adds	r3, #80	; 0x50
 8000850:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	6a3b      	ldr	r3, [r7, #32]
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4613      	mov	r3, r2
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f000 f805 	bl	800086e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000864:	6a3b      	ldr	r3, [r7, #32]
    }
 8000866:	4618      	mov	r0, r3
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b084      	sub	sp, #16
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d103      	bne.n	800088a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	e002      	b.n	8000890 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800089c:	2101      	movs	r1, #1
 800089e:	69b8      	ldr	r0, [r7, #24]
 80008a0:	f7ff ff1e 	bl	80006e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	78fa      	ldrb	r2, [r7, #3]
 80008a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	68f9      	ldr	r1, [r7, #12]
 80008b2:	2073      	movs	r0, #115	; 0x73
 80008b4:	f003 fcb0 	bl	8004218 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b090      	sub	sp, #64	; 0x40
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80008d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10a      	bne.n	80008f2 <xQueueGenericSend+0x32>
        __asm volatile
 80008dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80008ee:	bf00      	nop
 80008f0:	e7fe      	b.n	80008f0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d103      	bne.n	8000900 <xQueueGenericSend+0x40>
 80008f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <xQueueGenericSend+0x44>
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <xQueueGenericSend+0x46>
 8000904:	2300      	movs	r3, #0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10a      	bne.n	8000920 <xQueueGenericSend+0x60>
        __asm volatile
 800090a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090e:	f383 8811 	msr	BASEPRI, r3
 8000912:	f3bf 8f6f 	isb	sy
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800091c:	bf00      	nop
 800091e:	e7fe      	b.n	800091e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d103      	bne.n	800092e <xQueueGenericSend+0x6e>
 8000926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800092a:	2b01      	cmp	r3, #1
 800092c:	d101      	bne.n	8000932 <xQueueGenericSend+0x72>
 800092e:	2301      	movs	r3, #1
 8000930:	e000      	b.n	8000934 <xQueueGenericSend+0x74>
 8000932:	2300      	movs	r3, #0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10a      	bne.n	800094e <xQueueGenericSend+0x8e>
        __asm volatile
 8000938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093c:	f383 8811 	msr	BASEPRI, r3
 8000940:	f3bf 8f6f 	isb	sy
 8000944:	f3bf 8f4f 	dsb	sy
 8000948:	623b      	str	r3, [r7, #32]
    }
 800094a:	bf00      	nop
 800094c:	e7fe      	b.n	800094c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800094e:	f001 f9d7 	bl	8001d00 <xTaskGetSchedulerState>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <xQueueGenericSend+0x9e>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <xQueueGenericSend+0xa2>
 800095e:	2301      	movs	r3, #1
 8000960:	e000      	b.n	8000964 <xQueueGenericSend+0xa4>
 8000962:	2300      	movs	r3, #0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10a      	bne.n	800097e <xQueueGenericSend+0xbe>
        __asm volatile
 8000968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096c:	f383 8811 	msr	BASEPRI, r3
 8000970:	f3bf 8f6f 	isb	sy
 8000974:	f3bf 8f4f 	dsb	sy
 8000978:	61fb      	str	r3, [r7, #28]
    }
 800097a:	bf00      	nop
 800097c:	e7fe      	b.n	800097c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800097e:	f001 ff91 	bl	80028a4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800098a:	429a      	cmp	r2, r3
 800098c:	d302      	bcc.n	8000994 <xQueueGenericSend+0xd4>
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d136      	bne.n	8000a02 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8000994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000996:	4618      	mov	r0, r3
 8000998:	f004 f9cc 	bl	8004d34 <SEGGER_SYSVIEW_ShrinkId>
 800099c:	68ba      	ldr	r2, [r7, #8]
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	460b      	mov	r3, r1
 80009a6:	4601      	mov	r1, r0
 80009a8:	205a      	movs	r0, #90	; 0x5a
 80009aa:	f003 fcab 	bl	8004304 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	68b9      	ldr	r1, [r7, #8]
 80009b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009b4:	f000 fa78 	bl	8000ea8 <prvCopyDataToQueue>
 80009b8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d010      	beq.n	80009e4 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009c4:	3324      	adds	r3, #36	; 0x24
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fffa 	bl	80019c0 <xTaskRemoveFromEventList>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d013      	beq.n	80009fa <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009d2:	4b4d      	ldr	r3, [pc, #308]	; (8000b08 <xQueueGenericSend+0x248>)
 80009d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	f3bf 8f4f 	dsb	sy
 80009de:	f3bf 8f6f 	isb	sy
 80009e2:	e00a      	b.n	80009fa <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d007      	beq.n	80009fa <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009ea:	4b47      	ldr	r3, [pc, #284]	; (8000b08 <xQueueGenericSend+0x248>)
 80009ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	f3bf 8f4f 	dsb	sy
 80009f6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009fa:	f001 ff83 	bl	8002904 <vPortExitCritical>
                return pdPASS;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e07d      	b.n	8000afe <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d110      	bne.n	8000a2a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a08:	f001 ff7c 	bl	8002904 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f004 f990 	bl	8004d34 <SEGGER_SYSVIEW_ShrinkId>
 8000a14:	68ba      	ldr	r2, [r7, #8]
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	4601      	mov	r1, r0
 8000a20:	205a      	movs	r0, #90	; 0x5a
 8000a22:	f003 fc6f 	bl	8004304 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e069      	b.n	8000afe <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d106      	bne.n	8000a3e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 f829 	bl	8001a8c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a3e:	f001 ff61 	bl	8002904 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a42:	f000 fd71 	bl	8001528 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a46:	f001 ff2d 	bl	80028a4 <vPortEnterCritical>
 8000a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a56:	d103      	bne.n	8000a60 <xQueueGenericSend+0x1a0>
 8000a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d103      	bne.n	8000a76 <xQueueGenericSend+0x1b6>
 8000a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a76:	f001 ff45 	bl	8002904 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a7a:	1d3a      	adds	r2, r7, #4
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f818 	bl	8001ab8 <xTaskCheckForTimeOut>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d124      	bne.n	8000ad8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a90:	f000 fb02 	bl	8001098 <prvIsQueueFull>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d018      	beq.n	8000acc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9c:	3310      	adds	r3, #16
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 ff3a 	bl	800191c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aaa:	f000 fa8d 	bl	8000fc8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000aae:	f000 fd49 	bl	8001544 <xTaskResumeAll>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f47f af62 	bne.w	800097e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <xQueueGenericSend+0x248>)
 8000abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	f3bf 8f4f 	dsb	sy
 8000ac6:	f3bf 8f6f 	isb	sy
 8000aca:	e758      	b.n	800097e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ace:	f000 fa7b 	bl	8000fc8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ad2:	f000 fd37 	bl	8001544 <xTaskResumeAll>
 8000ad6:	e752      	b.n	800097e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ada:	f000 fa75 	bl	8000fc8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ade:	f000 fd31 	bl	8001544 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 f925 	bl	8004d34 <SEGGER_SYSVIEW_ShrinkId>
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	6879      	ldr	r1, [r7, #4]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	460b      	mov	r3, r1
 8000af4:	4601      	mov	r1, r0
 8000af6:	205a      	movs	r0, #90	; 0x5a
 8000af8:	f003 fc04 	bl	8004304 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000afc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3738      	adds	r7, #56	; 0x38
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000ed04 	.word	0xe000ed04

08000b0c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b090      	sub	sp, #64	; 0x40
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10a      	bne.n	8000b3a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b28:	f383 8811 	msr	BASEPRI, r3
 8000b2c:	f3bf 8f6f 	isb	sy
 8000b30:	f3bf 8f4f 	dsb	sy
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000b36:	bf00      	nop
 8000b38:	e7fe      	b.n	8000b38 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d103      	bne.n	8000b48 <xQueueGenericSendFromISR+0x3c>
 8000b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d101      	bne.n	8000b4c <xQueueGenericSendFromISR+0x40>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <xQueueGenericSendFromISR+0x42>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10a      	bne.n	8000b68 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b56:	f383 8811 	msr	BASEPRI, r3
 8000b5a:	f3bf 8f6f 	isb	sy
 8000b5e:	f3bf 8f4f 	dsb	sy
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000b64:	bf00      	nop
 8000b66:	e7fe      	b.n	8000b66 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d103      	bne.n	8000b76 <xQueueGenericSendFromISR+0x6a>
 8000b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d101      	bne.n	8000b7a <xQueueGenericSendFromISR+0x6e>
 8000b76:	2301      	movs	r3, #1
 8000b78:	e000      	b.n	8000b7c <xQueueGenericSendFromISR+0x70>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d10a      	bne.n	8000b96 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b84:	f383 8811 	msr	BASEPRI, r3
 8000b88:	f3bf 8f6f 	isb	sy
 8000b8c:	f3bf 8f4f 	dsb	sy
 8000b90:	623b      	str	r3, [r7, #32]
    }
 8000b92:	bf00      	nop
 8000b94:	e7fe      	b.n	8000b94 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b96:	f001 ff71 	bl	8002a7c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8000b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba2:	f383 8811 	msr	BASEPRI, r3
 8000ba6:	f3bf 8f6f 	isb	sy
 8000baa:	f3bf 8f4f 	dsb	sy
 8000bae:	61fa      	str	r2, [r7, #28]
 8000bb0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000bb2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d302      	bcc.n	8000bc8 <xQueueGenericSendFromISR+0xbc>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d148      	bne.n	8000c5a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 f8aa 	bl	8004d34 <SEGGER_SYSVIEW_ShrinkId>
 8000be0:	4601      	mov	r1, r0
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	461a      	mov	r2, r3
 8000be6:	2060      	movs	r0, #96	; 0x60
 8000be8:	f003 fabc 	bl	8004164 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000bf2:	f000 f959 	bl	8000ea8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000bf6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfe:	d112      	bne.n	8000c26 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d025      	beq.n	8000c54 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c0a:	3324      	adds	r3, #36	; 0x24
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fed7 	bl	80019c0 <xTaskRemoveFromEventList>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d01d      	beq.n	8000c54 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d01a      	beq.n	8000c54 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	e016      	b.n	8000c54 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000c26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c2c:	d10a      	bne.n	8000c44 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c32:	f383 8811 	msr	BASEPRI, r3
 8000c36:	f3bf 8f6f 	isb	sy
 8000c3a:	f3bf 8f4f 	dsb	sy
 8000c3e:	617b      	str	r3, [r7, #20]
    }
 8000c40:	bf00      	nop
 8000c42:	e7fe      	b.n	8000c42 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c48:	3301      	adds	r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	b25a      	sxtb	r2, r3
 8000c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000c54:	2301      	movs	r3, #1
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000c58:	e00b      	b.n	8000c72 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f004 f869 	bl	8004d34 <SEGGER_SYSVIEW_ShrinkId>
 8000c62:	4601      	mov	r1, r0
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	461a      	mov	r2, r3
 8000c68:	2060      	movs	r0, #96	; 0x60
 8000c6a:	f003 fa7b 	bl	8004164 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c74:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c7c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3740      	adds	r7, #64	; 0x40
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b08f      	sub	sp, #60	; 0x3c
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10a      	bne.n	8000cb8 <xQueueReceive+0x30>
        __asm volatile
 8000ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca6:	f383 8811 	msr	BASEPRI, r3
 8000caa:	f3bf 8f6f 	isb	sy
 8000cae:	f3bf 8f4f 	dsb	sy
 8000cb2:	623b      	str	r3, [r7, #32]
    }
 8000cb4:	bf00      	nop
 8000cb6:	e7fe      	b.n	8000cb6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d103      	bne.n	8000cc6 <xQueueReceive+0x3e>
 8000cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <xQueueReceive+0x42>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e000      	b.n	8000ccc <xQueueReceive+0x44>
 8000cca:	2300      	movs	r3, #0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10a      	bne.n	8000ce6 <xQueueReceive+0x5e>
        __asm volatile
 8000cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd4:	f383 8811 	msr	BASEPRI, r3
 8000cd8:	f3bf 8f6f 	isb	sy
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	61fb      	str	r3, [r7, #28]
    }
 8000ce2:	bf00      	nop
 8000ce4:	e7fe      	b.n	8000ce4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ce6:	f001 f80b 	bl	8001d00 <xTaskGetSchedulerState>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <xQueueReceive+0x6e>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <xQueueReceive+0x72>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e000      	b.n	8000cfc <xQueueReceive+0x74>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10a      	bne.n	8000d16 <xQueueReceive+0x8e>
        __asm volatile
 8000d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d04:	f383 8811 	msr	BASEPRI, r3
 8000d08:	f3bf 8f6f 	isb	sy
 8000d0c:	f3bf 8f4f 	dsb	sy
 8000d10:	61bb      	str	r3, [r7, #24]
    }
 8000d12:	bf00      	nop
 8000d14:	e7fe      	b.n	8000d14 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d16:	f001 fdc5 	bl	80028a4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d02f      	beq.n	8000d86 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d2a:	f000 f927 	bl	8000f7c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 ffff 	bl	8004d34 <SEGGER_SYSVIEW_ShrinkId>
 8000d36:	4604      	mov	r4, r0
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f003 fffb 	bl	8004d34 <SEGGER_SYSVIEW_ShrinkId>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2101      	movs	r1, #1
 8000d44:	9100      	str	r1, [sp, #0]
 8000d46:	4621      	mov	r1, r4
 8000d48:	205c      	movs	r0, #92	; 0x5c
 8000d4a:	f003 fadb 	bl	8004304 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	1e5a      	subs	r2, r3, #1
 8000d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d58:	691b      	ldr	r3, [r3, #16]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00f      	beq.n	8000d7e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d60:	3310      	adds	r3, #16
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fe2c 	bl	80019c0 <xTaskRemoveFromEventList>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d007      	beq.n	8000d7e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ea4 <xQueueReceive+0x21c>)
 8000d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	f3bf 8f4f 	dsb	sy
 8000d7a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d7e:	f001 fdc1 	bl	8002904 <vPortExitCritical>
                return pdPASS;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e08a      	b.n	8000e9c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d113      	bne.n	8000db4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d8c:	f001 fdba 	bl	8002904 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 ffce 	bl	8004d34 <SEGGER_SYSVIEW_ShrinkId>
 8000d98:	4604      	mov	r4, r0
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f003 ffca 	bl	8004d34 <SEGGER_SYSVIEW_ShrinkId>
 8000da0:	4602      	mov	r2, r0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2101      	movs	r1, #1
 8000da6:	9100      	str	r1, [sp, #0]
 8000da8:	4621      	mov	r1, r4
 8000daa:	205c      	movs	r0, #92	; 0x5c
 8000dac:	f003 faaa 	bl	8004304 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e073      	b.n	8000e9c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d106      	bne.n	8000dc8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fe64 	bl	8001a8c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000dc8:	f001 fd9c 	bl	8002904 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000dcc:	f000 fbac 	bl	8001528 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000dd0:	f001 fd68 	bl	80028a4 <vPortEnterCritical>
 8000dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d103      	bne.n	8000dea <xQueueReceive+0x162>
 8000de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df6:	d103      	bne.n	8000e00 <xQueueReceive+0x178>
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e00:	f001 fd80 	bl	8002904 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e04:	1d3a      	adds	r2, r7, #4
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fe53 	bl	8001ab8 <xTaskCheckForTimeOut>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d124      	bne.n	8000e62 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e1a:	f000 f927 	bl	800106c <prvIsQueueEmpty>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d018      	beq.n	8000e56 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e26:	3324      	adds	r3, #36	; 0x24
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fd75 	bl	800191c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e34:	f000 f8c8 	bl	8000fc8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e38:	f000 fb84 	bl	8001544 <xTaskResumeAll>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f47f af69 	bne.w	8000d16 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <xQueueReceive+0x21c>)
 8000e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	f3bf 8f4f 	dsb	sy
 8000e50:	f3bf 8f6f 	isb	sy
 8000e54:	e75f      	b.n	8000d16 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e58:	f000 f8b6 	bl	8000fc8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e5c:	f000 fb72 	bl	8001544 <xTaskResumeAll>
 8000e60:	e759      	b.n	8000d16 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e64:	f000 f8b0 	bl	8000fc8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e68:	f000 fb6c 	bl	8001544 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e6e:	f000 f8fd 	bl	800106c <prvIsQueueEmpty>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f43f af4e 	beq.w	8000d16 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 ff59 	bl	8004d34 <SEGGER_SYSVIEW_ShrinkId>
 8000e82:	4604      	mov	r4, r0
 8000e84:	2000      	movs	r0, #0
 8000e86:	f003 ff55 	bl	8004d34 <SEGGER_SYSVIEW_ShrinkId>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2101      	movs	r1, #1
 8000e90:	9100      	str	r1, [sp, #0]
 8000e92:	4621      	mov	r1, r4
 8000e94:	205c      	movs	r0, #92	; 0x5c
 8000e96:	f003 fa35 	bl	8004304 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000e9a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3734      	adds	r7, #52	; 0x34
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	e000ed04 	.word	0xe000ed04

08000ea8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ebc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10d      	bne.n	8000ee2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d14d      	bne.n	8000f6a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 ff32 	bl	8001d3c <xTaskPriorityDisinherit>
 8000ed8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	e043      	b.n	8000f6a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d119      	bne.n	8000f1c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	6858      	ldr	r0, [r3, #4]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	f00b fd58 	bl	800c9a8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	441a      	add	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d32b      	bcc.n	8000f6a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	e026      	b.n	8000f6a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	68d8      	ldr	r0, [r3, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	461a      	mov	r2, r3
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	f00b fd3e 	bl	800c9a8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	425b      	negs	r3, r3
 8000f36:	441a      	add	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	425b      	negs	r3, r3
 8000f52:	441a      	add	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d105      	bne.n	8000f6a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000f72:	697b      	ldr	r3, [r7, #20]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d018      	beq.n	8000fc0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	441a      	add	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d303      	bcc.n	8000fb0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68d9      	ldr	r1, [r3, #12]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	461a      	mov	r2, r3
 8000fba:	6838      	ldr	r0, [r7, #0]
 8000fbc:	f00b fcf4 	bl	800c9a8 <memcpy>
    }
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000fd0:	f001 fc68 	bl	80028a4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fda:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fdc:	e011      	b.n	8001002 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d012      	beq.n	800100c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3324      	adds	r3, #36	; 0x24
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fce8 	bl	80019c0 <xTaskRemoveFromEventList>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000ff6:	f000 fdc5 	bl	8001b84 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	2b00      	cmp	r3, #0
 8001008:	dce9      	bgt.n	8000fde <prvUnlockQueue+0x16>
 800100a:	e000      	b.n	800100e <prvUnlockQueue+0x46>
                        break;
 800100c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	22ff      	movs	r2, #255	; 0xff
 8001012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001016:	f001 fc75 	bl	8002904 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800101a:	f001 fc43 	bl	80028a4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001024:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001026:	e011      	b.n	800104c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d012      	beq.n	8001056 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3310      	adds	r3, #16
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fcc3 	bl	80019c0 <xTaskRemoveFromEventList>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001040:	f000 fda0 	bl	8001b84 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	3b01      	subs	r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800104c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	dce9      	bgt.n	8001028 <prvUnlockQueue+0x60>
 8001054:	e000      	b.n	8001058 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001056:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	22ff      	movs	r2, #255	; 0xff
 800105c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001060:	f001 fc50 	bl	8002904 <vPortExitCritical>
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001074:	f001 fc16 	bl	80028a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001080:	2301      	movs	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e001      	b.n	800108a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800108a:	f001 fc3b 	bl	8002904 <vPortExitCritical>

    return xReturn;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010a0:	f001 fc00 	bl	80028a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d102      	bne.n	80010b6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010b0:	2301      	movs	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e001      	b.n	80010ba <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010ba:	f001 fc23 	bl	8002904 <vPortExitCritical>

    return xReturn;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	e01e      	b.n	8001116 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80010d8:	4a13      	ldr	r2, [pc, #76]	; (8001128 <vQueueAddToRegistry+0x60>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d115      	bne.n	8001110 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80010e4:	4910      	ldr	r1, [pc, #64]	; (8001128 <vQueueAddToRegistry+0x60>)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <vQueueAddToRegistry+0x60>)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4413      	add	r3, r2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fe19 	bl	8004d34 <SEGGER_SYSVIEW_ShrinkId>
 8001102:	4601      	mov	r1, r0
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	2071      	movs	r0, #113	; 0x71
 800110a:	f003 f82b 	bl	8004164 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800110e:	e006      	b.n	800111e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3301      	adds	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b07      	cmp	r3, #7
 800111a:	d9dd      	bls.n	80010d8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000bc 	.word	0x200000bc

0800112c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800113c:	f001 fbb2 	bl	80028a4 <vPortEnterCritical>
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001146:	b25b      	sxtb	r3, r3
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d103      	bne.n	8001156 <vQueueWaitForMessageRestricted+0x2a>
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800115c:	b25b      	sxtb	r3, r3
 800115e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001162:	d103      	bne.n	800116c <vQueueWaitForMessageRestricted+0x40>
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800116c:	f001 fbca 	bl	8002904 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	3324      	adds	r3, #36	; 0x24
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	68b9      	ldr	r1, [r7, #8]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fbef 	bl	8001964 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff1e 	bl	8000fc8 <prvUnlockQueue>
    }
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af04      	add	r7, sp, #16
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	4613      	mov	r3, r2
 80011a2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fca7 	bl	8002afc <pvPortMalloc>
 80011ae:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00e      	beq.n	80011d4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011b6:	2058      	movs	r0, #88	; 0x58
 80011b8:	f001 fca0 	bl	8002afc <pvPortMalloc>
 80011bc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ca:	e005      	b.n	80011d8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f001 fd75 	bl	8002cbc <vPortFree>
 80011d2:	e001      	b.n	80011d8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d013      	beq.n	8001206 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80011de:	88fa      	ldrh	r2, [r7, #6]
 80011e0:	2300      	movs	r3, #0
 80011e2:	9303      	str	r3, [sp, #12]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f000 f80e 	bl	8001216 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80011fa:	69f8      	ldr	r0, [r7, #28]
 80011fc:	f000 f8a2 	bl	8001344 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	e002      	b.n	800120c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800120c:	69bb      	ldr	r3, [r7, #24]
    }
 800120e:	4618      	mov	r0, r3
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b088      	sub	sp, #32
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001226:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	461a      	mov	r2, r3
 800122e:	21a5      	movs	r1, #165	; 0xa5
 8001230:	f00b fbc8 	bl	800c9c4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800123e:	3b01      	subs	r3, #1
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f023 0307 	bic.w	r3, r3, #7
 800124c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00a      	beq.n	800126e <prvInitialiseNewTask+0x58>
        __asm volatile
 8001258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800125c:	f383 8811 	msr	BASEPRI, r3
 8001260:	f3bf 8f6f 	isb	sy
 8001264:	f3bf 8f4f 	dsb	sy
 8001268:	617b      	str	r3, [r7, #20]
    }
 800126a:	bf00      	nop
 800126c:	e7fe      	b.n	800126c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d01f      	beq.n	80012b4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	e012      	b.n	80012a0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	4413      	add	r3, r2
 8001280:	7819      	ldrb	r1, [r3, #0]
 8001282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	4413      	add	r3, r2
 8001288:	3334      	adds	r3, #52	; 0x34
 800128a:	460a      	mov	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3301      	adds	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b09      	cmp	r3, #9
 80012a4:	d9e9      	bls.n	800127a <prvInitialiseNewTask+0x64>
 80012a6:	e000      	b.n	80012aa <prvInitialiseNewTask+0x94>
            {
                break;
 80012a8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80012b2:	e003      	b.n	80012bc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80012b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d901      	bls.n	80012c6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012c2:	2304      	movs	r3, #4
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80012c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80012cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012d0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80012d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d4:	2200      	movs	r2, #0
 80012d6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80012d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012da:	3304      	adds	r3, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f96b 	bl	80005b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80012e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e4:	3318      	adds	r3, #24
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f966 	bl	80005b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80012ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012f0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f4:	f1c3 0205 	rsb	r2, r3, #5
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001304:	3350      	adds	r3, #80	; 0x50
 8001306:	2204      	movs	r2, #4
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f00b fb5a 	bl	800c9c4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001312:	3354      	adds	r3, #84	; 0x54
 8001314:	2201      	movs	r2, #1
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f00b fb53 	bl	800c9c4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	68f9      	ldr	r1, [r7, #12]
 8001322:	69b8      	ldr	r0, [r7, #24]
 8001324:	f001 f914 	bl	8002550 <pxPortInitialiseStack>
 8001328:	4602      	mov	r2, r0
 800132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001338:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001344:	b5b0      	push	{r4, r5, r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af02      	add	r7, sp, #8
 800134a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800134c:	f001 faaa 	bl	80028a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001350:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <prvAddNewTaskToReadyList+0xfc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a3a      	ldr	r2, [pc, #232]	; (8001440 <prvAddNewTaskToReadyList+0xfc>)
 8001358:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <prvAddNewTaskToReadyList+0x100>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001362:	4a38      	ldr	r2, [pc, #224]	; (8001444 <prvAddNewTaskToReadyList+0x100>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001368:	4b35      	ldr	r3, [pc, #212]	; (8001440 <prvAddNewTaskToReadyList+0xfc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d110      	bne.n	8001392 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001370:	f000 fc2c 	bl	8001bcc <prvInitialiseTaskLists>
 8001374:	e00d      	b.n	8001392 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001376:	4b34      	ldr	r3, [pc, #208]	; (8001448 <prvAddNewTaskToReadyList+0x104>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d109      	bne.n	8001392 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <prvAddNewTaskToReadyList+0x100>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	429a      	cmp	r2, r3
 800138a:	d802      	bhi.n	8001392 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800138c:	4a2d      	ldr	r2, [pc, #180]	; (8001444 <prvAddNewTaskToReadyList+0x100>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <prvAddNewTaskToReadyList+0x108>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	4a2c      	ldr	r2, [pc, #176]	; (800144c <prvAddNewTaskToReadyList+0x108>)
 800139a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <prvAddNewTaskToReadyList+0x108>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d016      	beq.n	80013d8 <prvAddNewTaskToReadyList+0x94>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 fb9b 	bl	8004ae8 <SEGGER_SYSVIEW_OnTaskCreate>
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	461d      	mov	r5, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	461c      	mov	r4, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	1ae3      	subs	r3, r4, r3
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	462b      	mov	r3, r5
 80013d4:	f001 fe40 	bl	8003058 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fc08 	bl	8004bf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	2201      	movs	r2, #1
 80013e6:	409a      	lsls	r2, r3
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <prvAddNewTaskToReadyList+0x10c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	4a18      	ldr	r2, [pc, #96]	; (8001450 <prvAddNewTaskToReadyList+0x10c>)
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4a15      	ldr	r2, [pc, #84]	; (8001454 <prvAddNewTaskToReadyList+0x110>)
 8001400:	441a      	add	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3304      	adds	r3, #4
 8001406:	4619      	mov	r1, r3
 8001408:	4610      	mov	r0, r2
 800140a:	f7ff f8e2 	bl	80005d2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800140e:	f001 fa79 	bl	8002904 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <prvAddNewTaskToReadyList+0x104>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00e      	beq.n	8001438 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <prvAddNewTaskToReadyList+0x100>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	429a      	cmp	r2, r3
 8001426:	d207      	bcs.n	8001438 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <prvAddNewTaskToReadyList+0x114>)
 800142a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f3bf 8f4f 	dsb	sy
 8001434:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bdb0      	pop	{r4, r5, r7, pc}
 8001440:	200001d4 	.word	0x200001d4
 8001444:	200000fc 	.word	0x200000fc
 8001448:	200001e0 	.word	0x200001e0
 800144c:	200001f0 	.word	0x200001f0
 8001450:	200001dc 	.word	0x200001dc
 8001454:	20000100 	.word	0x20000100
 8001458:	e000ed04 	.word	0xe000ed04

0800145c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001462:	4b29      	ldr	r3, [pc, #164]	; (8001508 <vTaskStartScheduler+0xac>)
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	2300      	movs	r3, #0
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2300      	movs	r3, #0
 800146c:	2282      	movs	r2, #130	; 0x82
 800146e:	4927      	ldr	r1, [pc, #156]	; (800150c <vTaskStartScheduler+0xb0>)
 8001470:	4827      	ldr	r0, [pc, #156]	; (8001510 <vTaskStartScheduler+0xb4>)
 8001472:	f7ff fe8f 	bl	8001194 <xTaskCreate>
 8001476:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d102      	bne.n	8001484 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800147e:	f000 fd55 	bl	8001f2c <xTimerCreateTimerTask>
 8001482:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d129      	bne.n	80014de <vTaskStartScheduler+0x82>
        __asm volatile
 800148a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800148e:	f383 8811 	msr	BASEPRI, r3
 8001492:	f3bf 8f6f 	isb	sy
 8001496:	f3bf 8f4f 	dsb	sy
 800149a:	60bb      	str	r3, [r7, #8]
    }
 800149c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <vTaskStartScheduler+0xb8>)
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <vTaskStartScheduler+0xbc>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <vTaskStartScheduler+0xc0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <vTaskStartScheduler+0xc4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3334      	adds	r3, #52	; 0x34
 80014b8:	2205      	movs	r2, #5
 80014ba:	4914      	ldr	r1, [pc, #80]	; (800150c <vTaskStartScheduler+0xb0>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f00b fa63 	bl	800c988 <memcmp>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <vTaskStartScheduler+0x78>
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <vTaskStartScheduler+0xc4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 fb4d 	bl	8004b6c <SEGGER_SYSVIEW_OnTaskStartExec>
 80014d2:	e001      	b.n	80014d8 <vTaskStartScheduler+0x7c>
 80014d4:	f003 faec 	bl	8004ab0 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80014d8:	f001 f8c4 	bl	8002664 <xPortStartScheduler>
 80014dc:	e00e      	b.n	80014fc <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	d10a      	bne.n	80014fc <vTaskStartScheduler+0xa0>
        __asm volatile
 80014e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ea:	f383 8811 	msr	BASEPRI, r3
 80014ee:	f3bf 8f6f 	isb	sy
 80014f2:	f3bf 8f4f 	dsb	sy
 80014f6:	607b      	str	r3, [r7, #4]
    }
 80014f8:	bf00      	nop
 80014fa:	e7fe      	b.n	80014fa <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <vTaskStartScheduler+0xc8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200001f8 	.word	0x200001f8
 800150c:	0800cbe8 	.word	0x0800cbe8
 8001510:	08001b9d 	.word	0x08001b9d
 8001514:	200001f4 	.word	0x200001f4
 8001518:	200001e0 	.word	0x200001e0
 800151c:	200001d8 	.word	0x200001d8
 8001520:	200000fc 	.word	0x200000fc
 8001524:	20000000 	.word	0x20000000

08001528 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <vTaskSuspendAll+0x18>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a03      	ldr	r2, [pc, #12]	; (8001540 <vTaskSuspendAll+0x18>)
 8001534:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	200001fc 	.word	0x200001fc

08001544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001552:	4b43      	ldr	r3, [pc, #268]	; (8001660 <xTaskResumeAll+0x11c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10a      	bne.n	8001570 <xTaskResumeAll+0x2c>
        __asm volatile
 800155a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155e:	f383 8811 	msr	BASEPRI, r3
 8001562:	f3bf 8f6f 	isb	sy
 8001566:	f3bf 8f4f 	dsb	sy
 800156a:	603b      	str	r3, [r7, #0]
    }
 800156c:	bf00      	nop
 800156e:	e7fe      	b.n	800156e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001570:	f001 f998 	bl	80028a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001574:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <xTaskResumeAll+0x11c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3b01      	subs	r3, #1
 800157a:	4a39      	ldr	r2, [pc, #228]	; (8001660 <xTaskResumeAll+0x11c>)
 800157c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800157e:	4b38      	ldr	r3, [pc, #224]	; (8001660 <xTaskResumeAll+0x11c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d165      	bne.n	8001652 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001586:	4b37      	ldr	r3, [pc, #220]	; (8001664 <xTaskResumeAll+0x120>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d061      	beq.n	8001652 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800158e:	e032      	b.n	80015f6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <xTaskResumeAll+0x124>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3318      	adds	r3, #24
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff f875 	bl	800068c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3304      	adds	r3, #4
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff f870 	bl	800068c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fb1e 	bl	8004bf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	2201      	movs	r2, #1
 80015ba:	409a      	lsls	r2, r3
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <xTaskResumeAll+0x128>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	4a2a      	ldr	r2, [pc, #168]	; (800166c <xTaskResumeAll+0x128>)
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4a27      	ldr	r2, [pc, #156]	; (8001670 <xTaskResumeAll+0x12c>)
 80015d4:	441a      	add	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3304      	adds	r3, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	4610      	mov	r0, r2
 80015de:	f7fe fff8 	bl	80005d2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <xTaskResumeAll+0x130>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d302      	bcc.n	80015f6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <xTaskResumeAll+0x134>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <xTaskResumeAll+0x124>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1c8      	bne.n	8001590 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001604:	f000 fb60 	bl	8001cc8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <xTaskResumeAll+0x138>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d010      	beq.n	8001636 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001614:	f000 f858 	bl	80016c8 <xTaskIncrementTick>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <xTaskResumeAll+0x134>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f1      	bne.n	8001614 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <xTaskResumeAll+0x138>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <xTaskResumeAll+0x134>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d009      	beq.n	8001652 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800163e:	2301      	movs	r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <xTaskResumeAll+0x13c>)
 8001644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	f3bf 8f4f 	dsb	sy
 800164e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001652:	f001 f957 	bl	8002904 <vPortExitCritical>

    return xAlreadyYielded;
 8001656:	68bb      	ldr	r3, [r7, #8]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200001fc 	.word	0x200001fc
 8001664:	200001d4 	.word	0x200001d4
 8001668:	20000194 	.word	0x20000194
 800166c:	200001dc 	.word	0x200001dc
 8001670:	20000100 	.word	0x20000100
 8001674:	200000fc 	.word	0x200000fc
 8001678:	200001e8 	.word	0x200001e8
 800167c:	200001e4 	.word	0x200001e4
 8001680:	e000ed04 	.word	0xe000ed04

08001684 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <xTaskGetTickCount+0x1c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001690:	687b      	ldr	r3, [r7, #4]
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	200001d8 	.word	0x200001d8

080016a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80016aa:	f001 f9e7 	bl	8002a7c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <xTaskGetTickCountFromISR+0x20>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80016b8:	683b      	ldr	r3, [r7, #0]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200001d8 	.word	0x200001d8

080016c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016d2:	4b50      	ldr	r3, [pc, #320]	; (8001814 <xTaskIncrementTick+0x14c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 8092 	bne.w	8001800 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80016dc:	4b4e      	ldr	r3, [pc, #312]	; (8001818 <xTaskIncrementTick+0x150>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80016e4:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <xTaskIncrementTick+0x150>)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d120      	bne.n	8001732 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80016f0:	4b4a      	ldr	r3, [pc, #296]	; (800181c <xTaskIncrementTick+0x154>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <xTaskIncrementTick+0x48>
        __asm volatile
 80016fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fe:	f383 8811 	msr	BASEPRI, r3
 8001702:	f3bf 8f6f 	isb	sy
 8001706:	f3bf 8f4f 	dsb	sy
 800170a:	603b      	str	r3, [r7, #0]
    }
 800170c:	bf00      	nop
 800170e:	e7fe      	b.n	800170e <xTaskIncrementTick+0x46>
 8001710:	4b42      	ldr	r3, [pc, #264]	; (800181c <xTaskIncrementTick+0x154>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b42      	ldr	r3, [pc, #264]	; (8001820 <xTaskIncrementTick+0x158>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a40      	ldr	r2, [pc, #256]	; (800181c <xTaskIncrementTick+0x154>)
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4a40      	ldr	r2, [pc, #256]	; (8001820 <xTaskIncrementTick+0x158>)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <xTaskIncrementTick+0x15c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	4a3e      	ldr	r2, [pc, #248]	; (8001824 <xTaskIncrementTick+0x15c>)
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	f000 facb 	bl	8001cc8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <xTaskIncrementTick+0x160>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	429a      	cmp	r2, r3
 800173a:	d34c      	bcc.n	80017d6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800173c:	4b37      	ldr	r3, [pc, #220]	; (800181c <xTaskIncrementTick+0x154>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d104      	bne.n	8001750 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001746:	4b38      	ldr	r3, [pc, #224]	; (8001828 <xTaskIncrementTick+0x160>)
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	601a      	str	r2, [r3, #0]
                    break;
 800174e:	e042      	b.n	80017d6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001750:	4b32      	ldr	r3, [pc, #200]	; (800181c <xTaskIncrementTick+0x154>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	d203      	bcs.n	8001770 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001768:	4a2f      	ldr	r2, [pc, #188]	; (8001828 <xTaskIncrementTick+0x160>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800176e:	e032      	b.n	80017d6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3304      	adds	r3, #4
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe ff89 	bl	800068c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	2b00      	cmp	r3, #0
 8001780:	d004      	beq.n	800178c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3318      	adds	r3, #24
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe ff80 	bl	800068c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4618      	mov	r0, r3
 8001790:	f003 fa2e 	bl	8004bf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	2201      	movs	r2, #1
 800179a:	409a      	lsls	r2, r3
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <xTaskIncrementTick+0x164>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	4a22      	ldr	r2, [pc, #136]	; (800182c <xTaskIncrementTick+0x164>)
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4a1f      	ldr	r2, [pc, #124]	; (8001830 <xTaskIncrementTick+0x168>)
 80017b4:	441a      	add	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	3304      	adds	r3, #4
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f7fe ff08 	bl	80005d2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <xTaskIncrementTick+0x16c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d3b5      	bcc.n	800173c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017d4:	e7b2      	b.n	800173c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <xTaskIncrementTick+0x16c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017dc:	4914      	ldr	r1, [pc, #80]	; (8001830 <xTaskIncrementTick+0x168>)
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d901      	bls.n	80017f2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80017ee:	2301      	movs	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <xTaskIncrementTick+0x170>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e004      	b.n	800180a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <xTaskIncrementTick+0x174>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a0d      	ldr	r2, [pc, #52]	; (800183c <xTaskIncrementTick+0x174>)
 8001808:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800180a:	697b      	ldr	r3, [r7, #20]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200001fc 	.word	0x200001fc
 8001818:	200001d8 	.word	0x200001d8
 800181c:	2000018c 	.word	0x2000018c
 8001820:	20000190 	.word	0x20000190
 8001824:	200001ec 	.word	0x200001ec
 8001828:	200001f4 	.word	0x200001f4
 800182c:	200001dc 	.word	0x200001dc
 8001830:	20000100 	.word	0x20000100
 8001834:	200000fc 	.word	0x200000fc
 8001838:	200001e8 	.word	0x200001e8
 800183c:	200001e4 	.word	0x200001e4

08001840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <vTaskSwitchContext+0xc4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <vTaskSwitchContext+0xc8>)
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001854:	e052      	b.n	80018fc <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8001856:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <vTaskSwitchContext+0xc8>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <vTaskSwitchContext+0xcc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800186a:	7afb      	ldrb	r3, [r7, #11]
 800186c:	f1c3 031f 	rsb	r3, r3, #31
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	4927      	ldr	r1, [pc, #156]	; (8001910 <vTaskSwitchContext+0xd0>)
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10a      	bne.n	800189c <vTaskSwitchContext+0x5c>
        __asm volatile
 8001886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800188a:	f383 8811 	msr	BASEPRI, r3
 800188e:	f3bf 8f6f 	isb	sy
 8001892:	f3bf 8f4f 	dsb	sy
 8001896:	607b      	str	r3, [r7, #4]
    }
 8001898:	bf00      	nop
 800189a:	e7fe      	b.n	800189a <vTaskSwitchContext+0x5a>
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <vTaskSwitchContext+0xd0>)
 80018a8:	4413      	add	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	3308      	adds	r3, #8
 80018be:	429a      	cmp	r2, r3
 80018c0:	d104      	bne.n	80018cc <vTaskSwitchContext+0x8c>
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <vTaskSwitchContext+0xd4>)
 80018d4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <vTaskSwitchContext+0xd4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3334      	adds	r3, #52	; 0x34
 80018dc:	2205      	movs	r2, #5
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <vTaskSwitchContext+0xd8>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00b f851 	bl	800c988 <memcmp>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <vTaskSwitchContext+0xb8>
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <vTaskSwitchContext+0xd4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 f93b 	bl	8004b6c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80018f6:	e001      	b.n	80018fc <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 80018f8:	f003 f8da 	bl	8004ab0 <SEGGER_SYSVIEW_OnIdle>
}
 80018fc:	bf00      	nop
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200001fc 	.word	0x200001fc
 8001908:	200001e8 	.word	0x200001e8
 800190c:	200001dc 	.word	0x200001dc
 8001910:	20000100 	.word	0x20000100
 8001914:	200000fc 	.word	0x200000fc
 8001918:	0800cbe8 	.word	0x0800cbe8

0800191c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10a      	bne.n	8001942 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800192c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001930:	f383 8811 	msr	BASEPRI, r3
 8001934:	f3bf 8f6f 	isb	sy
 8001938:	f3bf 8f4f 	dsb	sy
 800193c:	60fb      	str	r3, [r7, #12]
    }
 800193e:	bf00      	nop
 8001940:	e7fe      	b.n	8001940 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <vTaskPlaceOnEventList+0x44>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3318      	adds	r3, #24
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7fe fe65 	bl	800061a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001950:	2101      	movs	r1, #1
 8001952:	6838      	ldr	r0, [r7, #0]
 8001954:	f000 fa72 	bl	8001e3c <prvAddCurrentTaskToDelayedList>
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200000fc 	.word	0x200000fc

08001964 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10a      	bne.n	800198c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197a:	f383 8811 	msr	BASEPRI, r3
 800197e:	f3bf 8f6f 	isb	sy
 8001982:	f3bf 8f4f 	dsb	sy
 8001986:	617b      	str	r3, [r7, #20]
    }
 8001988:	bf00      	nop
 800198a:	e7fe      	b.n	800198a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <vTaskPlaceOnEventListRestricted+0x58>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3318      	adds	r3, #24
 8001992:	4619      	mov	r1, r3
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f7fe fe1c 	bl	80005d2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80019a6:	2024      	movs	r0, #36	; 0x24
 80019a8:	f002 fb82 	bl	80040b0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	68b8      	ldr	r0, [r7, #8]
 80019b0:	f000 fa44 	bl	8001e3c <prvAddCurrentTaskToDelayedList>
    }
 80019b4:	bf00      	nop
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200000fc 	.word	0x200000fc

080019c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80019d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019da:	f383 8811 	msr	BASEPRI, r3
 80019de:	f3bf 8f6f 	isb	sy
 80019e2:	f3bf 8f4f 	dsb	sy
 80019e6:	60fb      	str	r3, [r7, #12]
    }
 80019e8:	bf00      	nop
 80019ea:	e7fe      	b.n	80019ea <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	3318      	adds	r3, #24
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fe4b 	bl	800068c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <xTaskRemoveFromEventList+0xb4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d120      	bne.n	8001a40 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	3304      	adds	r3, #4
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fe42 	bl	800068c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 f8f0 	bl	8004bf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	2201      	movs	r2, #1
 8001a16:	409a      	lsls	r2, r3
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <xTaskRemoveFromEventList+0xb8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <xTaskRemoveFromEventList+0xb8>)
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <xTaskRemoveFromEventList+0xbc>)
 8001a30:	441a      	add	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	3304      	adds	r3, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	4610      	mov	r0, r2
 8001a3a:	f7fe fdca 	bl	80005d2 <vListInsertEnd>
 8001a3e:	e005      	b.n	8001a4c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	3318      	adds	r3, #24
 8001a44:	4619      	mov	r1, r3
 8001a46:	480e      	ldr	r0, [pc, #56]	; (8001a80 <xTaskRemoveFromEventList+0xc0>)
 8001a48:	f7fe fdc3 	bl	80005d2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <xTaskRemoveFromEventList+0xc4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d905      	bls.n	8001a66 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <xTaskRemoveFromEventList+0xc8>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e001      	b.n	8001a6a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001a6a:	697b      	ldr	r3, [r7, #20]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200001fc 	.word	0x200001fc
 8001a78:	200001dc 	.word	0x200001dc
 8001a7c:	20000100 	.word	0x20000100
 8001a80:	20000194 	.word	0x20000194
 8001a84:	200000fc 	.word	0x200000fc
 8001a88:	200001e8 	.word	0x200001e8

08001a8c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <vTaskInternalSetTimeOutState+0x24>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <vTaskInternalSetTimeOutState+0x28>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	605a      	str	r2, [r3, #4]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	200001ec 	.word	0x200001ec
 8001ab4:	200001d8 	.word	0x200001d8

08001ab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10a      	bne.n	8001ade <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001acc:	f383 8811 	msr	BASEPRI, r3
 8001ad0:	f3bf 8f6f 	isb	sy
 8001ad4:	f3bf 8f4f 	dsb	sy
 8001ad8:	613b      	str	r3, [r7, #16]
    }
 8001ada:	bf00      	nop
 8001adc:	e7fe      	b.n	8001adc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10a      	bne.n	8001afa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae8:	f383 8811 	msr	BASEPRI, r3
 8001aec:	f3bf 8f6f 	isb	sy
 8001af0:	f3bf 8f4f 	dsb	sy
 8001af4:	60fb      	str	r3, [r7, #12]
    }
 8001af6:	bf00      	nop
 8001af8:	e7fe      	b.n	8001af8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001afa:	f000 fed3 	bl	80028a4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <xTaskCheckForTimeOut+0xc4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b16:	d102      	bne.n	8001b1e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	e026      	b.n	8001b6c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <xTaskCheckForTimeOut+0xc8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d00a      	beq.n	8001b40 <xTaskCheckForTimeOut+0x88>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d305      	bcc.n	8001b40 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001b34:	2301      	movs	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e015      	b.n	8001b6c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d20b      	bcs.n	8001b62 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	1ad2      	subs	r2, r2, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ff98 	bl	8001a8c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	e004      	b.n	8001b6c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001b6c:	f000 feca 	bl	8002904 <vPortExitCritical>

    return xReturn;
 8001b70:	69fb      	ldr	r3, [r7, #28]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200001d8 	.word	0x200001d8
 8001b80:	200001ec 	.word	0x200001ec

08001b84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <vTaskMissedYield+0x14>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	200001e8 	.word	0x200001e8

08001b9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001ba4:	f000 f852 	bl	8001c4c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <prvIdleTask+0x28>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d9f9      	bls.n	8001ba4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <prvIdleTask+0x2c>)
 8001bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	f3bf 8f4f 	dsb	sy
 8001bbc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001bc0:	e7f0      	b.n	8001ba4 <prvIdleTask+0x8>
 8001bc2:	bf00      	nop
 8001bc4:	20000100 	.word	0x20000100
 8001bc8:	e000ed04 	.word	0xe000ed04

08001bcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	e00c      	b.n	8001bf2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <prvInitialiseTaskLists+0x60>)
 8001be4:	4413      	add	r3, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fcc6 	bl	8000578 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d9ef      	bls.n	8001bd8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001bf8:	480d      	ldr	r0, [pc, #52]	; (8001c30 <prvInitialiseTaskLists+0x64>)
 8001bfa:	f7fe fcbd 	bl	8000578 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001bfe:	480d      	ldr	r0, [pc, #52]	; (8001c34 <prvInitialiseTaskLists+0x68>)
 8001c00:	f7fe fcba 	bl	8000578 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001c04:	480c      	ldr	r0, [pc, #48]	; (8001c38 <prvInitialiseTaskLists+0x6c>)
 8001c06:	f7fe fcb7 	bl	8000578 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001c0a:	480c      	ldr	r0, [pc, #48]	; (8001c3c <prvInitialiseTaskLists+0x70>)
 8001c0c:	f7fe fcb4 	bl	8000578 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <prvInitialiseTaskLists+0x74>)
 8001c12:	f7fe fcb1 	bl	8000578 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <prvInitialiseTaskLists+0x78>)
 8001c18:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <prvInitialiseTaskLists+0x64>)
 8001c1a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <prvInitialiseTaskLists+0x7c>)
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <prvInitialiseTaskLists+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000100 	.word	0x20000100
 8001c30:	20000164 	.word	0x20000164
 8001c34:	20000178 	.word	0x20000178
 8001c38:	20000194 	.word	0x20000194
 8001c3c:	200001a8 	.word	0x200001a8
 8001c40:	200001c0 	.word	0x200001c0
 8001c44:	2000018c 	.word	0x2000018c
 8001c48:	20000190 	.word	0x20000190

08001c4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c52:	e019      	b.n	8001c88 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001c54:	f000 fe26 	bl	80028a4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <prvCheckTasksWaitingTermination+0x50>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3304      	adds	r3, #4
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fd11 	bl	800068c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <prvCheckTasksWaitingTermination+0x54>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <prvCheckTasksWaitingTermination+0x54>)
 8001c72:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <prvCheckTasksWaitingTermination+0x58>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <prvCheckTasksWaitingTermination+0x58>)
 8001c7c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001c7e:	f000 fe41 	bl	8002904 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f810 	bl	8001ca8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <prvCheckTasksWaitingTermination+0x58>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e1      	bne.n	8001c54 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200001a8 	.word	0x200001a8
 8001ca0:	200001d4 	.word	0x200001d4
 8001ca4:	200001bc 	.word	0x200001bc

08001ca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 f801 	bl	8002cbc <vPortFree>
                vPortFree( pxTCB );
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fffe 	bl	8002cbc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <prvResetNextTaskUnblockTime+0x30>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d104      	bne.n	8001ce0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <prvResetNextTaskUnblockTime+0x34>)
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001cde:	e005      	b.n	8001cec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <prvResetNextTaskUnblockTime+0x30>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <prvResetNextTaskUnblockTime+0x34>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	2000018c 	.word	0x2000018c
 8001cfc:	200001f4 	.word	0x200001f4

08001d00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <xTaskGetSchedulerState+0x34>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	e008      	b.n	8001d26 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <xTaskGetSchedulerState+0x38>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	e001      	b.n	8001d26 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001d26:	687b      	ldr	r3, [r7, #4]
    }
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	200001e0 	.word	0x200001e0
 8001d38:	200001fc 	.word	0x200001fc

08001d3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d068      	beq.n	8001e24 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001d52:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <xTaskPriorityDisinherit+0xf4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d00a      	beq.n	8001d72 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d60:	f383 8811 	msr	BASEPRI, r3
 8001d64:	f3bf 8f6f 	isb	sy
 8001d68:	f3bf 8f4f 	dsb	sy
 8001d6c:	60fb      	str	r3, [r7, #12]
    }
 8001d6e:	bf00      	nop
 8001d70:	e7fe      	b.n	8001d70 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10a      	bne.n	8001d90 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7e:	f383 8811 	msr	BASEPRI, r3
 8001d82:	f3bf 8f6f 	isb	sy
 8001d86:	f3bf 8f4f 	dsb	sy
 8001d8a:	60bb      	str	r3, [r7, #8]
    }
 8001d8c:	bf00      	nop
 8001d8e:	e7fe      	b.n	8001d8e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d94:	1e5a      	subs	r2, r3, #1
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d03e      	beq.n	8001e24 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d13a      	bne.n	8001e24 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	3304      	adds	r3, #4
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fc6a 	bl	800068c <uxListRemove>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <xTaskPriorityDisinherit+0xf8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <xTaskPriorityDisinherit+0xf8>)
 8001dd2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	204a      	movs	r0, #74	; 0x4a
 8001dda:	f002 f987 	bl	80040ec <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	f1c3 0205 	rsb	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	2201      	movs	r2, #1
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <xTaskPriorityDisinherit+0xf8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <xTaskPriorityDisinherit+0xf8>)
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <xTaskPriorityDisinherit+0xfc>)
 8001e12:	441a      	add	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	3304      	adds	r3, #4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	f7fe fbd9 	bl	80005d2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001e20:	2301      	movs	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e24:	697b      	ldr	r3, [r7, #20]
    }
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200000fc 	.word	0x200000fc
 8001e34:	200001dc 	.word	0x200001dc
 8001e38:	20000100 	.word	0x20000100

08001e3c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e4c:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3304      	adds	r3, #4
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fc1a 	bl	800068c <uxListRemove>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10b      	bne.n	8001e76 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	2201      	movs	r2, #1
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4013      	ands	r3, r2
 8001e72:	4a29      	ldr	r2, [pc, #164]	; (8001f18 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001e74:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d110      	bne.n	8001ea0 <prvAddCurrentTaskToDelayedList+0x64>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00d      	beq.n	8001ea0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	211b      	movs	r1, #27
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 fef2 	bl	8004c74 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e90:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3304      	adds	r3, #4
 8001e96:	4619      	mov	r1, r3
 8001e98:	4820      	ldr	r0, [pc, #128]	; (8001f1c <prvAddCurrentTaskToDelayedList+0xe0>)
 8001e9a:	f7fe fb9a 	bl	80005d2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001e9e:	e032      	b.n	8001f06 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d20f      	bcs.n	8001ed8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 fed8 	bl	8004c74 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	f7fe fba2 	bl	800061a <vListInsert>
}
 8001ed6:	e016      	b.n	8001f06 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2104      	movs	r1, #4
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f002 fec8 	bl	8004c74 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3304      	adds	r3, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f7fe fb92 	bl	800061a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <prvAddCurrentTaskToDelayedList+0xec>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d202      	bcs.n	8001f06 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001f00:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <prvAddCurrentTaskToDelayedList+0xec>)
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	6013      	str	r3, [r2, #0]
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200001d8 	.word	0x200001d8
 8001f14:	200000fc 	.word	0x200000fc
 8001f18:	200001dc 	.word	0x200001dc
 8001f1c:	200001c0 	.word	0x200001c0
 8001f20:	20000190 	.word	0x20000190
 8001f24:	2000018c 	.word	0x2000018c
 8001f28:	200001f4 	.word	0x200001f4

08001f2c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001f36:	f000 fad5 	bl	80024e4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <xTimerCreateTimerTask+0x54>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <xTimerCreateTimerTask+0x58>)
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	2302      	movs	r3, #2
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f50:	490d      	ldr	r1, [pc, #52]	; (8001f88 <xTimerCreateTimerTask+0x5c>)
 8001f52:	480e      	ldr	r0, [pc, #56]	; (8001f8c <xTimerCreateTimerTask+0x60>)
 8001f54:	f7ff f91e 	bl	8001194 <xTaskCreate>
 8001f58:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10a      	bne.n	8001f76 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f64:	f383 8811 	msr	BASEPRI, r3
 8001f68:	f3bf 8f6f 	isb	sy
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	603b      	str	r3, [r7, #0]
    }
 8001f72:	bf00      	nop
 8001f74:	e7fe      	b.n	8001f74 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001f76:	687b      	ldr	r3, [r7, #4]
    }
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000230 	.word	0x20000230
 8001f84:	20000234 	.word	0x20000234
 8001f88:	0800cbf0 	.word	0x0800cbf0
 8001f8c:	080020c5 	.word	0x080020c5

08001f90 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10a      	bne.n	8001fbe <xTimerGenericCommand+0x2e>
        __asm volatile
 8001fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fac:	f383 8811 	msr	BASEPRI, r3
 8001fb0:	f3bf 8f6f 	isb	sy
 8001fb4:	f3bf 8f4f 	dsb	sy
 8001fb8:	623b      	str	r3, [r7, #32]
    }
 8001fba:	bf00      	nop
 8001fbc:	e7fe      	b.n	8001fbc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <xTimerGenericCommand+0x98>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d02a      	beq.n	800201c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	dc18      	bgt.n	800200a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001fd8:	f7ff fe92 	bl	8001d00 <xTaskGetSchedulerState>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d109      	bne.n	8001ff6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <xTimerGenericCommand+0x98>)
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	f107 0114 	add.w	r1, r7, #20
 8001fea:	2300      	movs	r3, #0
 8001fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fee:	f7fe fc67 	bl	80008c0 <xQueueGenericSend>
 8001ff2:	6278      	str	r0, [r7, #36]	; 0x24
 8001ff4:	e012      	b.n	800201c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <xTimerGenericCommand+0x98>)
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	f107 0114 	add.w	r1, r7, #20
 8001ffe:	2300      	movs	r3, #0
 8002000:	2200      	movs	r2, #0
 8002002:	f7fe fc5d 	bl	80008c0 <xQueueGenericSend>
 8002006:	6278      	str	r0, [r7, #36]	; 0x24
 8002008:	e008      	b.n	800201c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <xTimerGenericCommand+0x98>)
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	f107 0114 	add.w	r1, r7, #20
 8002012:	2300      	movs	r3, #0
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	f7fe fd79 	bl	8000b0c <xQueueGenericSendFromISR>
 800201a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800201e:	4618      	mov	r0, r3
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000230 	.word	0x20000230

0800202c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002036:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <prvProcessExpiredTimer+0x94>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3304      	adds	r3, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fb21 	bl	800068c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d022      	beq.n	800209e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	18d1      	adds	r1, r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	6978      	ldr	r0, [r7, #20]
 8002066:	f000 f8d1 	bl	800220c <prvInsertTimerInActiveList>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01f      	beq.n	80020b0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002070:	2300      	movs	r3, #0
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2300      	movs	r3, #0
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	2100      	movs	r1, #0
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff88 	bl	8001f90 <xTimerGenericCommand>
 8002080:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d113      	bne.n	80020b0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8002088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208c:	f383 8811 	msr	BASEPRI, r3
 8002090:	f3bf 8f6f 	isb	sy
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	60fb      	str	r3, [r7, #12]
    }
 800209a:	bf00      	nop
 800209c:	e7fe      	b.n	800209c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	6978      	ldr	r0, [r7, #20]
 80020b6:	4798      	blx	r3
    }
 80020b8:	bf00      	nop
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000228 	.word	0x20000228

080020c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80020cc:	f107 0308 	add.w	r3, r7, #8
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 f857 	bl	8002184 <prvGetNextExpireTime>
 80020d6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4619      	mov	r1, r3
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f803 	bl	80020e8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80020e2:	f000 f8d5 	bl	8002290 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80020e6:	e7f1      	b.n	80020cc <prvTimerTask+0x8>

080020e8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80020f2:	f7ff fa19 	bl	8001528 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80020f6:	f107 0308 	add.w	r3, r7, #8
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f866 	bl	80021cc <prvSampleTimeNow>
 8002100:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d130      	bne.n	800216a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10a      	bne.n	8002124 <prvProcessTimerOrBlockTask+0x3c>
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	429a      	cmp	r2, r3
 8002114:	d806      	bhi.n	8002124 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002116:	f7ff fa15 	bl	8001544 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800211a:	68f9      	ldr	r1, [r7, #12]
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff85 	bl	800202c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002122:	e024      	b.n	800216e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d008      	beq.n	800213c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <prvProcessTimerOrBlockTask+0x90>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <prvProcessTimerOrBlockTask+0x50>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <prvProcessTimerOrBlockTask+0x52>
 8002138:	2300      	movs	r3, #0
 800213a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <prvProcessTimerOrBlockTask+0x94>)
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe ffef 	bl	800112c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800214e:	f7ff f9f9 	bl	8001544 <xTaskResumeAll>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10a      	bne.n	800216e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <prvProcessTimerOrBlockTask+0x98>)
 800215a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	f3bf 8f4f 	dsb	sy
 8002164:	f3bf 8f6f 	isb	sy
    }
 8002168:	e001      	b.n	800216e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800216a:	f7ff f9eb 	bl	8001544 <xTaskResumeAll>
    }
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2000022c 	.word	0x2000022c
 800217c:	20000230 	.word	0x20000230
 8002180:	e000ed04 	.word	0xe000ed04

08002184 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <prvGetNextExpireTime+0x44>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <prvGetNextExpireTime+0x16>
 8002196:	2201      	movs	r2, #1
 8002198:	e000      	b.n	800219c <prvGetNextExpireTime+0x18>
 800219a:	2200      	movs	r2, #0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <prvGetNextExpireTime+0x44>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e001      	b.n	80021b8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80021b8:	68fb      	ldr	r3, [r7, #12]
    }
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000228 	.word	0x20000228

080021cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80021d4:	f7ff fa56 	bl	8001684 <xTaskGetTickCount>
 80021d8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <prvSampleTimeNow+0x3c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d205      	bcs.n	80021f0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80021e4:	f000 f91a 	bl	800241c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e002      	b.n	80021f6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80021f6:	4a04      	ldr	r2, [pc, #16]	; (8002208 <prvSampleTimeNow+0x3c>)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80021fc:	68fb      	ldr	r3, [r7, #12]
    }
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000238 	.word	0x20000238

0800220c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	d812      	bhi.n	8002258 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	1ad2      	subs	r2, r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	429a      	cmp	r2, r3
 800223e:	d302      	bcc.n	8002246 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002240:	2301      	movs	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	e01b      	b.n	800227e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <prvInsertTimerInActiveList+0x7c>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3304      	adds	r3, #4
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f7fe f9e2 	bl	800061a <vListInsert>
 8002256:	e012      	b.n	800227e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d206      	bcs.n	800226e <prvInsertTimerInActiveList+0x62>
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d302      	bcc.n	800226e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002268:	2301      	movs	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e007      	b.n	800227e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <prvInsertTimerInActiveList+0x80>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3304      	adds	r3, #4
 8002276:	4619      	mov	r1, r3
 8002278:	4610      	mov	r0, r2
 800227a:	f7fe f9ce 	bl	800061a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800227e:	697b      	ldr	r3, [r7, #20]
    }
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000022c 	.word	0x2000022c
 800228c:	20000228 	.word	0x20000228

08002290 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002296:	e0ae      	b.n	80023f6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f2c0 80aa 	blt.w	80023f4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	3304      	adds	r3, #4
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f9eb 	bl	800068c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff87 	bl	80021cc <prvSampleTimeNow>
 80022be:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b09      	cmp	r3, #9
 80022c4:	f200 8097 	bhi.w	80023f6 <prvProcessReceivedCommands+0x166>
 80022c8:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <prvProcessReceivedCommands+0x40>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	080022f9 	.word	0x080022f9
 80022d4:	080022f9 	.word	0x080022f9
 80022d8:	080022f9 	.word	0x080022f9
 80022dc:	0800236d 	.word	0x0800236d
 80022e0:	08002381 	.word	0x08002381
 80022e4:	080023cb 	.word	0x080023cb
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	080022f9 	.word	0x080022f9
 80022f0:	0800236d 	.word	0x0800236d
 80022f4:	08002381 	.word	0x08002381
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	b2da      	uxtb	r2, r3
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	18d1      	adds	r1, r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a3a      	ldr	r2, [r7, #32]
 8002316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002318:	f7ff ff78 	bl	800220c <prvInsertTimerInActiveList>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d069      	beq.n	80023f6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002328:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05e      	beq.n	80023f6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	441a      	add	r2, r3
 8002340:	2300      	movs	r3, #0
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2300      	movs	r3, #0
 8002346:	2100      	movs	r1, #0
 8002348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800234a:	f7ff fe21 	bl	8001f90 <xTimerGenericCommand>
 800234e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d14f      	bne.n	80023f6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8002356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235a:	f383 8811 	msr	BASEPRI, r3
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f3bf 8f4f 	dsb	sy
 8002366:	61bb      	str	r3, [r7, #24]
    }
 8002368:	bf00      	nop
 800236a:	e7fe      	b.n	800236a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	b2da      	uxtb	r2, r3
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800237e:	e03a      	b.n	80023f6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	b2da      	uxtb	r2, r3
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	617b      	str	r3, [r7, #20]
    }
 80023b2:	bf00      	nop
 80023b4:	e7fe      	b.n	80023b4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	18d1      	adds	r1, r2, r3
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	6a3a      	ldr	r2, [r7, #32]
 80023c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023c4:	f7ff ff22 	bl	800220c <prvInsertTimerInActiveList>
                        break;
 80023c8:	e015      	b.n	80023f6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d103      	bne.n	80023e0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80023d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023da:	f000 fc6f 	bl	8002cbc <vPortFree>
 80023de:	e00a      	b.n	80023f6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80023f2:	e000      	b.n	80023f6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80023f4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <prvProcessReceivedCommands+0x188>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f107 0108 	add.w	r1, r7, #8
 80023fe:	2200      	movs	r2, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fc41 	bl	8000c88 <xQueueReceive>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	f47f af45 	bne.w	8002298 <prvProcessReceivedCommands+0x8>
        }
    }
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	3728      	adds	r7, #40	; 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000230 	.word	0x20000230

0800241c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002422:	e048      	b.n	80024b6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002424:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <prvSwitchTimerLists+0xc0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800242e:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <prvSwitchTimerLists+0xc0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3304      	adds	r3, #4
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f925 	bl	800068c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d02e      	beq.n	80024b6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	429a      	cmp	r2, r3
 8002468:	d90e      	bls.n	8002488 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <prvSwitchTimerLists+0xc0>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3304      	adds	r3, #4
 800247e:	4619      	mov	r1, r3
 8002480:	4610      	mov	r0, r2
 8002482:	f7fe f8ca 	bl	800061a <vListInsert>
 8002486:	e016      	b.n	80024b6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002488:	2300      	movs	r3, #0
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2300      	movs	r3, #0
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	2100      	movs	r1, #0
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff fd7c 	bl	8001f90 <xTimerGenericCommand>
 8002498:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	603b      	str	r3, [r7, #0]
    }
 80024b2:	bf00      	nop
 80024b4:	e7fe      	b.n	80024b4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <prvSwitchTimerLists+0xc0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1b1      	bne.n	8002424 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <prvSwitchTimerLists+0xc0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <prvSwitchTimerLists+0xc4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a04      	ldr	r2, [pc, #16]	; (80024dc <prvSwitchTimerLists+0xc0>)
 80024cc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80024ce:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <prvSwitchTimerLists+0xc4>)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	6013      	str	r3, [r2, #0]
    }
 80024d4:	bf00      	nop
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000228 	.word	0x20000228
 80024e0:	2000022c 	.word	0x2000022c

080024e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80024e8:	f000 f9dc 	bl	80028a4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <prvCheckForValidListAndQueue+0x54>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d11d      	bne.n	8002530 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80024f4:	4811      	ldr	r0, [pc, #68]	; (800253c <prvCheckForValidListAndQueue+0x58>)
 80024f6:	f7fe f83f 	bl	8000578 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80024fa:	4811      	ldr	r0, [pc, #68]	; (8002540 <prvCheckForValidListAndQueue+0x5c>)
 80024fc:	f7fe f83c 	bl	8000578 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <prvCheckForValidListAndQueue+0x60>)
 8002502:	4a0e      	ldr	r2, [pc, #56]	; (800253c <prvCheckForValidListAndQueue+0x58>)
 8002504:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <prvCheckForValidListAndQueue+0x64>)
 8002508:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <prvCheckForValidListAndQueue+0x5c>)
 800250a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800250c:	2200      	movs	r2, #0
 800250e:	210c      	movs	r1, #12
 8002510:	200a      	movs	r0, #10
 8002512:	f7fe f94d 	bl	80007b0 <xQueueGenericCreate>
 8002516:	4603      	mov	r3, r0
 8002518:	4a07      	ldr	r2, [pc, #28]	; (8002538 <prvCheckForValidListAndQueue+0x54>)
 800251a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <prvCheckForValidListAndQueue+0x54>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <prvCheckForValidListAndQueue+0x54>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4908      	ldr	r1, [pc, #32]	; (800254c <prvCheckForValidListAndQueue+0x68>)
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fdcc 	bl	80010c8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002530:	f000 f9e8 	bl	8002904 <vPortExitCritical>
    }
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000230 	.word	0x20000230
 800253c:	20000200 	.word	0x20000200
 8002540:	20000214 	.word	0x20000214
 8002544:	20000228 	.word	0x20000228
 8002548:	2000022c 	.word	0x2000022c
 800254c:	0800cbf8 	.word	0x0800cbf8

08002550 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3b04      	subs	r3, #4
 8002560:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002568:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3b04      	subs	r3, #4
 800256e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f023 0201 	bic.w	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3b04      	subs	r3, #4
 800257e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002580:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <pxPortInitialiseStack+0x64>)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3b14      	subs	r3, #20
 800258a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3b04      	subs	r3, #4
 8002596:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f06f 0202 	mvn.w	r2, #2
 800259e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3b20      	subs	r3, #32
 80025a4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	080025b9 	.word	0x080025b9

080025b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <prvTaskExitError+0x54>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d00a      	beq.n	80025e2 <prvTaskExitError+0x2a>
        __asm volatile
 80025cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d0:	f383 8811 	msr	BASEPRI, r3
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	60fb      	str	r3, [r7, #12]
    }
 80025de:	bf00      	nop
 80025e0:	e7fe      	b.n	80025e0 <prvTaskExitError+0x28>
        __asm volatile
 80025e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e6:	f383 8811 	msr	BASEPRI, r3
 80025ea:	f3bf 8f6f 	isb	sy
 80025ee:	f3bf 8f4f 	dsb	sy
 80025f2:	60bb      	str	r3, [r7, #8]
    }
 80025f4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80025f6:	bf00      	nop
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0fc      	beq.n	80025f8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	20000004 	.word	0x20000004

08002610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <pxCurrentTCBConst2>)
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	6808      	ldr	r0, [r1, #0]
 8002616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800261a:	f380 8809 	msr	PSP, r0
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f04f 0000 	mov.w	r0, #0
 8002626:	f380 8811 	msr	BASEPRI, r0
 800262a:	4770      	bx	lr
 800262c:	f3af 8000 	nop.w

08002630 <pxCurrentTCBConst2>:
 8002630:	200000fc 	.word	0x200000fc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop

08002638 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002638:	4808      	ldr	r0, [pc, #32]	; (800265c <prvPortStartFirstTask+0x24>)
 800263a:	6800      	ldr	r0, [r0, #0]
 800263c:	6800      	ldr	r0, [r0, #0]
 800263e:	f380 8808 	msr	MSP, r0
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f380 8814 	msr	CONTROL, r0
 800264a:	b662      	cpsie	i
 800264c:	b661      	cpsie	f
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	df00      	svc	0
 8002658:	bf00      	nop
 800265a:	0000      	.short	0x0000
 800265c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop

08002664 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800266a:	4b46      	ldr	r3, [pc, #280]	; (8002784 <xPortStartScheduler+0x120>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a46      	ldr	r2, [pc, #280]	; (8002788 <xPortStartScheduler+0x124>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10a      	bne.n	800268a <xPortStartScheduler+0x26>
        __asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	613b      	str	r3, [r7, #16]
    }
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800268a:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <xPortStartScheduler+0x120>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a3f      	ldr	r2, [pc, #252]	; (800278c <xPortStartScheduler+0x128>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d10a      	bne.n	80026aa <xPortStartScheduler+0x46>
        __asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	60fb      	str	r3, [r7, #12]
    }
 80026a6:	bf00      	nop
 80026a8:	e7fe      	b.n	80026a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <xPortStartScheduler+0x12c>)
 80026ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	22ff      	movs	r2, #255	; 0xff
 80026ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4b31      	ldr	r3, [pc, #196]	; (8002794 <xPortStartScheduler+0x130>)
 80026d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026d2:	4b31      	ldr	r3, [pc, #196]	; (8002798 <xPortStartScheduler+0x134>)
 80026d4:	2207      	movs	r2, #7
 80026d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026d8:	e009      	b.n	80026ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80026da:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <xPortStartScheduler+0x134>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3b01      	subs	r3, #1
 80026e0:	4a2d      	ldr	r2, [pc, #180]	; (8002798 <xPortStartScheduler+0x134>)
 80026e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b80      	cmp	r3, #128	; 0x80
 80026f8:	d0ef      	beq.n	80026da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80026fa:	4b27      	ldr	r3, [pc, #156]	; (8002798 <xPortStartScheduler+0x134>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	d00a      	beq.n	800271c <xPortStartScheduler+0xb8>
        __asm volatile
 8002706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	60bb      	str	r3, [r7, #8]
    }
 8002718:	bf00      	nop
 800271a:	e7fe      	b.n	800271a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <xPortStartScheduler+0x134>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <xPortStartScheduler+0x134>)
 8002724:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <xPortStartScheduler+0x134>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800272e:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <xPortStartScheduler+0x134>)
 8002730:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <xPortStartScheduler+0x138>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a17      	ldr	r2, [pc, #92]	; (800279c <xPortStartScheduler+0x138>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002744:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <xPortStartScheduler+0x138>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a14      	ldr	r2, [pc, #80]	; (800279c <xPortStartScheduler+0x138>)
 800274c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002750:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002752:	f000 f963 	bl	8002a1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <xPortStartScheduler+0x13c>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800275c:	f000 f982 	bl	8002a64 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <xPortStartScheduler+0x140>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <xPortStartScheduler+0x140>)
 8002766:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800276a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800276c:	f7ff ff64 	bl	8002638 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002770:	f7ff f866 	bl	8001840 <vTaskSwitchContext>
    prvTaskExitError();
 8002774:	f7ff ff20 	bl	80025b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00
 8002788:	410fc271 	.word	0x410fc271
 800278c:	410fc270 	.word	0x410fc270
 8002790:	e000e400 	.word	0xe000e400
 8002794:	2000023c 	.word	0x2000023c
 8002798:	20000240 	.word	0x20000240
 800279c:	e000ed20 	.word	0xe000ed20
 80027a0:	20000004 	.word	0x20000004
 80027a4:	e000ef34 	.word	0xe000ef34

080027a8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80027ae:	4b37      	ldr	r3, [pc, #220]	; (800288c <vInitPrioGroupValue+0xe4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a37      	ldr	r2, [pc, #220]	; (8002890 <vInitPrioGroupValue+0xe8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d10a      	bne.n	80027ce <vInitPrioGroupValue+0x26>
        __asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	613b      	str	r3, [r7, #16]
    }
 80027ca:	bf00      	nop
 80027cc:	e7fe      	b.n	80027cc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80027ce:	4b2f      	ldr	r3, [pc, #188]	; (800288c <vInitPrioGroupValue+0xe4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a30      	ldr	r2, [pc, #192]	; (8002894 <vInitPrioGroupValue+0xec>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d10a      	bne.n	80027ee <vInitPrioGroupValue+0x46>
        __asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	60fb      	str	r3, [r7, #12]
    }
 80027ea:	bf00      	nop
 80027ec:	e7fe      	b.n	80027ec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <vInitPrioGroupValue+0xf0>)
 80027f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	22ff      	movs	r2, #255	; 0xff
 80027fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <vInitPrioGroupValue+0xf4>)
 8002814:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002816:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <vInitPrioGroupValue+0xf8>)
 8002818:	2207      	movs	r2, #7
 800281a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800281c:	e009      	b.n	8002832 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <vInitPrioGroupValue+0xf8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3b01      	subs	r3, #1
 8002824:	4a1e      	ldr	r2, [pc, #120]	; (80028a0 <vInitPrioGroupValue+0xf8>)
 8002826:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283a:	2b80      	cmp	r3, #128	; 0x80
 800283c:	d0ef      	beq.n	800281e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <vInitPrioGroupValue+0xf8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	d00a      	beq.n	8002860 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800284a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	60bb      	str	r3, [r7, #8]
    }
 800285c:	bf00      	nop
 800285e:	e7fe      	b.n	800285e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <vInitPrioGroupValue+0xf8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <vInitPrioGroupValue+0xf8>)
 8002868:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <vInitPrioGroupValue+0xf8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002872:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <vInitPrioGroupValue+0xf8>)
 8002874:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	410fc271 	.word	0x410fc271
 8002894:	410fc270 	.word	0x410fc270
 8002898:	e000e400 	.word	0xe000e400
 800289c:	2000023c 	.word	0x2000023c
 80028a0:	20000240 	.word	0x20000240

080028a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
        __asm volatile
 80028aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	607b      	str	r3, [r7, #4]
    }
 80028bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <vPortEnterCritical+0x58>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <vPortEnterCritical+0x58>)
 80028c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <vPortEnterCritical+0x58>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10f      	bne.n	80028f0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <vPortEnterCritical+0x5c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <vPortEnterCritical+0x4c>
        __asm volatile
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	603b      	str	r3, [r7, #0]
    }
 80028ec:	bf00      	nop
 80028ee:	e7fe      	b.n	80028ee <vPortEnterCritical+0x4a>
    }
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	20000004 	.word	0x20000004
 8002900:	e000ed04 	.word	0xe000ed04

08002904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <vPortExitCritical+0x50>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <vPortExitCritical+0x24>
        __asm volatile
 8002912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	607b      	str	r3, [r7, #4]
    }
 8002924:	bf00      	nop
 8002926:	e7fe      	b.n	8002926 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <vPortExitCritical+0x50>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3b01      	subs	r3, #1
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <vPortExitCritical+0x50>)
 8002930:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <vPortExitCritical+0x50>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <vPortExitCritical+0x42>
 800293a:	2300      	movs	r3, #0
 800293c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f383 8811 	msr	BASEPRI, r3
    }
 8002944:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	20000004 	.word	0x20000004
	...

08002960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002960:	f3ef 8009 	mrs	r0, PSP
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <pxCurrentTCBConst>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	f01e 0f10 	tst.w	lr, #16
 8002970:	bf08      	it	eq
 8002972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297a:	6010      	str	r0, [r2, #0]
 800297c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002984:	f380 8811 	msr	BASEPRI, r0
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f7fe ff56 	bl	8001840 <vTaskSwitchContext>
 8002994:	f04f 0000 	mov.w	r0, #0
 8002998:	f380 8811 	msr	BASEPRI, r0
 800299c:	bc09      	pop	{r0, r3}
 800299e:	6819      	ldr	r1, [r3, #0]
 80029a0:	6808      	ldr	r0, [r1, #0]
 80029a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029a6:	f01e 0f10 	tst.w	lr, #16
 80029aa:	bf08      	it	eq
 80029ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80029b0:	f380 8809 	msr	PSP, r0
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	f3af 8000 	nop.w

080029c0 <pxCurrentTCBConst>:
 80029c0:	200000fc 	.word	0x200000fc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop

080029c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
        __asm volatile
 80029ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d2:	f383 8811 	msr	BASEPRI, r3
 80029d6:	f3bf 8f6f 	isb	sy
 80029da:	f3bf 8f4f 	dsb	sy
 80029de:	607b      	str	r3, [r7, #4]
    }
 80029e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80029e2:	f001 ffeb 	bl	80049bc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80029e6:	f7fe fe6f 	bl	80016c8 <xTaskIncrementTick>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80029f0:	f002 f842 	bl	8004a78 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <SysTick_Handler+0x50>)
 80029f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e001      	b.n	8002a02 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80029fe:	f002 f81f 	bl	8004a40 <SEGGER_SYSVIEW_RecordExitISR>
 8002a02:	2300      	movs	r3, #0
 8002a04:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f383 8811 	msr	BASEPRI, r3
    }
 8002a0c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	e000ed04 	.word	0xe000ed04

08002a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <vPortSetupTimerInterrupt+0x34>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <vPortSetupTimerInterrupt+0x38>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <vPortSetupTimerInterrupt+0x3c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <vPortSetupTimerInterrupt+0x40>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	099b      	lsrs	r3, r3, #6
 8002a38:	4a09      	ldr	r2, [pc, #36]	; (8002a60 <vPortSetupTimerInterrupt+0x44>)
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <vPortSetupTimerInterrupt+0x34>)
 8002a40:	2207      	movs	r2, #7
 8002a42:	601a      	str	r2, [r3, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000e010 	.word	0xe000e010
 8002a54:	e000e018 	.word	0xe000e018
 8002a58:	20000010 	.word	0x20000010
 8002a5c:	10624dd3 	.word	0x10624dd3
 8002a60:	e000e014 	.word	0xe000e014

08002a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002a74 <vPortEnableVFP+0x10>
 8002a68:	6801      	ldr	r1, [r0, #0]
 8002a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002a6e:	6001      	str	r1, [r0, #0]
 8002a70:	4770      	bx	lr
 8002a72:	0000      	.short	0x0000
 8002a74:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop

08002a7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002a82:	f3ef 8305 	mrs	r3, IPSR
 8002a86:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	d914      	bls.n	8002ab8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <vPortValidateInterruptPriority+0x70>)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002a98:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <vPortValidateInterruptPriority+0x74>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	7afa      	ldrb	r2, [r7, #11]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d20a      	bcs.n	8002ab8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	607b      	str	r3, [r7, #4]
    }
 8002ab4:	bf00      	nop
 8002ab6:	e7fe      	b.n	8002ab6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <vPortValidateInterruptPriority+0x78>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <vPortValidateInterruptPriority+0x7c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d90a      	bls.n	8002ade <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	603b      	str	r3, [r7, #0]
    }
 8002ada:	bf00      	nop
 8002adc:	e7fe      	b.n	8002adc <vPortValidateInterruptPriority+0x60>
    }
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000e3f0 	.word	0xe000e3f0
 8002af0:	2000023c 	.word	0x2000023c
 8002af4:	e000ed0c 	.word	0xe000ed0c
 8002af8:	20000240 	.word	0x20000240

08002afc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002b08:	f7fe fd0e 	bl	8001528 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002b0c:	4b65      	ldr	r3, [pc, #404]	; (8002ca4 <pvPortMalloc+0x1a8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002b14:	f000 f934 	bl	8002d80 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002b18:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <pvPortMalloc+0x1ac>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f040 80a7 	bne.w	8002c74 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d02d      	beq.n	8002b88 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d227      	bcs.n	8002b88 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002b38:	2208      	movs	r2, #8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d021      	beq.n	8002b8e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f023 0307 	bic.w	r3, r3, #7
 8002b50:	3308      	adds	r3, #8
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d214      	bcs.n	8002b82 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f023 0307 	bic.w	r3, r3, #7
 8002b5e:	3308      	adds	r3, #8
 8002b60:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d010      	beq.n	8002b8e <pvPortMalloc+0x92>
        __asm volatile
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	617b      	str	r3, [r7, #20]
    }
 8002b7e:	bf00      	nop
 8002b80:	e7fe      	b.n	8002b80 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b86:	e002      	b.n	8002b8e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	e000      	b.n	8002b90 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b8e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d06e      	beq.n	8002c74 <pvPortMalloc+0x178>
 8002b96:	4b45      	ldr	r3, [pc, #276]	; (8002cac <pvPortMalloc+0x1b0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d869      	bhi.n	8002c74 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002ba0:	4b43      	ldr	r3, [pc, #268]	; (8002cb0 <pvPortMalloc+0x1b4>)
 8002ba2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002ba4:	4b42      	ldr	r3, [pc, #264]	; (8002cb0 <pvPortMalloc+0x1b4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002baa:	e004      	b.n	8002bb6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d903      	bls.n	8002bc8 <pvPortMalloc+0xcc>
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f1      	bne.n	8002bac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002bc8:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <pvPortMalloc+0x1a8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d050      	beq.n	8002c74 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	4413      	add	r3, r2
 8002bda:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	1ad2      	subs	r2, r2, r3
 8002bec:	2308      	movs	r3, #8
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d91f      	bls.n	8002c34 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <pvPortMalloc+0x120>
        __asm volatile
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	613b      	str	r3, [r7, #16]
    }
 8002c18:	bf00      	nop
 8002c1a:	e7fe      	b.n	8002c1a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	1ad2      	subs	r2, r2, r3
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002c2e:	69b8      	ldr	r0, [r7, #24]
 8002c30:	f000 f908 	bl	8002e44 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c34:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <pvPortMalloc+0x1b0>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <pvPortMalloc+0x1b0>)
 8002c40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <pvPortMalloc+0x1b0>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <pvPortMalloc+0x1b8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d203      	bcs.n	8002c56 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <pvPortMalloc+0x1b0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <pvPortMalloc+0x1b8>)
 8002c54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <pvPortMalloc+0x1ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002c6a:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <pvPortMalloc+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <pvPortMalloc+0x1bc>)
 8002c72:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002c74:	f7fe fc66 	bl	8001544 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <pvPortMalloc+0x19c>
        __asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	60fb      	str	r3, [r7, #12]
    }
 8002c94:	bf00      	nop
 8002c96:	e7fe      	b.n	8002c96 <pvPortMalloc+0x19a>
    return pvReturn;
 8002c98:	69fb      	ldr	r3, [r7, #28]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3728      	adds	r7, #40	; 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20012e4c 	.word	0x20012e4c
 8002ca8:	20012e60 	.word	0x20012e60
 8002cac:	20012e50 	.word	0x20012e50
 8002cb0:	20012e44 	.word	0x20012e44
 8002cb4:	20012e54 	.word	0x20012e54
 8002cb8:	20012e58 	.word	0x20012e58

08002cbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d04d      	beq.n	8002d6a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002cce:	2308      	movs	r3, #8
 8002cd0:	425b      	negs	r3, r3
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <vPortFree+0xb8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10a      	bne.n	8002d00 <vPortFree+0x44>
        __asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	60fb      	str	r3, [r7, #12]
    }
 8002cfc:	bf00      	nop
 8002cfe:	e7fe      	b.n	8002cfe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <vPortFree+0x62>
        __asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	60bb      	str	r3, [r7, #8]
    }
 8002d1a:	bf00      	nop
 8002d1c:	e7fe      	b.n	8002d1c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <vPortFree+0xb8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01e      	beq.n	8002d6a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d11a      	bne.n	8002d6a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <vPortFree+0xb8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	401a      	ands	r2, r3
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002d44:	f7fe fbf0 	bl	8001528 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <vPortFree+0xbc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4413      	add	r3, r2
 8002d52:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <vPortFree+0xbc>)
 8002d54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d56:	6938      	ldr	r0, [r7, #16]
 8002d58:	f000 f874 	bl	8002e44 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <vPortFree+0xc0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	4a06      	ldr	r2, [pc, #24]	; (8002d7c <vPortFree+0xc0>)
 8002d64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002d66:	f7fe fbed 	bl	8001544 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002d6a:	bf00      	nop
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20012e60 	.word	0x20012e60
 8002d78:	20012e50 	.word	0x20012e50
 8002d7c:	20012e5c 	.word	0x20012e5c

08002d80 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d86:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002d8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002d8c:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <prvHeapInit+0xac>)
 8002d8e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00c      	beq.n	8002db4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3307      	adds	r3, #7
 8002d9e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0307 	bic.w	r3, r3, #7
 8002da6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <prvHeapInit+0xac>)
 8002db0:	4413      	add	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002db8:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <prvHeapInit+0xb0>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <prvHeapInit+0xb0>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	4413      	add	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002dcc:	2208      	movs	r2, #8
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0307 	bic.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <prvHeapInit+0xb4>)
 8002de0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <prvHeapInit+0xb4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <prvHeapInit+0xb4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	1ad2      	subs	r2, r2, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <prvHeapInit+0xb4>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <prvHeapInit+0xb8>)
 8002e0e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <prvHeapInit+0xbc>)
 8002e16:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <prvHeapInit+0xc0>)
 8002e1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e1e:	601a      	str	r2, [r3, #0]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	20000244 	.word	0x20000244
 8002e30:	20012e44 	.word	0x20012e44
 8002e34:	20012e4c 	.word	0x20012e4c
 8002e38:	20012e54 	.word	0x20012e54
 8002e3c:	20012e50 	.word	0x20012e50
 8002e40:	20012e60 	.word	0x20012e60

08002e44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002e4c:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <prvInsertBlockIntoFreeList+0xac>)
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	e002      	b.n	8002e58 <prvInsertBlockIntoFreeList+0x14>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d8f7      	bhi.n	8002e52 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d108      	bne.n	8002e86 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	441a      	add	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	441a      	add	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d118      	bne.n	8002ecc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <prvInsertBlockIntoFreeList+0xb0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d00d      	beq.n	8002ec2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	441a      	add	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e008      	b.n	8002ed4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <prvInsertBlockIntoFreeList+0xb0>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e003      	b.n	8002ed4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d002      	beq.n	8002ee2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20012e44 	.word	0x20012e44
 8002ef4:	20012e4c 	.word	0x20012e4c

08002ef8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002efc:	4803      	ldr	r0, [pc, #12]	; (8002f0c <_cbSendSystemDesc+0x14>)
 8002efe:	f001 fd07 	bl	8004910 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002f02:	4803      	ldr	r0, [pc, #12]	; (8002f10 <_cbSendSystemDesc+0x18>)
 8002f04:	f001 fd04 	bl	8004910 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	0800cc00 	.word	0x0800cc00
 8002f10:	0800cc44 	.word	0x0800cc44

08002f14 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <SEGGER_SYSVIEW_Conf+0x20>)
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <SEGGER_SYSVIEW_Conf+0x20>)
 8002f1e:	6819      	ldr	r1, [r3, #0]
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <SEGGER_SYSVIEW_Conf+0x24>)
 8002f22:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <SEGGER_SYSVIEW_Conf+0x28>)
 8002f24:	f001 f870 	bl	8004008 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002f28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002f2c:	f001 f8b0 	bl	8004090 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002f30:	bf00      	nop
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000010 	.word	0x20000010
 8002f38:	08002ef9 	.word	0x08002ef9
 8002f3c:	0800cd10 	.word	0x0800cd10

08002f40 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	e033      	b.n	8002fb4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002f4c:	491e      	ldr	r1, [pc, #120]	; (8002fc8 <_cbSendTaskList+0x88>)
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	491a      	ldr	r1, [pc, #104]	; (8002fc8 <_cbSendTaskList+0x88>)
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	4c16      	ldr	r4, [pc, #88]	; (8002fc8 <_cbSendTaskList+0x88>)
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4423      	add	r3, r4
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	681c      	ldr	r4, [r3, #0]
 8002f80:	4d11      	ldr	r5, [pc, #68]	; (8002fc8 <_cbSendTaskList+0x88>)
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	442b      	add	r3, r5
 8002f8e:	330c      	adds	r3, #12
 8002f90:	681d      	ldr	r5, [r3, #0]
 8002f92:	4e0d      	ldr	r6, [pc, #52]	; (8002fc8 <_cbSendTaskList+0x88>)
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4433      	add	r3, r6
 8002fa0:	3310      	adds	r3, #16
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	4622      	mov	r2, r4
 8002faa:	f000 f8bd 	bl	8003128 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	607b      	str	r3, [r7, #4]
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <_cbSendTaskList+0x8c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d3c6      	bcc.n	8002f4c <_cbSendTaskList+0xc>
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc8:	20012e64 	.word	0x20012e64
 8002fcc:	20012f04 	.word	0x20012f04

08002fd0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002fd8:	f7fe fb64 	bl	80016a4 <xTaskGetTickCountFromISR>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2200      	movs	r2, #0
 8002fe0:	469a      	mov	sl, r3
 8002fe2:	4693      	mov	fp, r2
 8002fe4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	f04f 0a00 	mov.w	sl, #0
 8002ff4:	f04f 0b00 	mov.w	fp, #0
 8002ff8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002ffc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003000:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003004:	4652      	mov	r2, sl
 8003006:	465b      	mov	r3, fp
 8003008:	1a14      	subs	r4, r2, r0
 800300a:	eb63 0501 	sbc.w	r5, r3, r1
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	00ab      	lsls	r3, r5, #2
 8003018:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800301c:	00a2      	lsls	r2, r4, #2
 800301e:	4614      	mov	r4, r2
 8003020:	461d      	mov	r5, r3
 8003022:	eb14 0800 	adds.w	r8, r4, r0
 8003026:	eb45 0901 	adc.w	r9, r5, r1
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800303a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800303e:	4690      	mov	r8, r2
 8003040:	4699      	mov	r9, r3
 8003042:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003046:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003058 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003066:	2205      	movs	r2, #5
 8003068:	492b      	ldr	r1, [pc, #172]	; (8003118 <SYSVIEW_AddTask+0xc0>)
 800306a:	68b8      	ldr	r0, [r7, #8]
 800306c:	f009 fc8c 	bl	800c988 <memcmp>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d04b      	beq.n	800310e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003076:	4b29      	ldr	r3, [pc, #164]	; (800311c <SYSVIEW_AddTask+0xc4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b07      	cmp	r3, #7
 800307c:	d903      	bls.n	8003086 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800307e:	4828      	ldr	r0, [pc, #160]	; (8003120 <SYSVIEW_AddTask+0xc8>)
 8003080:	f001 ff44 	bl	8004f0c <SEGGER_SYSVIEW_Warn>
    return;
 8003084:	e044      	b.n	8003110 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003086:	4b25      	ldr	r3, [pc, #148]	; (800311c <SYSVIEW_AddTask+0xc4>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4926      	ldr	r1, [pc, #152]	; (8003124 <SYSVIEW_AddTask+0xcc>)
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800309a:	4b20      	ldr	r3, [pc, #128]	; (800311c <SYSVIEW_AddTask+0xc4>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4921      	ldr	r1, [pc, #132]	; (8003124 <SYSVIEW_AddTask+0xcc>)
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	3304      	adds	r3, #4
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80030b0:	4b1a      	ldr	r3, [pc, #104]	; (800311c <SYSVIEW_AddTask+0xc4>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	491b      	ldr	r1, [pc, #108]	; (8003124 <SYSVIEW_AddTask+0xcc>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3308      	adds	r3, #8
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <SYSVIEW_AddTask+0xc4>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4916      	ldr	r1, [pc, #88]	; (8003124 <SYSVIEW_AddTask+0xcc>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	330c      	adds	r3, #12
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <SYSVIEW_AddTask+0xc4>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4910      	ldr	r1, [pc, #64]	; (8003124 <SYSVIEW_AddTask+0xcc>)
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3310      	adds	r3, #16
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <SYSVIEW_AddTask+0xc4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3301      	adds	r3, #1
 80030f8:	4a08      	ldr	r2, [pc, #32]	; (800311c <SYSVIEW_AddTask+0xc4>)
 80030fa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f80e 	bl	8003128 <SYSVIEW_SendTaskInfo>
 800310c:	e000      	b.n	8003110 <SYSVIEW_AddTask+0xb8>
    return;
 800310e:	bf00      	nop

}
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	0800cc54 	.word	0x0800cc54
 800311c:	20012f04 	.word	0x20012f04
 8003120:	0800cc5c 	.word	0x0800cc5c
 8003124:	20012e64 	.word	0x20012e64

08003128 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	2214      	movs	r2, #20
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f009 fc40 	bl	800c9c4 <memset>
  TaskInfo.TaskID     = TaskID;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	4618      	mov	r0, r3
 800315e:	f001 fadf 	bl	8004720 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003162:	bf00      	nop
 8003164:	3728      	adds	r7, #40	; 0x28
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db0b      	blt.n	8003196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4907      	ldr	r1, [pc, #28]	; (80031a4 <__NVIC_EnableIRQ+0x38>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2001      	movs	r0, #1
 800318e:	fa00 f202 	lsl.w	r2, r0, r2
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	; (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	; (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003202:	f001 fedf 	bl	8004fc4 <SEGGER_SYSVIEW_IsStarted>
 8003206:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800320e:	f001 f90b 	bl	8004428 <SEGGER_SYSVIEW_Start>
  }
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <_cbOnUARTRx+0x3c>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b03      	cmp	r3, #3
 800322c:	d806      	bhi.n	800323c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <_cbOnUARTRx+0x3c>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <_cbOnUARTRx+0x3c>)
 8003238:	701a      	strb	r2, [r3, #0]
    goto Done;
 800323a:	e009      	b.n	8003250 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800323c:	f7ff ffde 	bl	80031fc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <_cbOnUARTRx+0x3c>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	1dfb      	adds	r3, r7, #7
 8003248:	2201      	movs	r2, #1
 800324a:	4619      	mov	r1, r3
 800324c:	f000 fb9a 	bl	8003984 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003250:	bf00      	nop
}
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000008 	.word	0x20000008

0800325c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <_cbOnUARTTx+0x5c>)
 8003266:	785b      	ldrb	r3, [r3, #1]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d80f      	bhi.n	800328c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <_cbOnUARTTx+0x5c>)
 800326e:	785b      	ldrb	r3, [r3, #1]
 8003270:	461a      	mov	r2, r3
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <_cbOnUARTTx+0x60>)
 8003274:	5c9a      	ldrb	r2, [r3, r2]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <_cbOnUARTTx+0x5c>)
 800327c:	785b      	ldrb	r3, [r3, #1]
 800327e:	3301      	adds	r3, #1
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <_cbOnUARTTx+0x5c>)
 8003284:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003286:	2301      	movs	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
    goto Done;
 800328a:	e00f      	b.n	80032ac <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <_cbOnUARTTx+0x5c>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fa19 	bl	80036cc <SEGGER_RTT_ReadUpBufferNoLock>
 800329a:	4603      	mov	r3, r0
 800329c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	da02      	bge.n	80032aa <_cbOnUARTTx+0x4e>
    r = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e000      	b.n	80032ac <_cbOnUARTTx+0x50>
  }
Done:
 80032aa:	bf00      	nop
  return r;
 80032ac:	68fb      	ldr	r3, [r7, #12]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000008 	.word	0x20000008
 80032bc:	0800cd18 	.word	0x0800cd18

080032c0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80032c8:	4a04      	ldr	r2, [pc, #16]	; (80032dc <SEGGER_UART_init+0x1c>)
 80032ca:	4905      	ldr	r1, [pc, #20]	; (80032e0 <SEGGER_UART_init+0x20>)
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f863 	bl	8003398 <HIF_UART_Init>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	0800321d 	.word	0x0800321d
 80032e0:	0800325d 	.word	0x0800325d

080032e4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80032ea:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <USART2_IRQHandler+0x80>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d011      	beq.n	800331e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <USART2_IRQHandler+0x84>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 030b 	and.w	r3, r3, #11
 8003308:	2b00      	cmp	r3, #0
 800330a:	d108      	bne.n	800331e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <USART2_IRQHandler+0x88>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <USART2_IRQHandler+0x88>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	79fa      	ldrb	r2, [r7, #7]
 800331a:	4610      	mov	r0, r2
 800331c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01a      	beq.n	800335e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003328:	4b11      	ldr	r3, [pc, #68]	; (8003370 <USART2_IRQHandler+0x8c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d015      	beq.n	800335c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <USART2_IRQHandler+0x8c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	1dfa      	adds	r2, r7, #7
 8003336:	4610      	mov	r0, r2
 8003338:	4798      	blx	r3
 800333a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <USART2_IRQHandler+0x90>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <USART2_IRQHandler+0x90>)
 8003348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e006      	b.n	800335e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <USART2_IRQHandler+0x80>)
 8003352:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003354:	79fa      	ldrb	r2, [r7, #7]
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <USART2_IRQHandler+0x84>)
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e000      	b.n	800335e <USART2_IRQHandler+0x7a>
      return;
 800335c:	bf00      	nop
    }
  }
}
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40004400 	.word	0x40004400
 8003368:	40004404 	.word	0x40004404
 800336c:	20012f08 	.word	0x20012f08
 8003370:	20012f0c 	.word	0x20012f0c
 8003374:	4000440c 	.word	0x4000440c

08003378 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	4000440c 	.word	0x4000440c

08003398 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80033a4:	4b2e      	ldr	r3, [pc, #184]	; (8003460 <HIF_UART_Init+0xc8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2d      	ldr	r2, [pc, #180]	; (8003460 <HIF_UART_Init+0xc8>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ae:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80033b0:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <HIF_UART_Init+0xcc>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <HIF_UART_Init+0xcc>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80033bc:	4b2a      	ldr	r3, [pc, #168]	; (8003468 <HIF_UART_Init+0xd0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80033d0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80033d2:	4a25      	ldr	r2, [pc, #148]	; (8003468 <HIF_UART_Init+0xd0>)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80033d8:	4b24      	ldr	r3, [pc, #144]	; (800346c <HIF_UART_Init+0xd4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80033ec:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80033ee:	4a1f      	ldr	r2, [pc, #124]	; (800346c <HIF_UART_Init+0xd4>)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80033f4:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HIF_UART_Init+0xd8>)
 80033f6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80033fa:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80033fc:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HIF_UART_Init+0xdc>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HIF_UART_Init+0xe0>)
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800340e:	4a1b      	ldr	r2, [pc, #108]	; (800347c <HIF_UART_Init+0xe4>)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	3301      	adds	r3, #1
 8003418:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003426:	d302      	bcc.n	800342e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003428:	f640 73ff 	movw	r3, #4095	; 0xfff
 800342c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	4a11      	ldr	r2, [pc, #68]	; (8003480 <HIF_UART_Init+0xe8>)
 800343a:	b29b      	uxth	r3, r3
 800343c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800343e:	4a11      	ldr	r2, [pc, #68]	; (8003484 <HIF_UART_Init+0xec>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003444:	4a10      	ldr	r2, [pc, #64]	; (8003488 <HIF_UART_Init+0xf0>)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800344a:	2106      	movs	r1, #6
 800344c:	2026      	movs	r0, #38	; 0x26
 800344e:	f7ff feab 	bl	80031a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003452:	2026      	movs	r0, #38	; 0x26
 8003454:	f7ff fe8a 	bl	800316c <__NVIC_EnableIRQ>
}
 8003458:	bf00      	nop
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40023840 	.word	0x40023840
 8003464:	40023830 	.word	0x40023830
 8003468:	40020020 	.word	0x40020020
 800346c:	40020000 	.word	0x40020000
 8003470:	4000440c 	.word	0x4000440c
 8003474:	40004410 	.word	0x40004410
 8003478:	40004414 	.word	0x40004414
 800347c:	0501bd00 	.word	0x0501bd00
 8003480:	40004408 	.word	0x40004408
 8003484:	20012f08 	.word	0x20012f08
 8003488:	20012f0c 	.word	0x20012f0c

0800348c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003492:	4b24      	ldr	r3, [pc, #144]	; (8003524 <_DoInit+0x98>)
 8003494:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2203      	movs	r2, #3
 80034a0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a20      	ldr	r2, [pc, #128]	; (8003528 <_DoInit+0x9c>)
 80034a6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a20      	ldr	r2, [pc, #128]	; (800352c <_DoInit+0xa0>)
 80034ac:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a17      	ldr	r2, [pc, #92]	; (8003528 <_DoInit+0x9c>)
 80034cc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <_DoInit+0xa4>)
 80034d2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2210      	movs	r2, #16
 80034d8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3307      	adds	r3, #7
 80034f0:	4a10      	ldr	r2, [pc, #64]	; (8003534 <_DoInit+0xa8>)
 80034f2:	6810      	ldr	r0, [r2, #0]
 80034f4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80034f6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a0e      	ldr	r2, [pc, #56]	; (8003538 <_DoInit+0xac>)
 80034fe:	6810      	ldr	r0, [r2, #0]
 8003500:	6018      	str	r0, [r3, #0]
 8003502:	8891      	ldrh	r1, [r2, #4]
 8003504:	7992      	ldrb	r2, [r2, #6]
 8003506:	8099      	strh	r1, [r3, #4]
 8003508:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800350a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003514:	f3bf 8f5f 	dmb	sy
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	20012f10 	.word	0x20012f10
 8003528:	0800ccac 	.word	0x0800ccac
 800352c:	20012fb8 	.word	0x20012fb8
 8003530:	200133b8 	.word	0x200133b8
 8003534:	0800ccb8 	.word	0x0800ccb8
 8003538:	0800ccbc 	.word	0x0800ccbc

0800353c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003548:	2300      	movs	r3, #0
 800354a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	429a      	cmp	r2, r3
 800355e:	d905      	bls.n	800356c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	e007      	b.n	800357c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	69b9      	ldr	r1, [r7, #24]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	1acb      	subs	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	3b01      	subs	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003586:	4293      	cmp	r3, r2
 8003588:	bf28      	it	cs
 800358a:	4613      	movcs	r3, r2
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4293      	cmp	r3, r2
 8003594:	bf28      	it	cs
 8003596:	4613      	movcs	r3, r2
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80035a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	6978      	ldr	r0, [r7, #20]
 80035aa:	f009 f9fd 	bl	800c9a8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80035ae:	6a3a      	ldr	r2, [r7, #32]
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	4413      	add	r3, r2
 80035b4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	4413      	add	r3, r2
 80035bc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	4413      	add	r3, r2
 80035cc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d101      	bne.n	80035dc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80035dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1b2      	bne.n	8003552 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80035ec:	6a3b      	ldr	r3, [r7, #32]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3728      	adds	r7, #40	; 0x28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b088      	sub	sp, #32
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	429a      	cmp	r2, r3
 8003618:	d911      	bls.n	800363e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	6938      	ldr	r0, [r7, #16]
 800362a:	f009 f9bd 	bl	800c9a8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800362e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	441a      	add	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800363c:	e01f      	b.n	800367e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	6938      	ldr	r0, [r7, #16]
 8003652:	f009 f9a9 	bl	800c9a8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4413      	add	r3, r2
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4619      	mov	r1, r3
 800366e:	6938      	ldr	r0, [r7, #16]
 8003670:	f009 f99a 	bl	800c9a8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003674:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	60da      	str	r2, [r3, #12]
}
 800367e:	bf00      	nop
 8003680:	3720      	adds	r7, #32
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003686:	b480      	push	{r7}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d808      	bhi.n	80036b4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad2      	subs	r2, r2, r3
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4413      	add	r3, r2
 80036ae:	3b01      	subs	r3, #1
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e004      	b.n	80036be <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80036be:	697b      	ldr	r3, [r7, #20]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	; 0x30
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80036d8:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80036e6:	f7ff fed1 	bl	800348c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	4613      	mov	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4a37      	ldr	r2, [pc, #220]	; (80037d4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80036f8:	4413      	add	r3, r2
 80036fa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	429a      	cmp	r2, r3
 8003716:	d92b      	bls.n	8003770 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4293      	cmp	r3, r2
 8003728:	bf28      	it	cs
 800372a:	4613      	movcs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	4413      	add	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	6939      	ldr	r1, [r7, #16]
 800373c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800373e:	f009 f933 	bl	800c9a8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	4413      	add	r3, r2
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	4413      	add	r3, r2
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800375a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	4413      	add	r3, r2
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003768:	429a      	cmp	r2, r3
 800376a:	d101      	bne.n	8003770 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800376c:	2300      	movs	r3, #0
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4293      	cmp	r3, r2
 800377e:	bf28      	it	cs
 8003780:	4613      	movcs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d019      	beq.n	80037be <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	4413      	add	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	6939      	ldr	r1, [r7, #16]
 8003798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800379a:	f009 f905 	bl	800c9a8 <memcpy>
    NumBytesRead += NumBytesRem;
 800379e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	4413      	add	r3, r2
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80037a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	4413      	add	r3, r2
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80037b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	4413      	add	r3, r2
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3730      	adds	r7, #48	; 0x30
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20012f10 	.word	0x20012f10

080037d8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	; 0x30
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80037e4:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <SEGGER_RTT_ReadNoLock+0x108>)
 80037e6:	623b      	str	r3, [r7, #32]
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <SEGGER_RTT_ReadNoLock+0x1e>
 80037f2:	f7ff fe4b 	bl	800348c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4613      	mov	r3, r2
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	3360      	adds	r3, #96	; 0x60
 8003802:	4a37      	ldr	r2, [pc, #220]	; (80038e0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003804:	4413      	add	r3, r2
 8003806:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003818:	2300      	movs	r3, #0
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800381c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	429a      	cmp	r2, r3
 8003822:	d92b      	bls.n	800387c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4293      	cmp	r3, r2
 8003834:	bf28      	it	cs
 8003836:	4613      	movcs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	4413      	add	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	6939      	ldr	r1, [r7, #16]
 8003848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800384a:	f009 f8ad 	bl	800c9a8 <memcpy>
    NumBytesRead += NumBytesRem;
 800384e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4413      	add	r3, r2
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	4413      	add	r3, r2
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	4413      	add	r3, r2
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003874:	429a      	cmp	r2, r3
 8003876:	d101      	bne.n	800387c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003878:	2300      	movs	r3, #0
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4293      	cmp	r3, r2
 800388a:	bf28      	it	cs
 800388c:	4613      	movcs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d019      	beq.n	80038ca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	4413      	add	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	6939      	ldr	r1, [r7, #16]
 80038a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038a6:	f009 f87f 	bl	800c9a8 <memcpy>
    NumBytesRead += NumBytesRem;
 80038aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	4413      	add	r3, r2
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80038b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	4413      	add	r3, r2
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80038c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	4413      	add	r3, r2
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3730      	adds	r7, #48	; 0x30
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20012f10 	.word	0x20012f10

080038e4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4613      	mov	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4413      	add	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	3360      	adds	r3, #96	; 0x60
 8003900:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003902:	4413      	add	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d029      	beq.n	8003962 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800390e:	2b02      	cmp	r3, #2
 8003910:	d82e      	bhi.n	8003970 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003916:	2b01      	cmp	r3, #1
 8003918:	d013      	beq.n	8003942 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800391a:	e029      	b.n	8003970 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800391c:	6978      	ldr	r0, [r7, #20]
 800391e:	f7ff feb2 	bl	8003686 <_GetAvailWriteSpace>
 8003922:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d202      	bcs.n	8003932 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003930:	e021      	b.n	8003976 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	69b9      	ldr	r1, [r7, #24]
 800393a:	6978      	ldr	r0, [r7, #20]
 800393c:	f7ff fe5b 	bl	80035f6 <_WriteNoCheck>
    break;
 8003940:	e019      	b.n	8003976 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003942:	6978      	ldr	r0, [r7, #20]
 8003944:	f7ff fe9f 	bl	8003686 <_GetAvailWriteSpace>
 8003948:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4293      	cmp	r3, r2
 8003950:	bf28      	it	cs
 8003952:	4613      	movcs	r3, r2
 8003954:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	69b9      	ldr	r1, [r7, #24]
 800395a:	6978      	ldr	r0, [r7, #20]
 800395c:	f7ff fe4b 	bl	80035f6 <_WriteNoCheck>
    break;
 8003960:	e009      	b.n	8003976 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	69b9      	ldr	r1, [r7, #24]
 8003966:	6978      	ldr	r0, [r7, #20]
 8003968:	f7ff fde8 	bl	800353c <_WriteBlocking>
 800396c:	61f8      	str	r0, [r7, #28]
    break;
 800396e:	e002      	b.n	8003976 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
    break;
 8003974:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003976:	69fb      	ldr	r3, [r7, #28]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20012f10 	.word	0x20012f10

08003984 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003990:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800399e:	f7ff fd75 	bl	800348c <_DoInit>
  SEGGER_RTT_LOCK();
 80039a2:	f3ef 8311 	mrs	r3, BASEPRI
 80039a6:	f04f 0120 	mov.w	r1, #32
 80039aa:	f381 8811 	msr	BASEPRI, r1
 80039ae:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7ff ff95 	bl	80038e4 <SEGGER_RTT_WriteDownBufferNoLock>
 80039ba:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80039c2:	697b      	ldr	r3, [r7, #20]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20012f10 	.word	0x20012f10

080039d0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80039de:	4b3d      	ldr	r3, [pc, #244]	; (8003ad4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80039ec:	f7ff fd4e 	bl	800348c <_DoInit>
  SEGGER_RTT_LOCK();
 80039f0:	f3ef 8311 	mrs	r3, BASEPRI
 80039f4:	f04f 0120 	mov.w	r1, #32
 80039f8:	f381 8811 	msr	BASEPRI, r1
 80039fc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80039fe:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003a00:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003a06:	6939      	ldr	r1, [r7, #16]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	440b      	add	r3, r1
 8003a16:	3304      	adds	r3, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3301      	adds	r3, #1
 8003a22:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	dbeb      	blt.n	8003a06 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003a2e:	e000      	b.n	8003a32 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003a30:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	da3f      	bge.n	8003abc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003a3c:	6939      	ldr	r1, [r7, #16]
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	4613      	mov	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	440b      	add	r3, r1
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003a50:	6939      	ldr	r1, [r7, #16]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	4613      	mov	r3, r2
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	4413      	add	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	440b      	add	r3, r1
 8003a60:	3304      	adds	r3, #4
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003a66:	6939      	ldr	r1, [r7, #16]
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	440b      	add	r3, r1
 8003a74:	3320      	adds	r3, #32
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003a7a:	6939      	ldr	r1, [r7, #16]
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	440b      	add	r3, r1
 8003a88:	3328      	adds	r3, #40	; 0x28
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003a8e:	6939      	ldr	r1, [r7, #16]
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3324      	adds	r3, #36	; 0x24
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003aa2:	6939      	ldr	r1, [r7, #16]
 8003aa4:	69fa      	ldr	r2, [r7, #28]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	440b      	add	r3, r1
 8003ab0:	332c      	adds	r3, #44	; 0x2c
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ab6:	f3bf 8f5f 	dmb	sy
 8003aba:	e002      	b.n	8003ac2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003abc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20012f10 	.word	0x20012f10

08003ad8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003ae6:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003af4:	f7ff fcca 	bl	800348c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003af8:	4b2e      	ldr	r3, [pc, #184]	; (8003bb4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003afa:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	461a      	mov	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d24d      	bcs.n	8003ba4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003b08:	f3ef 8311 	mrs	r3, BASEPRI
 8003b0c:	f04f 0120 	mov.w	r1, #32
 8003b10:	f381 8811 	msr	BASEPRI, r1
 8003b14:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d031      	beq.n	8003b80 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003b1c:	6979      	ldr	r1, [r7, #20]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4613      	mov	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	3360      	adds	r3, #96	; 0x60
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003b30:	6979      	ldr	r1, [r7, #20]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4613      	mov	r3, r2
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3364      	adds	r3, #100	; 0x64
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003b44:	6979      	ldr	r1, [r7, #20]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	440b      	add	r3, r1
 8003b52:	3368      	adds	r3, #104	; 0x68
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003b58:	6979      	ldr	r1, [r7, #20]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	440b      	add	r3, r1
 8003b66:	3370      	adds	r3, #112	; 0x70
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003b6c:	6979      	ldr	r1, [r7, #20]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	336c      	adds	r3, #108	; 0x6c
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003b80:	6979      	ldr	r1, [r7, #20]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4613      	mov	r3, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4413      	add	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	440b      	add	r3, r1
 8003b8e:	3374      	adds	r3, #116	; 0x74
 8003b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b92:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b94:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	e002      	b.n	8003baa <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003baa:	69fb      	ldr	r3, [r7, #28]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20012f10 	.word	0x20012f10

08003bb8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003bc8:	e002      	b.n	8003bd0 <_EncodeStr+0x18>
    Len++;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f6      	bne.n	8003bca <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d901      	bls.n	8003be8 <_EncodeStr+0x30>
    Len = Limit;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2bfe      	cmp	r3, #254	; 0xfe
 8003bec:	d806      	bhi.n	8003bfc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	60fa      	str	r2, [r7, #12]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	e011      	b.n	8003c20 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	60fa      	str	r2, [r7, #12]
 8003c02:	22ff      	movs	r2, #255	; 0xff
 8003c04:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	60fa      	str	r2, [r7, #12]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	0a19      	lsrs	r1, r3, #8
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	60fa      	str	r2, [r7, #12]
 8003c1c:	b2ca      	uxtb	r2, r1
 8003c1e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c24:	e00a      	b.n	8003c3c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	1c53      	adds	r3, r2, #1
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	1c59      	adds	r1, r3, #1
 8003c30:	60f9      	str	r1, [r7, #12]
 8003c32:	7812      	ldrb	r2, [r2, #0]
 8003c34:	701a      	strb	r2, [r3, #0]
    n++;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d3f0      	bcc.n	8003c26 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003c44:	68fb      	ldr	r3, [r7, #12]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3304      	adds	r3, #4
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c72:	4b36      	ldr	r3, [pc, #216]	; (8003d4c <_HandleIncomingPacket+0xe0>)
 8003c74:	7e1b      	ldrb	r3, [r3, #24]
 8003c76:	4618      	mov	r0, r3
 8003c78:	1cfb      	adds	r3, r7, #3
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f7ff fdab 	bl	80037d8 <SEGGER_RTT_ReadNoLock>
 8003c82:	4603      	mov	r3, r0
 8003c84:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	dd54      	ble.n	8003d36 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	2b80      	cmp	r3, #128	; 0x80
 8003c90:	d032      	beq.n	8003cf8 <_HandleIncomingPacket+0x8c>
 8003c92:	2b80      	cmp	r3, #128	; 0x80
 8003c94:	dc42      	bgt.n	8003d1c <_HandleIncomingPacket+0xb0>
 8003c96:	2b07      	cmp	r3, #7
 8003c98:	dc16      	bgt.n	8003cc8 <_HandleIncomingPacket+0x5c>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	dd3e      	ble.n	8003d1c <_HandleIncomingPacket+0xb0>
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	2b06      	cmp	r3, #6
 8003ca2:	d83b      	bhi.n	8003d1c <_HandleIncomingPacket+0xb0>
 8003ca4:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <_HandleIncomingPacket+0x40>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003ccf 	.word	0x08003ccf
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003cdb 	.word	0x08003cdb
 8003cb8:	08003ce1 	.word	0x08003ce1
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003ced 	.word	0x08003ced
 8003cc4:	08003cf3 	.word	0x08003cf3
 8003cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8003cca:	d036      	beq.n	8003d3a <_HandleIncomingPacket+0xce>
 8003ccc:	e026      	b.n	8003d1c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003cce:	f000 fbab 	bl	8004428 <SEGGER_SYSVIEW_Start>
      break;
 8003cd2:	e037      	b.n	8003d44 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003cd4:	f000 fc64 	bl	80045a0 <SEGGER_SYSVIEW_Stop>
      break;
 8003cd8:	e034      	b.n	8003d44 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003cda:	f000 fe3d 	bl	8004958 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003cde:	e031      	b.n	8003d44 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003ce0:	f000 fe02 	bl	80048e8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003ce4:	e02e      	b.n	8003d44 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003ce6:	f000 fc81 	bl	80045ec <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003cea:	e02b      	b.n	8003d44 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003cec:	f001 f8d0 	bl	8004e90 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003cf0:	e028      	b.n	8003d44 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003cf2:	f001 f8af 	bl	8004e54 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003cf6:	e025      	b.n	8003d44 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003cf8:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <_HandleIncomingPacket+0xe0>)
 8003cfa:	7e1b      	ldrb	r3, [r3, #24]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	1cfb      	adds	r3, r7, #3
 8003d00:	2201      	movs	r2, #1
 8003d02:	4619      	mov	r1, r3
 8003d04:	f7ff fd68 	bl	80037d8 <SEGGER_RTT_ReadNoLock>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	dd15      	ble.n	8003d3e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 f81d 	bl	8004d54 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003d1a:	e010      	b.n	8003d3e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	b25b      	sxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	da0e      	bge.n	8003d42 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <_HandleIncomingPacket+0xe0>)
 8003d26:	7e1b      	ldrb	r3, [r3, #24]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	1cfb      	adds	r3, r7, #3
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f7ff fd52 	bl	80037d8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003d34:	e005      	b.n	8003d42 <_HandleIncomingPacket+0xd6>
    }
  }
 8003d36:	bf00      	nop
 8003d38:	e004      	b.n	8003d44 <_HandleIncomingPacket+0xd8>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e002      	b.n	8003d44 <_HandleIncomingPacket+0xd8>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e000      	b.n	8003d44 <_HandleIncomingPacket+0xd8>
      break;
 8003d42:	bf00      	nop
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	200143d0 	.word	0x200143d0

08003d50 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08c      	sub	sp, #48	; 0x30
 8003d54:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003d56:	2301      	movs	r3, #1
 8003d58:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003d5a:	1d3b      	adds	r3, r7, #4
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d64:	4b32      	ldr	r3, [pc, #200]	; (8003e30 <_TrySendOverflowPacket+0xe0>)
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6a:	e00b      	b.n	8003d84 <_TrySendOverflowPacket+0x34>
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	1c59      	adds	r1, r3, #1
 8003d74:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	09db      	lsrs	r3, r3, #7
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	2b7f      	cmp	r3, #127	; 0x7f
 8003d88:	d8f0      	bhi.n	8003d6c <_TrySendOverflowPacket+0x1c>
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003d9a:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <_TrySendOverflowPacket+0xe4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003da0:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <_TrySendOverflowPacket+0xe0>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	623b      	str	r3, [r7, #32]
 8003db2:	e00b      	b.n	8003dcc <_TrySendOverflowPacket+0x7c>
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	1c59      	adds	r1, r3, #1
 8003dbc:	6279      	str	r1, [r7, #36]	; 0x24
 8003dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	09db      	lsrs	r3, r3, #7
 8003dca:	623b      	str	r3, [r7, #32]
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	2b7f      	cmp	r3, #127	; 0x7f
 8003dd0:	d8f0      	bhi.n	8003db4 <_TrySendOverflowPacket+0x64>
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	627a      	str	r2, [r7, #36]	; 0x24
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003de2:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <_TrySendOverflowPacket+0xe0>)
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	4618      	mov	r0, r3
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	f7fc f9f4 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003dfc:	f7ff fabc 	bl	8003378 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003e06:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <_TrySendOverflowPacket+0xe0>)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003e0c:	4b08      	ldr	r3, [pc, #32]	; (8003e30 <_TrySendOverflowPacket+0xe0>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <_TrySendOverflowPacket+0xe0>)
 8003e16:	701a      	strb	r2, [r3, #0]
 8003e18:	e004      	b.n	8003e24 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003e1a:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <_TrySendOverflowPacket+0xe0>)
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	4a03      	ldr	r2, [pc, #12]	; (8003e30 <_TrySendOverflowPacket+0xe0>)
 8003e22:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003e24:	693b      	ldr	r3, [r7, #16]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3730      	adds	r7, #48	; 0x30
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	200143d0 	.word	0x200143d0
 8003e34:	e0001004 	.word	0xe0001004

08003e38 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	; 0x28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003e44:	4b6d      	ldr	r3, [pc, #436]	; (8003ffc <_SendPacket+0x1c4>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d010      	beq.n	8003e6e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003e4c:	4b6b      	ldr	r3, [pc, #428]	; (8003ffc <_SendPacket+0x1c4>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80a5 	beq.w	8003fa0 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003e56:	4b69      	ldr	r3, [pc, #420]	; (8003ffc <_SendPacket+0x1c4>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d109      	bne.n	8003e72 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003e5e:	f7ff ff77 	bl	8003d50 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003e62:	4b66      	ldr	r3, [pc, #408]	; (8003ffc <_SendPacket+0x1c4>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	f040 809c 	bne.w	8003fa4 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8003e6c:	e001      	b.n	8003e72 <_SendPacket+0x3a>
    goto Send;
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <_SendPacket+0x3c>
Send:
 8003e72:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b1f      	cmp	r3, #31
 8003e78:	d809      	bhi.n	8003e8e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003e7a:	4b60      	ldr	r3, [pc, #384]	; (8003ffc <_SendPacket+0x1c4>)
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f040 808d 	bne.w	8003fa8 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b17      	cmp	r3, #23
 8003e92:	d807      	bhi.n	8003ea4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e03d      	b.n	8003f20 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb0:	d912      	bls.n	8003ed8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	09da      	lsrs	r2, r3, #7
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	3a01      	subs	r2, #1
 8003eca:	60fa      	str	r2, [r7, #12]
 8003ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	e006      	b.n	8003ee6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8003eea:	d912      	bls.n	8003f12 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	09da      	lsrs	r2, r3, #7
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	3a01      	subs	r2, #1
 8003f04:	60fa      	str	r2, [r7, #12]
 8003f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	701a      	strb	r2, [r3, #0]
 8003f10:	e006      	b.n	8003f20 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f20:	4b37      	ldr	r3, [pc, #220]	; (8004000 <_SendPacket+0x1c8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f26:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <_SendPacket+0x1c4>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	623b      	str	r3, [r7, #32]
 8003f38:	e00b      	b.n	8003f52 <_SendPacket+0x11a>
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	1c59      	adds	r1, r3, #1
 8003f42:	6279      	str	r1, [r7, #36]	; 0x24
 8003f44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	09db      	lsrs	r3, r3, #7
 8003f50:	623b      	str	r3, [r7, #32]
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	2b7f      	cmp	r3, #127	; 0x7f
 8003f56:	d8f0      	bhi.n	8003f3a <_SendPacket+0x102>
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	627a      	str	r2, [r7, #36]	; 0x24
 8003f5e:	6a3a      	ldr	r2, [r7, #32]
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003f68:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <_SendPacket+0x1c4>)
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	f7fc f932 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003f80:	f7ff f9fa 	bl	8003378 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003f8a:	4a1c      	ldr	r2, [pc, #112]	; (8003ffc <_SendPacket+0x1c4>)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	60d3      	str	r3, [r2, #12]
 8003f90:	e00b      	b.n	8003faa <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003f92:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <_SendPacket+0x1c4>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	3301      	adds	r3, #1
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <_SendPacket+0x1c4>)
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e004      	b.n	8003faa <_SendPacket+0x172>
    goto SendDone;
 8003fa0:	bf00      	nop
 8003fa2:	e002      	b.n	8003faa <_SendPacket+0x172>
      goto SendDone;
 8003fa4:	bf00      	nop
 8003fa6:	e000      	b.n	8003faa <_SendPacket+0x172>
      goto SendDone;
 8003fa8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <_SendPacket+0x1c4>)
 8003fac:	7e1b      	ldrb	r3, [r3, #24]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4a14      	ldr	r2, [pc, #80]	; (8004004 <_SendPacket+0x1cc>)
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	440b      	add	r3, r1
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	336c      	adds	r3, #108	; 0x6c
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <_SendPacket+0x1c4>)
 8003fc2:	7e1b      	ldrb	r3, [r3, #24]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	490f      	ldr	r1, [pc, #60]	; (8004004 <_SendPacket+0x1cc>)
 8003fc8:	4603      	mov	r3, r0
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4403      	add	r3, r0
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	440b      	add	r3, r1
 8003fd2:	3370      	adds	r3, #112	; 0x70
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d00b      	beq.n	8003ff2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003fda:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <_SendPacket+0x1c4>)
 8003fdc:	789b      	ldrb	r3, [r3, #2]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d107      	bne.n	8003ff2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <_SendPacket+0x1c4>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003fe8:	f7ff fe40 	bl	8003c6c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <_SendPacket+0x1c4>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003ff2:	bf00      	nop
 8003ff4:	3728      	adds	r7, #40	; 0x28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200143d0 	.word	0x200143d0
 8004000:	e0001004 	.word	0xe0001004
 8004004:	20012f10 	.word	0x20012f10

08004008 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004016:	2300      	movs	r3, #0
 8004018:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800401c:	4917      	ldr	r1, [pc, #92]	; (800407c <SEGGER_SYSVIEW_Init+0x74>)
 800401e:	4818      	ldr	r0, [pc, #96]	; (8004080 <SEGGER_SYSVIEW_Init+0x78>)
 8004020:	f7ff fcd6 	bl	80039d0 <SEGGER_RTT_AllocUpBuffer>
 8004024:	4603      	mov	r3, r0
 8004026:	b2da      	uxtb	r2, r3
 8004028:	4b16      	ldr	r3, [pc, #88]	; (8004084 <SEGGER_SYSVIEW_Init+0x7c>)
 800402a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800402c:	4b15      	ldr	r3, [pc, #84]	; (8004084 <SEGGER_SYSVIEW_Init+0x7c>)
 800402e:	785a      	ldrb	r2, [r3, #1]
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <SEGGER_SYSVIEW_Init+0x7c>)
 8004032:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004034:	4b13      	ldr	r3, [pc, #76]	; (8004084 <SEGGER_SYSVIEW_Init+0x7c>)
 8004036:	7e1b      	ldrb	r3, [r3, #24]
 8004038:	4618      	mov	r0, r3
 800403a:	2300      	movs	r3, #0
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	2308      	movs	r3, #8
 8004040:	4a11      	ldr	r2, [pc, #68]	; (8004088 <SEGGER_SYSVIEW_Init+0x80>)
 8004042:	490f      	ldr	r1, [pc, #60]	; (8004080 <SEGGER_SYSVIEW_Init+0x78>)
 8004044:	f7ff fd48 	bl	8003ad8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <SEGGER_SYSVIEW_Init+0x7c>)
 800404a:	2200      	movs	r2, #0
 800404c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <SEGGER_SYSVIEW_Init+0x84>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a0c      	ldr	r2, [pc, #48]	; (8004084 <SEGGER_SYSVIEW_Init+0x7c>)
 8004054:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004056:	4a0b      	ldr	r2, [pc, #44]	; (8004084 <SEGGER_SYSVIEW_Init+0x7c>)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800405c:	4a09      	ldr	r2, [pc, #36]	; (8004084 <SEGGER_SYSVIEW_Init+0x7c>)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <SEGGER_SYSVIEW_Init+0x7c>)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004068:	4a06      	ldr	r2, [pc, #24]	; (8004084 <SEGGER_SYSVIEW_Init+0x7c>)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <SEGGER_SYSVIEW_Init+0x7c>)
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	200133c8 	.word	0x200133c8
 8004080:	0800ccc4 	.word	0x0800ccc4
 8004084:	200143d0 	.word	0x200143d0
 8004088:	200143c8 	.word	0x200143c8
 800408c:	e0001004 	.word	0xe0001004

08004090 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6113      	str	r3, [r2, #16]
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	200143d0 	.word	0x200143d0

080040b0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040b8:	f3ef 8311 	mrs	r3, BASEPRI
 80040bc:	f04f 0120 	mov.w	r1, #32
 80040c0:	f381 8811 	msr	BASEPRI, r1
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	4808      	ldr	r0, [pc, #32]	; (80040e8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80040c8:	f7ff fdc3 	bl	8003c52 <_PreparePacket>
 80040cc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	68b8      	ldr	r0, [r7, #8]
 80040d4:	f7ff feb0 	bl	8003e38 <_SendPacket>
  RECORD_END();
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f383 8811 	msr	BASEPRI, r3
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20014400 	.word	0x20014400

080040ec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040f6:	f3ef 8311 	mrs	r3, BASEPRI
 80040fa:	f04f 0120 	mov.w	r1, #32
 80040fe:	f381 8811 	msr	BASEPRI, r1
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	4816      	ldr	r0, [pc, #88]	; (8004160 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004106:	f7ff fda4 	bl	8003c52 <_PreparePacket>
 800410a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e00b      	b.n	8004132 <SEGGER_SYSVIEW_RecordU32+0x46>
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	1c59      	adds	r1, r3, #1
 8004122:	61f9      	str	r1, [r7, #28]
 8004124:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	09db      	lsrs	r3, r3, #7
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b7f      	cmp	r3, #127	; 0x7f
 8004136:	d8f0      	bhi.n	800411a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	61fa      	str	r2, [r7, #28]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	6938      	ldr	r0, [r7, #16]
 800414e:	f7ff fe73 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f383 8811 	msr	BASEPRI, r3
}
 8004158:	bf00      	nop
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20014400 	.word	0x20014400

08004164 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b08c      	sub	sp, #48	; 0x30
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004170:	f3ef 8311 	mrs	r3, BASEPRI
 8004174:	f04f 0120 	mov.w	r1, #32
 8004178:	f381 8811 	msr	BASEPRI, r1
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	4825      	ldr	r0, [pc, #148]	; (8004214 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004180:	f7ff fd67 	bl	8003c52 <_PreparePacket>
 8004184:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
 8004192:	e00b      	b.n	80041ac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	b2da      	uxtb	r2, r3
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	1c59      	adds	r1, r3, #1
 800419c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800419e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	09db      	lsrs	r3, r3, #7
 80041aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	2b7f      	cmp	r3, #127	; 0x7f
 80041b0:	d8f0      	bhi.n	8004194 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	e00b      	b.n	80041e4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	1c59      	adds	r1, r3, #1
 80041d4:	6279      	str	r1, [r7, #36]	; 0x24
 80041d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	09db      	lsrs	r3, r3, #7
 80041e2:	623b      	str	r3, [r7, #32]
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	2b7f      	cmp	r3, #127	; 0x7f
 80041e8:	d8f0      	bhi.n	80041cc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	627a      	str	r2, [r7, #36]	; 0x24
 80041f0:	6a3a      	ldr	r2, [r7, #32]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	6979      	ldr	r1, [r7, #20]
 80041fe:	69b8      	ldr	r0, [r7, #24]
 8004200:	f7ff fe1a 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f383 8811 	msr	BASEPRI, r3
}
 800420a:	bf00      	nop
 800420c:	3730      	adds	r7, #48	; 0x30
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20014400 	.word	0x20014400

08004218 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b08e      	sub	sp, #56	; 0x38
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004226:	f3ef 8311 	mrs	r3, BASEPRI
 800422a:	f04f 0120 	mov.w	r1, #32
 800422e:	f381 8811 	msr	BASEPRI, r1
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	4832      	ldr	r0, [pc, #200]	; (8004300 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004236:	f7ff fd0c 	bl	8003c52 <_PreparePacket>
 800423a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
 8004248:	e00b      	b.n	8004262 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	b2da      	uxtb	r2, r3
 800424e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004250:	1c59      	adds	r1, r3, #1
 8004252:	6379      	str	r1, [r7, #52]	; 0x34
 8004254:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	09db      	lsrs	r3, r3, #7
 8004260:	633b      	str	r3, [r7, #48]	; 0x30
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	2b7f      	cmp	r3, #127	; 0x7f
 8004266:	d8f0      	bhi.n	800424a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	637a      	str	r2, [r7, #52]	; 0x34
 800426e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004280:	e00b      	b.n	800429a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	b2da      	uxtb	r2, r3
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	1c59      	adds	r1, r3, #1
 800428a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800428c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	09db      	lsrs	r3, r3, #7
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	2b7f      	cmp	r3, #127	; 0x7f
 800429e:	d8f0      	bhi.n	8004282 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	623b      	str	r3, [r7, #32]
 80042b8:	e00b      	b.n	80042d2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	1c59      	adds	r1, r3, #1
 80042c2:	6279      	str	r1, [r7, #36]	; 0x24
 80042c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	701a      	strb	r2, [r3, #0]
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	09db      	lsrs	r3, r3, #7
 80042d0:	623b      	str	r3, [r7, #32]
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	2b7f      	cmp	r3, #127	; 0x7f
 80042d6:	d8f0      	bhi.n	80042ba <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	627a      	str	r2, [r7, #36]	; 0x24
 80042de:	6a3a      	ldr	r2, [r7, #32]
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	6979      	ldr	r1, [r7, #20]
 80042ec:	69b8      	ldr	r0, [r7, #24]
 80042ee:	f7ff fda3 	bl	8003e38 <_SendPacket>
  RECORD_END();
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f383 8811 	msr	BASEPRI, r3
}
 80042f8:	bf00      	nop
 80042fa:	3738      	adds	r7, #56	; 0x38
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20014400 	.word	0x20014400

08004304 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b090      	sub	sp, #64	; 0x40
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004312:	f3ef 8311 	mrs	r3, BASEPRI
 8004316:	f04f 0120 	mov.w	r1, #32
 800431a:	f381 8811 	msr	BASEPRI, r1
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	4840      	ldr	r0, [pc, #256]	; (8004424 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004322:	f7ff fc96 	bl	8003c52 <_PreparePacket>
 8004326:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	63bb      	str	r3, [r7, #56]	; 0x38
 8004334:	e00b      	b.n	800434e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	b2da      	uxtb	r2, r3
 800433a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433c:	1c59      	adds	r1, r3, #1
 800433e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	09db      	lsrs	r3, r3, #7
 800434c:	63bb      	str	r3, [r7, #56]	; 0x38
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	2b7f      	cmp	r3, #127	; 0x7f
 8004352:	d8f0      	bhi.n	8004336 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	63fa      	str	r2, [r7, #60]	; 0x3c
 800435a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004362:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	633b      	str	r3, [r7, #48]	; 0x30
 800436c:	e00b      	b.n	8004386 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	b2da      	uxtb	r2, r3
 8004372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004374:	1c59      	adds	r1, r3, #1
 8004376:	6379      	str	r1, [r7, #52]	; 0x34
 8004378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	09db      	lsrs	r3, r3, #7
 8004384:	633b      	str	r3, [r7, #48]	; 0x30
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	2b7f      	cmp	r3, #127	; 0x7f
 800438a:	d8f0      	bhi.n	800436e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	637a      	str	r2, [r7, #52]	; 0x34
 8004392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]
 8004398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a4:	e00b      	b.n	80043be <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	1c59      	adds	r1, r3, #1
 80043ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	09db      	lsrs	r3, r3, #7
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	2b7f      	cmp	r3, #127	; 0x7f
 80043c2:	d8f0      	bhi.n	80043a6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	701a      	strb	r2, [r3, #0]
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
 80043d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043da:	623b      	str	r3, [r7, #32]
 80043dc:	e00b      	b.n	80043f6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	6279      	str	r1, [r7, #36]	; 0x24
 80043e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	09db      	lsrs	r3, r3, #7
 80043f4:	623b      	str	r3, [r7, #32]
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	2b7f      	cmp	r3, #127	; 0x7f
 80043fa:	d8f0      	bhi.n	80043de <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	627a      	str	r2, [r7, #36]	; 0x24
 8004402:	6a3a      	ldr	r2, [r7, #32]
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	6979      	ldr	r1, [r7, #20]
 8004410:	69b8      	ldr	r0, [r7, #24]
 8004412:	f7ff fd11 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f383 8811 	msr	BASEPRI, r3
}
 800441c:	bf00      	nop
 800441e:	3740      	adds	r7, #64	; 0x40
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20014400 	.word	0x20014400

08004428 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b08c      	sub	sp, #48	; 0x30
 800442c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800442e:	4b59      	ldr	r3, [pc, #356]	; (8004594 <SEGGER_SYSVIEW_Start+0x16c>)
 8004430:	2201      	movs	r2, #1
 8004432:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004434:	f3ef 8311 	mrs	r3, BASEPRI
 8004438:	f04f 0120 	mov.w	r1, #32
 800443c:	f381 8811 	msr	BASEPRI, r1
 8004440:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004442:	4b54      	ldr	r3, [pc, #336]	; (8004594 <SEGGER_SYSVIEW_Start+0x16c>)
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	220a      	movs	r2, #10
 8004448:	4953      	ldr	r1, [pc, #332]	; (8004598 <SEGGER_SYSVIEW_Start+0x170>)
 800444a:	4618      	mov	r0, r3
 800444c:	f7fb fec8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004456:	f7fe ff8f 	bl	8003378 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800445a:	200a      	movs	r0, #10
 800445c:	f7ff fe28 	bl	80040b0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004460:	f3ef 8311 	mrs	r3, BASEPRI
 8004464:	f04f 0120 	mov.w	r1, #32
 8004468:	f381 8811 	msr	BASEPRI, r1
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	484b      	ldr	r0, [pc, #300]	; (800459c <SEGGER_SYSVIEW_Start+0x174>)
 8004470:	f7ff fbef 	bl	8003c52 <_PreparePacket>
 8004474:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800447e:	4b45      	ldr	r3, [pc, #276]	; (8004594 <SEGGER_SYSVIEW_Start+0x16c>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28
 8004484:	e00b      	b.n	800449e <SEGGER_SYSVIEW_Start+0x76>
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	b2da      	uxtb	r2, r3
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	1c59      	adds	r1, r3, #1
 800448e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	09db      	lsrs	r3, r3, #7
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	2b7f      	cmp	r3, #127	; 0x7f
 80044a2:	d8f0      	bhi.n	8004486 <SEGGER_SYSVIEW_Start+0x5e>
 80044a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
 80044b8:	4b36      	ldr	r3, [pc, #216]	; (8004594 <SEGGER_SYSVIEW_Start+0x16c>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	623b      	str	r3, [r7, #32]
 80044be:	e00b      	b.n	80044d8 <SEGGER_SYSVIEW_Start+0xb0>
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	1c59      	adds	r1, r3, #1
 80044c8:	6279      	str	r1, [r7, #36]	; 0x24
 80044ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	09db      	lsrs	r3, r3, #7
 80044d6:	623b      	str	r3, [r7, #32]
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	2b7f      	cmp	r3, #127	; 0x7f
 80044dc:	d8f0      	bhi.n	80044c0 <SEGGER_SYSVIEW_Start+0x98>
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	627a      	str	r2, [r7, #36]	; 0x24
 80044e4:	6a3a      	ldr	r2, [r7, #32]
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	4b28      	ldr	r3, [pc, #160]	; (8004594 <SEGGER_SYSVIEW_Start+0x16c>)
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	e00b      	b.n	8004512 <SEGGER_SYSVIEW_Start+0xea>
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	1c59      	adds	r1, r3, #1
 8004502:	61f9      	str	r1, [r7, #28]
 8004504:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	09db      	lsrs	r3, r3, #7
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b7f      	cmp	r3, #127	; 0x7f
 8004516:	d8f0      	bhi.n	80044fa <SEGGER_SYSVIEW_Start+0xd2>
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	61fa      	str	r2, [r7, #28]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	e00b      	b.n	800454a <SEGGER_SYSVIEW_Start+0x122>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	1c59      	adds	r1, r3, #1
 800453a:	6179      	str	r1, [r7, #20]
 800453c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	701a      	strb	r2, [r3, #0]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	09db      	lsrs	r3, r3, #7
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2b7f      	cmp	r3, #127	; 0x7f
 800454e:	d8f0      	bhi.n	8004532 <SEGGER_SYSVIEW_Start+0x10a>
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	617a      	str	r2, [r7, #20]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004560:	2218      	movs	r2, #24
 8004562:	6839      	ldr	r1, [r7, #0]
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff fc67 	bl	8003e38 <_SendPacket>
      RECORD_END();
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004570:	4b08      	ldr	r3, [pc, #32]	; (8004594 <SEGGER_SYSVIEW_Start+0x16c>)
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <SEGGER_SYSVIEW_Start+0x16c>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800457e:	f000 f9eb 	bl	8004958 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004582:	f000 f9b1 	bl	80048e8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004586:	f000 fc83 	bl	8004e90 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800458a:	bf00      	nop
 800458c:	3730      	adds	r7, #48	; 0x30
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	200143d0 	.word	0x200143d0
 8004598:	0800cd1c 	.word	0x0800cd1c
 800459c:	20014400 	.word	0x20014400

080045a0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045a6:	f3ef 8311 	mrs	r3, BASEPRI
 80045aa:	f04f 0120 	mov.w	r1, #32
 80045ae:	f381 8811 	msr	BASEPRI, r1
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	480b      	ldr	r0, [pc, #44]	; (80045e4 <SEGGER_SYSVIEW_Stop+0x44>)
 80045b6:	f7ff fb4c 	bl	8003c52 <_PreparePacket>
 80045ba:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <SEGGER_SYSVIEW_Stop+0x48>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80045c4:	220b      	movs	r2, #11
 80045c6:	6839      	ldr	r1, [r7, #0]
 80045c8:	6838      	ldr	r0, [r7, #0]
 80045ca:	f7ff fc35 	bl	8003e38 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <SEGGER_SYSVIEW_Stop+0x48>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f383 8811 	msr	BASEPRI, r3
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20014400 	.word	0x20014400
 80045e8:	200143d0 	.word	0x200143d0

080045ec <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08c      	sub	sp, #48	; 0x30
 80045f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80045f2:	f3ef 8311 	mrs	r3, BASEPRI
 80045f6:	f04f 0120 	mov.w	r1, #32
 80045fa:	f381 8811 	msr	BASEPRI, r1
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	4845      	ldr	r0, [pc, #276]	; (8004718 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004602:	f7ff fb26 	bl	8003c52 <_PreparePacket>
 8004606:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004610:	4b42      	ldr	r3, [pc, #264]	; (800471c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
 8004616:	e00b      	b.n	8004630 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	b2da      	uxtb	r2, r3
 800461c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461e:	1c59      	adds	r1, r3, #1
 8004620:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004622:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	09db      	lsrs	r3, r3, #7
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	2b7f      	cmp	r3, #127	; 0x7f
 8004634:	d8f0      	bhi.n	8004618 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800463c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	4b34      	ldr	r3, [pc, #208]	; (800471c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	623b      	str	r3, [r7, #32]
 8004650:	e00b      	b.n	800466a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	1c59      	adds	r1, r3, #1
 800465a:	6279      	str	r1, [r7, #36]	; 0x24
 800465c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	09db      	lsrs	r3, r3, #7
 8004668:	623b      	str	r3, [r7, #32]
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	2b7f      	cmp	r3, #127	; 0x7f
 800466e:	d8f0      	bhi.n	8004652 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	627a      	str	r2, [r7, #36]	; 0x24
 8004676:	6a3a      	ldr	r2, [r7, #32]
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	4b25      	ldr	r3, [pc, #148]	; (800471c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	e00b      	b.n	80046a4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	b2da      	uxtb	r2, r3
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	1c59      	adds	r1, r3, #1
 8004694:	61f9      	str	r1, [r7, #28]
 8004696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	09db      	lsrs	r3, r3, #7
 80046a2:	61bb      	str	r3, [r7, #24]
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b7f      	cmp	r3, #127	; 0x7f
 80046a8:	d8f0      	bhi.n	800468c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	61fa      	str	r2, [r7, #28]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	e00b      	b.n	80046dc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	1c59      	adds	r1, r3, #1
 80046cc:	6179      	str	r1, [r7, #20]
 80046ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	09db      	lsrs	r3, r3, #7
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2b7f      	cmp	r3, #127	; 0x7f
 80046e0:	d8f0      	bhi.n	80046c4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	617a      	str	r2, [r7, #20]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80046f2:	2218      	movs	r2, #24
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	68b8      	ldr	r0, [r7, #8]
 80046f8:	f7ff fb9e 	bl	8003e38 <_SendPacket>
  RECORD_END();
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800470a:	4b04      	ldr	r3, [pc, #16]	; (800471c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	4798      	blx	r3
  }
}
 8004710:	bf00      	nop
 8004712:	3730      	adds	r7, #48	; 0x30
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20014400 	.word	0x20014400
 800471c:	200143d0 	.word	0x200143d0

08004720 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b092      	sub	sp, #72	; 0x48
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004728:	f3ef 8311 	mrs	r3, BASEPRI
 800472c:	f04f 0120 	mov.w	r1, #32
 8004730:	f381 8811 	msr	BASEPRI, r1
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	486a      	ldr	r0, [pc, #424]	; (80048e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004738:	f7ff fa8b 	bl	8003c52 <_PreparePacket>
 800473c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	647b      	str	r3, [r7, #68]	; 0x44
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b66      	ldr	r3, [pc, #408]	; (80048e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	643b      	str	r3, [r7, #64]	; 0x40
 8004752:	e00b      	b.n	800476c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004756:	b2da      	uxtb	r2, r3
 8004758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800475a:	1c59      	adds	r1, r3, #1
 800475c:	6479      	str	r1, [r7, #68]	; 0x44
 800475e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004768:	09db      	lsrs	r3, r3, #7
 800476a:	643b      	str	r3, [r7, #64]	; 0x40
 800476c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476e:	2b7f      	cmp	r3, #127	; 0x7f
 8004770:	d8f0      	bhi.n	8004754 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	647a      	str	r2, [r7, #68]	; 0x44
 8004778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004780:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	63bb      	str	r3, [r7, #56]	; 0x38
 800478c:	e00b      	b.n	80047a6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	b2da      	uxtb	r2, r3
 8004792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004794:	1c59      	adds	r1, r3, #1
 8004796:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	09db      	lsrs	r3, r3, #7
 80047a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80047a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a8:	2b7f      	cmp	r3, #127	; 0x7f
 80047aa:	d8f0      	bhi.n	800478e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80047ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ba:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	4619      	mov	r1, r3
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7ff f9f7 	bl	8003bb8 <_EncodeStr>
 80047ca:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80047cc:	2209      	movs	r2, #9
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	6938      	ldr	r0, [r7, #16]
 80047d2:	f7ff fb31 	bl	8003e38 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b40      	ldr	r3, [pc, #256]	; (80048e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	633b      	str	r3, [r7, #48]	; 0x30
 80047ea:	e00b      	b.n	8004804 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	1c59      	adds	r1, r3, #1
 80047f4:	6379      	str	r1, [r7, #52]	; 0x34
 80047f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	09db      	lsrs	r3, r3, #7
 8004802:	633b      	str	r3, [r7, #48]	; 0x30
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	2b7f      	cmp	r3, #127	; 0x7f
 8004808:	d8f0      	bhi.n	80047ec <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	637a      	str	r2, [r7, #52]	; 0x34
 8004810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004818:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
 8004824:	e00b      	b.n	800483e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	b2da      	uxtb	r2, r3
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	1c59      	adds	r1, r3, #1
 800482e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004830:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	09db      	lsrs	r3, r3, #7
 800483c:	62bb      	str	r3, [r7, #40]	; 0x28
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	2b7f      	cmp	r3, #127	; 0x7f
 8004842:	d8f0      	bhi.n	8004826 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800484a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	623b      	str	r3, [r7, #32]
 800485e:	e00b      	b.n	8004878 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	b2da      	uxtb	r2, r3
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	1c59      	adds	r1, r3, #1
 8004868:	6279      	str	r1, [r7, #36]	; 0x24
 800486a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	09db      	lsrs	r3, r3, #7
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	2b7f      	cmp	r3, #127	; 0x7f
 800487c:	d8f0      	bhi.n	8004860 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	627a      	str	r2, [r7, #36]	; 0x24
 8004884:	6a3a      	ldr	r2, [r7, #32]
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	e00b      	b.n	80048b0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	b2da      	uxtb	r2, r3
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	61f9      	str	r1, [r7, #28]
 80048a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	09db      	lsrs	r3, r3, #7
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b7f      	cmp	r3, #127	; 0x7f
 80048b4:	d8f0      	bhi.n	8004898 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	61fa      	str	r2, [r7, #28]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80048c6:	2215      	movs	r2, #21
 80048c8:	68f9      	ldr	r1, [r7, #12]
 80048ca:	6938      	ldr	r0, [r7, #16]
 80048cc:	f7ff fab4 	bl	8003e38 <_SendPacket>
  RECORD_END();
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f383 8811 	msr	BASEPRI, r3
}
 80048d6:	bf00      	nop
 80048d8:	3748      	adds	r7, #72	; 0x48
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20014400 	.word	0x20014400
 80048e4:	200143d0 	.word	0x200143d0

080048e8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80048ec:	4b07      	ldr	r3, [pc, #28]	; (800490c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80048fe:	4b03      	ldr	r3, [pc, #12]	; (800490c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4798      	blx	r3
  }
}
 8004906:	bf00      	nop
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	200143d0 	.word	0x200143d0

08004910 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004918:	f3ef 8311 	mrs	r3, BASEPRI
 800491c:	f04f 0120 	mov.w	r1, #32
 8004920:	f381 8811 	msr	BASEPRI, r1
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	480b      	ldr	r0, [pc, #44]	; (8004954 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004928:	f7ff f993 	bl	8003c52 <_PreparePacket>
 800492c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800492e:	2280      	movs	r2, #128	; 0x80
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	6938      	ldr	r0, [r7, #16]
 8004934:	f7ff f940 	bl	8003bb8 <_EncodeStr>
 8004938:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800493a:	220e      	movs	r2, #14
 800493c:	68f9      	ldr	r1, [r7, #12]
 800493e:	6938      	ldr	r0, [r7, #16]
 8004940:	f7ff fa7a 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f383 8811 	msr	BASEPRI, r3
}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20014400 	.word	0x20014400

08004958 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800495e:	4b15      	ldr	r3, [pc, #84]	; (80049b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01a      	beq.n	800499c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004966:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d015      	beq.n	800499c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004970:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4798      	blx	r3
 8004978:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800497c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800497e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	000a      	movs	r2, r1
 800498c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800498e:	4613      	mov	r3, r2
 8004990:	461a      	mov	r2, r3
 8004992:	4621      	mov	r1, r4
 8004994:	200d      	movs	r0, #13
 8004996:	f7ff fbe5 	bl	8004164 <SEGGER_SYSVIEW_RecordU32x2>
 800499a:	e006      	b.n	80049aa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4619      	mov	r1, r3
 80049a2:	200c      	movs	r0, #12
 80049a4:	f7ff fba2 	bl	80040ec <SEGGER_SYSVIEW_RecordU32>
  }
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd90      	pop	{r4, r7, pc}
 80049b2:	bf00      	nop
 80049b4:	200143d0 	.word	0x200143d0
 80049b8:	e0001004 	.word	0xe0001004

080049bc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80049c2:	f3ef 8311 	mrs	r3, BASEPRI
 80049c6:	f04f 0120 	mov.w	r1, #32
 80049ca:	f381 8811 	msr	BASEPRI, r1
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	4819      	ldr	r0, [pc, #100]	; (8004a38 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80049d2:	f7ff f93e 	bl	8003c52 <_PreparePacket>
 80049d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80049dc:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	e00b      	b.n	8004a08 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	1c59      	adds	r1, r3, #1
 80049f8:	6179      	str	r1, [r7, #20]
 80049fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	09db      	lsrs	r3, r3, #7
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a0c:	d8f0      	bhi.n	80049f0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	617a      	str	r2, [r7, #20]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004a1e:	2202      	movs	r2, #2
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	68b8      	ldr	r0, [r7, #8]
 8004a24:	f7ff fa08 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f383 8811 	msr	BASEPRI, r3
}
 8004a2e:	bf00      	nop
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20014400 	.word	0x20014400
 8004a3c:	e000ed04 	.word	0xe000ed04

08004a40 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a46:	f3ef 8311 	mrs	r3, BASEPRI
 8004a4a:	f04f 0120 	mov.w	r1, #32
 8004a4e:	f381 8811 	msr	BASEPRI, r1
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	4807      	ldr	r0, [pc, #28]	; (8004a74 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004a56:	f7ff f8fc 	bl	8003c52 <_PreparePacket>
 8004a5a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	6839      	ldr	r1, [r7, #0]
 8004a60:	6838      	ldr	r0, [r7, #0]
 8004a62:	f7ff f9e9 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f383 8811 	msr	BASEPRI, r3
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20014400 	.word	0x20014400

08004a78 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a82:	f04f 0120 	mov.w	r1, #32
 8004a86:	f381 8811 	msr	BASEPRI, r1
 8004a8a:	607b      	str	r3, [r7, #4]
 8004a8c:	4807      	ldr	r0, [pc, #28]	; (8004aac <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004a8e:	f7ff f8e0 	bl	8003c52 <_PreparePacket>
 8004a92:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004a94:	2212      	movs	r2, #18
 8004a96:	6839      	ldr	r1, [r7, #0]
 8004a98:	6838      	ldr	r0, [r7, #0]
 8004a9a:	f7ff f9cd 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f383 8811 	msr	BASEPRI, r3
}
 8004aa4:	bf00      	nop
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20014400 	.word	0x20014400

08004ab0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ab6:	f3ef 8311 	mrs	r3, BASEPRI
 8004aba:	f04f 0120 	mov.w	r1, #32
 8004abe:	f381 8811 	msr	BASEPRI, r1
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	4807      	ldr	r0, [pc, #28]	; (8004ae4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004ac6:	f7ff f8c4 	bl	8003c52 <_PreparePacket>
 8004aca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004acc:	2211      	movs	r2, #17
 8004ace:	6839      	ldr	r1, [r7, #0]
 8004ad0:	6838      	ldr	r0, [r7, #0]
 8004ad2:	f7ff f9b1 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f383 8811 	msr	BASEPRI, r3
}
 8004adc:	bf00      	nop
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20014400 	.word	0x20014400

08004ae8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004af0:	f3ef 8311 	mrs	r3, BASEPRI
 8004af4:	f04f 0120 	mov.w	r1, #32
 8004af8:	f381 8811 	msr	BASEPRI, r1
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	4819      	ldr	r0, [pc, #100]	; (8004b64 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004b00:	f7ff f8a7 	bl	8003c52 <_PreparePacket>
 8004b04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b0a:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	61bb      	str	r3, [r7, #24]
 8004b1c:	e00b      	b.n	8004b36 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	1c59      	adds	r1, r3, #1
 8004b26:	61f9      	str	r1, [r7, #28]
 8004b28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	09db      	lsrs	r3, r3, #7
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b7f      	cmp	r3, #127	; 0x7f
 8004b3a:	d8f0      	bhi.n	8004b1e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	61fa      	str	r2, [r7, #28]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	68f9      	ldr	r1, [r7, #12]
 8004b50:	6938      	ldr	r0, [r7, #16]
 8004b52:	f7ff f971 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f383 8811 	msr	BASEPRI, r3
}
 8004b5c:	bf00      	nop
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20014400 	.word	0x20014400
 8004b68:	200143d0 	.word	0x200143d0

08004b6c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b74:	f3ef 8311 	mrs	r3, BASEPRI
 8004b78:	f04f 0120 	mov.w	r1, #32
 8004b7c:	f381 8811 	msr	BASEPRI, r1
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	4819      	ldr	r0, [pc, #100]	; (8004be8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004b84:	f7ff f865 	bl	8003c52 <_PreparePacket>
 8004b88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b8e:	4b17      	ldr	r3, [pc, #92]	; (8004bec <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	e00b      	b.n	8004bba <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	1c59      	adds	r1, r3, #1
 8004baa:	61f9      	str	r1, [r7, #28]
 8004bac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	09db      	lsrs	r3, r3, #7
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8004bbe:	d8f0      	bhi.n	8004ba2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	61fa      	str	r2, [r7, #28]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	6938      	ldr	r0, [r7, #16]
 8004bd6:	f7ff f92f 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f383 8811 	msr	BASEPRI, r3
}
 8004be0:	bf00      	nop
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20014400 	.word	0x20014400
 8004bec:	200143d0 	.word	0x200143d0

08004bf0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bfc:	f04f 0120 	mov.w	r1, #32
 8004c00:	f381 8811 	msr	BASEPRI, r1
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	4819      	ldr	r0, [pc, #100]	; (8004c6c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004c08:	f7ff f823 	bl	8003c52 <_PreparePacket>
 8004c0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c12:	4b17      	ldr	r3, [pc, #92]	; (8004c70 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	61fb      	str	r3, [r7, #28]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	61bb      	str	r3, [r7, #24]
 8004c24:	e00b      	b.n	8004c3e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	1c59      	adds	r1, r3, #1
 8004c2e:	61f9      	str	r1, [r7, #28]
 8004c30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	09db      	lsrs	r3, r3, #7
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b7f      	cmp	r3, #127	; 0x7f
 8004c42:	d8f0      	bhi.n	8004c26 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	61fa      	str	r2, [r7, #28]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004c54:	2206      	movs	r2, #6
 8004c56:	68f9      	ldr	r1, [r7, #12]
 8004c58:	6938      	ldr	r0, [r7, #16]
 8004c5a:	f7ff f8ed 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f383 8811 	msr	BASEPRI, r3
}
 8004c64:	bf00      	nop
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20014400 	.word	0x20014400
 8004c70:	200143d0 	.word	0x200143d0

08004c74 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c82:	f04f 0120 	mov.w	r1, #32
 8004c86:	f381 8811 	msr	BASEPRI, r1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	4827      	ldr	r0, [pc, #156]	; (8004d2c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004c8e:	f7fe ffe0 	bl	8003c52 <_PreparePacket>
 8004c92:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c98:	4b25      	ldr	r3, [pc, #148]	; (8004d30 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	623b      	str	r3, [r7, #32]
 8004caa:	e00b      	b.n	8004cc4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	1c59      	adds	r1, r3, #1
 8004cb4:	6279      	str	r1, [r7, #36]	; 0x24
 8004cb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	09db      	lsrs	r3, r3, #7
 8004cc2:	623b      	str	r3, [r7, #32]
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8004cc8:	d8f0      	bhi.n	8004cac <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	627a      	str	r2, [r7, #36]	; 0x24
 8004cd0:	6a3a      	ldr	r2, [r7, #32]
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	e00b      	b.n	8004cfc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	1c59      	adds	r1, r3, #1
 8004cec:	61f9      	str	r1, [r7, #28]
 8004cee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	09db      	lsrs	r3, r3, #7
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8004d00:	d8f0      	bhi.n	8004ce4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	61fa      	str	r2, [r7, #28]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004d12:	2207      	movs	r2, #7
 8004d14:	68f9      	ldr	r1, [r7, #12]
 8004d16:	6938      	ldr	r0, [r7, #16]
 8004d18:	f7ff f88e 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f383 8811 	msr	BASEPRI, r3
}
 8004d22:	bf00      	nop
 8004d24:	3728      	adds	r7, #40	; 0x28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20014400 	.word	0x20014400
 8004d30:	200143d0 	.word	0x200143d0

08004d34 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	1ad3      	subs	r3, r2, r3
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	200143d0 	.word	0x200143d0

08004d54 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08c      	sub	sp, #48	; 0x30
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004d5e:	4b3b      	ldr	r3, [pc, #236]	; (8004e4c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d06d      	beq.n	8004e42 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004d66:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d70:	e008      	b.n	8004d84 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	3301      	adds	r3, #1
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d3f2      	bcc.n	8004d72 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004d8c:	e000      	b.n	8004d90 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004d8e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d055      	beq.n	8004e42 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d96:	f3ef 8311 	mrs	r3, BASEPRI
 8004d9a:	f04f 0120 	mov.w	r1, #32
 8004d9e:	f381 8811 	msr	BASEPRI, r1
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	482a      	ldr	r0, [pc, #168]	; (8004e50 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004da6:	f7fe ff54 	bl	8003c52 <_PreparePacket>
 8004daa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	623b      	str	r3, [r7, #32]
 8004db8:	e00b      	b.n	8004dd2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	1c59      	adds	r1, r3, #1
 8004dc2:	6279      	str	r1, [r7, #36]	; 0x24
 8004dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	09db      	lsrs	r3, r3, #7
 8004dd0:	623b      	str	r3, [r7, #32]
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd6:	d8f0      	bhi.n	8004dba <SEGGER_SYSVIEW_SendModule+0x66>
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	627a      	str	r2, [r7, #36]	; 0x24
 8004dde:	6a3a      	ldr	r2, [r7, #32]
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	e00b      	b.n	8004e0c <SEGGER_SYSVIEW_SendModule+0xb8>
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	1c59      	adds	r1, r3, #1
 8004dfc:	61f9      	str	r1, [r7, #28]
 8004dfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	09db      	lsrs	r3, r3, #7
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e10:	d8f0      	bhi.n	8004df4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	61fa      	str	r2, [r7, #28]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2280      	movs	r2, #128	; 0x80
 8004e28:	4619      	mov	r1, r3
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7fe fec4 	bl	8003bb8 <_EncodeStr>
 8004e30:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004e32:	2216      	movs	r2, #22
 8004e34:	68f9      	ldr	r1, [r7, #12]
 8004e36:	6938      	ldr	r0, [r7, #16]
 8004e38:	f7fe fffe 	bl	8003e38 <_SendPacket>
      RECORD_END();
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004e42:	bf00      	nop
 8004e44:	3730      	adds	r7, #48	; 0x30
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	200143f8 	.word	0x200143f8
 8004e50:	20014400 	.word	0x20014400

08004e54 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00f      	beq.n	8004e82 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f2      	bne.n	8004e68 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	200143f8 	.word	0x200143f8

08004e90 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004e96:	f3ef 8311 	mrs	r3, BASEPRI
 8004e9a:	f04f 0120 	mov.w	r1, #32
 8004e9e:	f381 8811 	msr	BASEPRI, r1
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	4817      	ldr	r0, [pc, #92]	; (8004f04 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004ea6:	f7fe fed4 	bl	8003c52 <_PreparePacket>
 8004eaa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	4b14      	ldr	r3, [pc, #80]	; (8004f08 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	e00b      	b.n	8004ed4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	1c59      	adds	r1, r3, #1
 8004ec4:	6179      	str	r1, [r7, #20]
 8004ec6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	09db      	lsrs	r3, r3, #7
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed8:	d8f0      	bhi.n	8004ebc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	617a      	str	r2, [r7, #20]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004eea:	221b      	movs	r2, #27
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	68b8      	ldr	r0, [r7, #8]
 8004ef0:	f7fe ffa2 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f383 8811 	msr	BASEPRI, r3
}
 8004efa:	bf00      	nop
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20014400 	.word	0x20014400
 8004f08:	200143fc 	.word	0x200143fc

08004f0c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f14:	f3ef 8311 	mrs	r3, BASEPRI
 8004f18:	f04f 0120 	mov.w	r1, #32
 8004f1c:	f381 8811 	msr	BASEPRI, r1
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	4827      	ldr	r0, [pc, #156]	; (8004fc0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004f24:	f7fe fe95 	bl	8003c52 <_PreparePacket>
 8004f28:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f2a:	2280      	movs	r2, #128	; 0x80
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	6938      	ldr	r0, [r7, #16]
 8004f30:	f7fe fe42 	bl	8003bb8 <_EncodeStr>
 8004f34:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	623b      	str	r3, [r7, #32]
 8004f3e:	e00b      	b.n	8004f58 <SEGGER_SYSVIEW_Warn+0x4c>
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	1c59      	adds	r1, r3, #1
 8004f48:	6279      	str	r1, [r7, #36]	; 0x24
 8004f4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	09db      	lsrs	r3, r3, #7
 8004f56:	623b      	str	r3, [r7, #32]
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f5c:	d8f0      	bhi.n	8004f40 <SEGGER_SYSVIEW_Warn+0x34>
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	627a      	str	r2, [r7, #36]	; 0x24
 8004f64:	6a3a      	ldr	r2, [r7, #32]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e00b      	b.n	8004f90 <SEGGER_SYSVIEW_Warn+0x84>
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	1c59      	adds	r1, r3, #1
 8004f80:	61f9      	str	r1, [r7, #28]
 8004f82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	09db      	lsrs	r3, r3, #7
 8004f8e:	61bb      	str	r3, [r7, #24]
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b7f      	cmp	r3, #127	; 0x7f
 8004f94:	d8f0      	bhi.n	8004f78 <SEGGER_SYSVIEW_Warn+0x6c>
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	61fa      	str	r2, [r7, #28]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004fa6:	221a      	movs	r2, #26
 8004fa8:	68f9      	ldr	r1, [r7, #12]
 8004faa:	6938      	ldr	r0, [r7, #16]
 8004fac:	f7fe ff44 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f383 8811 	msr	BASEPRI, r3
}
 8004fb6:	bf00      	nop
 8004fb8:	3728      	adds	r7, #40	; 0x28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20014400 	.word	0x20014400

08004fc4 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004fc8:	4b13      	ldr	r3, [pc, #76]	; (8005018 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004fca:	7e1b      	ldrb	r3, [r3, #24]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4a13      	ldr	r2, [pc, #76]	; (800501c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	440b      	add	r3, r1
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4413      	add	r3, r2
 8004fda:	336c      	adds	r3, #108	; 0x6c
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004fe0:	7e1b      	ldrb	r3, [r3, #24]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	490d      	ldr	r1, [pc, #52]	; (800501c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	4403      	add	r3, r0
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	440b      	add	r3, r1
 8004ff0:	3370      	adds	r3, #112	; 0x70
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d00b      	beq.n	8005010 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004ff8:	4b07      	ldr	r3, [pc, #28]	; (8005018 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004ffa:	789b      	ldrb	r3, [r3, #2]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d107      	bne.n	8005010 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005002:	2201      	movs	r2, #1
 8005004:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005006:	f7fe fe31 	bl	8003c6c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800500a:	4b03      	ldr	r3, [pc, #12]	; (8005018 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800500c:	2200      	movs	r2, #0
 800500e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005010:	4b01      	ldr	r3, [pc, #4]	; (8005018 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005012:	781b      	ldrb	r3, [r3, #0]
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	200143d0 	.word	0x200143d0
 800501c:	20012f10 	.word	0x20012f10

08005020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08c      	sub	sp, #48	; 0x30
 8005024:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005026:	f000 fce1 	bl	80059ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800502a:	f000 f893 	bl	8005154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800502e:	f000 f95f 	bl	80052f0 <MX_GPIO_Init>
  MX_I2S2_Init();
 8005032:	f000 f8f9 	bl	8005228 <MX_I2S2_Init>
  MX_SPI1_Init();
 8005036:	f000 f925 	bl	8005284 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800503a:	f007 f963 	bl	800c304 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
SEGGER_UART_init(50000);
 800503e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005042:	f7fe f93d 	bl	80032c0 <SEGGER_UART_init>
DWT_CTRL |= (1 << 0);
 8005046:	4b3a      	ldr	r3, [pc, #232]	; (8005130 <main+0x110>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a39      	ldr	r2, [pc, #228]	; (8005130 <main+0x110>)
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	6013      	str	r3, [r2, #0]
SEGGER_SYSVIEW_Conf();
 8005052:	f7fd ff5f 	bl	8002f14 <SEGGER_SYSVIEW_Conf>
//SEGGER_SYSVIEW_Start();
 /* xTaskcreate parameters : *function API name *task_name *Word_count *variable_name_passed_to_create_task *priority *handler_name)*/
  status = xTaskCreate(led_green_handler, "LED_green_task",200,NULL, 2, &task1_handler);
 8005056:	f107 0310 	add.w	r3, r7, #16
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	2302      	movs	r3, #2
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	2300      	movs	r3, #0
 8005062:	22c8      	movs	r2, #200	; 0xc8
 8005064:	4933      	ldr	r1, [pc, #204]	; (8005134 <main+0x114>)
 8005066:	4834      	ldr	r0, [pc, #208]	; (8005138 <main+0x118>)
 8005068:	f7fc f894 	bl	8001194 <xTaskCreate>
 800506c:	6278      	str	r0, [r7, #36]	; 0x24
configASSERT(status == pdPASS);
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	2b01      	cmp	r3, #1
 8005072:	d00a      	beq.n	800508a <main+0x6a>
        __asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	623b      	str	r3, [r7, #32]
    }
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <main+0x68>
status = xTaskCreate(led_orange_handler, "LED_orange_task",200,NULL, 2, &task2_handler);
 800508a:	f107 030c 	add.w	r3, r7, #12
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	2302      	movs	r3, #2
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	22c8      	movs	r2, #200	; 0xc8
 8005098:	4928      	ldr	r1, [pc, #160]	; (800513c <main+0x11c>)
 800509a:	4829      	ldr	r0, [pc, #164]	; (8005140 <main+0x120>)
 800509c:	f7fc f87a 	bl	8001194 <xTaskCreate>
 80050a0:	6278      	str	r0, [r7, #36]	; 0x24
configASSERT(status == pdPASS);
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d00a      	beq.n	80050be <main+0x9e>
        __asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	61fb      	str	r3, [r7, #28]
    }
 80050ba:	bf00      	nop
 80050bc:	e7fe      	b.n	80050bc <main+0x9c>
status = xTaskCreate(led_red_handler, "LED_red_task",200,NULL, 2, &task3_handler);
 80050be:	f107 0308 	add.w	r3, r7, #8
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	2302      	movs	r3, #2
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	2300      	movs	r3, #0
 80050ca:	22c8      	movs	r2, #200	; 0xc8
 80050cc:	491d      	ldr	r1, [pc, #116]	; (8005144 <main+0x124>)
 80050ce:	481e      	ldr	r0, [pc, #120]	; (8005148 <main+0x128>)
 80050d0:	f7fc f860 	bl	8001194 <xTaskCreate>
 80050d4:	6278      	str	r0, [r7, #36]	; 0x24
configASSERT(status == pdPASS);
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d00a      	beq.n	80050f2 <main+0xd2>
        __asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	61bb      	str	r3, [r7, #24]
    }
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <main+0xd0>
status = xTaskCreate(led_blue_handler, "LED_blue_task",200,NULL, 2, &task4_handler);
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	2302      	movs	r3, #2
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	2300      	movs	r3, #0
 80050fc:	22c8      	movs	r2, #200	; 0xc8
 80050fe:	4913      	ldr	r1, [pc, #76]	; (800514c <main+0x12c>)
 8005100:	4813      	ldr	r0, [pc, #76]	; (8005150 <main+0x130>)
 8005102:	f7fc f847 	bl	8001194 <xTaskCreate>
 8005106:	6278      	str	r0, [r7, #36]	; 0x24
configASSERT(status == pdPASS);
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	2b01      	cmp	r3, #1
 800510c:	d00a      	beq.n	8005124 <main+0x104>
        __asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	617b      	str	r3, [r7, #20]
    }
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <main+0x102>

vTaskStartScheduler();
 8005124:	f7fc f99a 	bl	800145c <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8005128:	f007 f912 	bl	800c350 <MX_USB_HOST_Process>
 800512c:	e7fc      	b.n	8005128 <main+0x108>
 800512e:	bf00      	nop
 8005130:	e0001000 	.word	0xe0001000
 8005134:	0800cccc 	.word	0x0800cccc
 8005138:	0800550d 	.word	0x0800550d
 800513c:	0800ccdc 	.word	0x0800ccdc
 8005140:	0800552d 	.word	0x0800552d
 8005144:	0800ccec 	.word	0x0800ccec
 8005148:	0800554d 	.word	0x0800554d
 800514c:	0800ccfc 	.word	0x0800ccfc
 8005150:	0800556d 	.word	0x0800556d

08005154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b094      	sub	sp, #80	; 0x50
 8005158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800515a:	f107 0320 	add.w	r3, r7, #32
 800515e:	2230      	movs	r2, #48	; 0x30
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f007 fc2e 	bl	800c9c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005168:	f107 030c 	add.w	r3, r7, #12
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	609a      	str	r2, [r3, #8]
 8005174:	60da      	str	r2, [r3, #12]
 8005176:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005178:	2300      	movs	r3, #0
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	4b28      	ldr	r3, [pc, #160]	; (8005220 <SystemClock_Config+0xcc>)
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	4a27      	ldr	r2, [pc, #156]	; (8005220 <SystemClock_Config+0xcc>)
 8005182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005186:	6413      	str	r3, [r2, #64]	; 0x40
 8005188:	4b25      	ldr	r3, [pc, #148]	; (8005220 <SystemClock_Config+0xcc>)
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005194:	2300      	movs	r3, #0
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	4b22      	ldr	r3, [pc, #136]	; (8005224 <SystemClock_Config+0xd0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a21      	ldr	r2, [pc, #132]	; (8005224 <SystemClock_Config+0xd0>)
 800519e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	4b1f      	ldr	r3, [pc, #124]	; (8005224 <SystemClock_Config+0xd0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051ac:	607b      	str	r3, [r7, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051b0:	2302      	movs	r3, #2
 80051b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051b4:	2301      	movs	r3, #1
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051b8:	2310      	movs	r3, #16
 80051ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051bc:	2302      	movs	r3, #2
 80051be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80051c0:	2300      	movs	r3, #0
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80051c4:	2308      	movs	r3, #8
 80051c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80051c8:	23a8      	movs	r3, #168	; 0xa8
 80051ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80051cc:	2304      	movs	r3, #4
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80051d0:	2307      	movs	r3, #7
 80051d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051d4:	f107 0320 	add.w	r3, r7, #32
 80051d8:	4618      	mov	r0, r3
 80051da:	f002 ffb1 	bl	8008140 <HAL_RCC_OscConfig>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80051e4:	f000 f9e1 	bl	80055aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051e8:	230f      	movs	r3, #15
 80051ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051ec:	2302      	movs	r3, #2
 80051ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80051fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005200:	f107 030c 	add.w	r3, r7, #12
 8005204:	2102      	movs	r1, #2
 8005206:	4618      	mov	r0, r3
 8005208:	f003 fa12 	bl	8008630 <HAL_RCC_ClockConfig>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005212:	f000 f9ca 	bl	80055aa <Error_Handler>
  }
}
 8005216:	bf00      	nop
 8005218:	3750      	adds	r7, #80	; 0x50
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40023800 	.word	0x40023800
 8005224:	40007000 	.word	0x40007000

08005228 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800522c:	4b12      	ldr	r3, [pc, #72]	; (8005278 <MX_I2S2_Init+0x50>)
 800522e:	4a13      	ldr	r2, [pc, #76]	; (800527c <MX_I2S2_Init+0x54>)
 8005230:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8005232:	4b11      	ldr	r3, [pc, #68]	; (8005278 <MX_I2S2_Init+0x50>)
 8005234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005238:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800523a:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <MX_I2S2_Init+0x50>)
 800523c:	2200      	movs	r2, #0
 800523e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8005240:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <MX_I2S2_Init+0x50>)
 8005242:	2200      	movs	r2, #0
 8005244:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <MX_I2S2_Init+0x50>)
 8005248:	2200      	movs	r2, #0
 800524a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <MX_I2S2_Init+0x50>)
 800524e:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <MX_I2S2_Init+0x58>)
 8005250:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8005252:	4b09      	ldr	r3, [pc, #36]	; (8005278 <MX_I2S2_Init+0x50>)
 8005254:	2200      	movs	r2, #0
 8005256:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8005258:	4b07      	ldr	r3, [pc, #28]	; (8005278 <MX_I2S2_Init+0x50>)
 800525a:	2200      	movs	r2, #0
 800525c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800525e:	4b06      	ldr	r3, [pc, #24]	; (8005278 <MX_I2S2_Init+0x50>)
 8005260:	2201      	movs	r2, #1
 8005262:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005264:	4804      	ldr	r0, [pc, #16]	; (8005278 <MX_I2S2_Init+0x50>)
 8005266:	f002 facb 	bl	8007800 <HAL_I2S_Init>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8005270:	f000 f99b 	bl	80055aa <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8005274:	bf00      	nop
 8005276:	bd80      	pop	{r7, pc}
 8005278:	200144e4 	.word	0x200144e4
 800527c:	40003800 	.word	0x40003800
 8005280:	00017700 	.word	0x00017700

08005284 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005288:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <MX_SPI1_Init+0x64>)
 800528a:	4a18      	ldr	r2, [pc, #96]	; (80052ec <MX_SPI1_Init+0x68>)
 800528c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800528e:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <MX_SPI1_Init+0x64>)
 8005290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <MX_SPI1_Init+0x64>)
 8005298:	2200      	movs	r2, #0
 800529a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800529c:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <MX_SPI1_Init+0x64>)
 800529e:	2200      	movs	r2, #0
 80052a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052a2:	4b11      	ldr	r3, [pc, #68]	; (80052e8 <MX_SPI1_Init+0x64>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052a8:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <MX_SPI1_Init+0x64>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80052ae:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <MX_SPI1_Init+0x64>)
 80052b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052b6:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <MX_SPI1_Init+0x64>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <MX_SPI1_Init+0x64>)
 80052be:	2200      	movs	r2, #0
 80052c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <MX_SPI1_Init+0x64>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c8:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <MX_SPI1_Init+0x64>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80052ce:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <MX_SPI1_Init+0x64>)
 80052d0:	220a      	movs	r2, #10
 80052d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80052d4:	4804      	ldr	r0, [pc, #16]	; (80052e8 <MX_SPI1_Init+0x64>)
 80052d6:	f003 fd39 	bl	8008d4c <HAL_SPI_Init>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80052e0:	f000 f963 	bl	80055aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80052e4:	bf00      	nop
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	2001452c 	.word	0x2001452c
 80052ec:	40013000 	.word	0x40013000

080052f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	; 0x30
 80052f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f6:	f107 031c 	add.w	r3, r7, #28
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	605a      	str	r2, [r3, #4]
 8005300:	609a      	str	r2, [r3, #8]
 8005302:	60da      	str	r2, [r3, #12]
 8005304:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	4b7a      	ldr	r3, [pc, #488]	; (80054f4 <MX_GPIO_Init+0x204>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	4a79      	ldr	r2, [pc, #484]	; (80054f4 <MX_GPIO_Init+0x204>)
 8005310:	f043 0310 	orr.w	r3, r3, #16
 8005314:	6313      	str	r3, [r2, #48]	; 0x30
 8005316:	4b77      	ldr	r3, [pc, #476]	; (80054f4 <MX_GPIO_Init+0x204>)
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	4b73      	ldr	r3, [pc, #460]	; (80054f4 <MX_GPIO_Init+0x204>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	4a72      	ldr	r2, [pc, #456]	; (80054f4 <MX_GPIO_Init+0x204>)
 800532c:	f043 0304 	orr.w	r3, r3, #4
 8005330:	6313      	str	r3, [r2, #48]	; 0x30
 8005332:	4b70      	ldr	r3, [pc, #448]	; (80054f4 <MX_GPIO_Init+0x204>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	4b6c      	ldr	r3, [pc, #432]	; (80054f4 <MX_GPIO_Init+0x204>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	4a6b      	ldr	r2, [pc, #428]	; (80054f4 <MX_GPIO_Init+0x204>)
 8005348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534c:	6313      	str	r3, [r2, #48]	; 0x30
 800534e:	4b69      	ldr	r3, [pc, #420]	; (80054f4 <MX_GPIO_Init+0x204>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	4b65      	ldr	r3, [pc, #404]	; (80054f4 <MX_GPIO_Init+0x204>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	4a64      	ldr	r2, [pc, #400]	; (80054f4 <MX_GPIO_Init+0x204>)
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	6313      	str	r3, [r2, #48]	; 0x30
 800536a:	4b62      	ldr	r3, [pc, #392]	; (80054f4 <MX_GPIO_Init+0x204>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	4b5e      	ldr	r3, [pc, #376]	; (80054f4 <MX_GPIO_Init+0x204>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	4a5d      	ldr	r2, [pc, #372]	; (80054f4 <MX_GPIO_Init+0x204>)
 8005380:	f043 0302 	orr.w	r3, r3, #2
 8005384:	6313      	str	r3, [r2, #48]	; 0x30
 8005386:	4b5b      	ldr	r3, [pc, #364]	; (80054f4 <MX_GPIO_Init+0x204>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	607b      	str	r3, [r7, #4]
 8005396:	4b57      	ldr	r3, [pc, #348]	; (80054f4 <MX_GPIO_Init+0x204>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	4a56      	ldr	r2, [pc, #344]	; (80054f4 <MX_GPIO_Init+0x204>)
 800539c:	f043 0308 	orr.w	r3, r3, #8
 80053a0:	6313      	str	r3, [r2, #48]	; 0x30
 80053a2:	4b54      	ldr	r3, [pc, #336]	; (80054f4 <MX_GPIO_Init+0x204>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	607b      	str	r3, [r7, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80053ae:	2200      	movs	r2, #0
 80053b0:	2108      	movs	r1, #8
 80053b2:	4851      	ldr	r0, [pc, #324]	; (80054f8 <MX_GPIO_Init+0x208>)
 80053b4:	f000 fde6 	bl	8005f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80053b8:	2201      	movs	r2, #1
 80053ba:	2101      	movs	r1, #1
 80053bc:	484f      	ldr	r0, [pc, #316]	; (80054fc <MX_GPIO_Init+0x20c>)
 80053be:	f000 fde1 	bl	8005f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80053c2:	2200      	movs	r2, #0
 80053c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80053c8:	484d      	ldr	r0, [pc, #308]	; (8005500 <MX_GPIO_Init+0x210>)
 80053ca:	f000 fddb 	bl	8005f84 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80053ce:	2304      	movs	r3, #4
 80053d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053d2:	2300      	movs	r3, #0
 80053d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80053da:	f107 031c 	add.w	r3, r7, #28
 80053de:	4619      	mov	r1, r3
 80053e0:	4845      	ldr	r0, [pc, #276]	; (80054f8 <MX_GPIO_Init+0x208>)
 80053e2:	f000 fc4b 	bl	8005c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80053e6:	2308      	movs	r3, #8
 80053e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053ea:	2301      	movs	r3, #1
 80053ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f2:	2300      	movs	r3, #0
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80053f6:	f107 031c 	add.w	r3, r7, #28
 80053fa:	4619      	mov	r1, r3
 80053fc:	483e      	ldr	r0, [pc, #248]	; (80054f8 <MX_GPIO_Init+0x208>)
 80053fe:	f000 fc3d 	bl	8005c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8005402:	2332      	movs	r3, #50	; 0x32
 8005404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005406:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800540a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540c:	2300      	movs	r3, #0
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005410:	f107 031c 	add.w	r3, r7, #28
 8005414:	4619      	mov	r1, r3
 8005416:	4838      	ldr	r0, [pc, #224]	; (80054f8 <MX_GPIO_Init+0x208>)
 8005418:	f000 fc30 	bl	8005c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800541c:	2301      	movs	r3, #1
 800541e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005420:	2301      	movs	r3, #1
 8005422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005424:	2300      	movs	r3, #0
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005428:	2300      	movs	r3, #0
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800542c:	f107 031c 	add.w	r3, r7, #28
 8005430:	4619      	mov	r1, r3
 8005432:	4832      	ldr	r0, [pc, #200]	; (80054fc <MX_GPIO_Init+0x20c>)
 8005434:	f000 fc22 	bl	8005c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005438:	2301      	movs	r3, #1
 800543a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800543c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8005440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005446:	f107 031c 	add.w	r3, r7, #28
 800544a:	4619      	mov	r1, r3
 800544c:	482d      	ldr	r0, [pc, #180]	; (8005504 <MX_GPIO_Init+0x214>)
 800544e:	f000 fc15 	bl	8005c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8005452:	2310      	movs	r3, #16
 8005454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005456:	2302      	movs	r3, #2
 8005458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545a:	2300      	movs	r3, #0
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800545e:	2300      	movs	r3, #0
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005462:	2306      	movs	r3, #6
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8005466:	f107 031c 	add.w	r3, r7, #28
 800546a:	4619      	mov	r1, r3
 800546c:	4825      	ldr	r0, [pc, #148]	; (8005504 <MX_GPIO_Init+0x214>)
 800546e:	f000 fc05 	bl	8005c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8005472:	f24f 0310 	movw	r3, #61456	; 0xf010
 8005476:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005478:	2301      	movs	r3, #1
 800547a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547c:	2300      	movs	r3, #0
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005480:	2300      	movs	r3, #0
 8005482:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005484:	f107 031c 	add.w	r3, r7, #28
 8005488:	4619      	mov	r1, r3
 800548a:	481d      	ldr	r0, [pc, #116]	; (8005500 <MX_GPIO_Init+0x210>)
 800548c:	f000 fbf6 	bl	8005c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8005490:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8005494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005496:	2302      	movs	r3, #2
 8005498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549a:	2300      	movs	r3, #0
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800549e:	2300      	movs	r3, #0
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054a2:	2306      	movs	r3, #6
 80054a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054a6:	f107 031c 	add.w	r3, r7, #28
 80054aa:	4619      	mov	r1, r3
 80054ac:	4813      	ldr	r0, [pc, #76]	; (80054fc <MX_GPIO_Init+0x20c>)
 80054ae:	f000 fbe5 	bl	8005c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80054b2:	2320      	movs	r3, #32
 80054b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054b6:	2300      	movs	r3, #0
 80054b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80054be:	f107 031c 	add.w	r3, r7, #28
 80054c2:	4619      	mov	r1, r3
 80054c4:	480e      	ldr	r0, [pc, #56]	; (8005500 <MX_GPIO_Init+0x210>)
 80054c6:	f000 fbd9 	bl	8005c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80054ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80054ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054d0:	2312      	movs	r3, #18
 80054d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054d4:	2301      	movs	r3, #1
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d8:	2300      	movs	r3, #0
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80054dc:	2304      	movs	r3, #4
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e0:	f107 031c 	add.w	r3, r7, #28
 80054e4:	4619      	mov	r1, r3
 80054e6:	4808      	ldr	r0, [pc, #32]	; (8005508 <MX_GPIO_Init+0x218>)
 80054e8:	f000 fbc8 	bl	8005c7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80054ec:	bf00      	nop
 80054ee:	3730      	adds	r7, #48	; 0x30
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40023800 	.word	0x40023800
 80054f8:	40021000 	.word	0x40021000
 80054fc:	40020800 	.word	0x40020800
 8005500:	40020c00 	.word	0x40020c00
 8005504:	40020000 	.word	0x40020000
 8005508:	40020400 	.word	0x40020400

0800550c <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  while(1)
  {
    //SEGGER_Sysview_printfTarget("Toggling green LED");
    HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8005514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005518:	4803      	ldr	r0, [pc, #12]	; (8005528 <led_green_handler+0x1c>)
 800551a:	f000 fd4c 	bl	8005fb6 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 800551e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005522:	f000 faa5 	bl	8005a70 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8005526:	e7f5      	b.n	8005514 <led_green_handler+0x8>
 8005528:	40020c00 	.word	0x40020c00

0800552c <led_orange_handler>:
  }
}
static void led_orange_handler(void* parameters)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  while(1)
  {
    //SEGGER_Sysview_printfTarget("Toggling green LED");
    HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8005534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005538:	4803      	ldr	r0, [pc, #12]	; (8005548 <led_orange_handler+0x1c>)
 800553a:	f000 fd3c 	bl	8005fb6 <HAL_GPIO_TogglePin>
    HAL_Delay(3000);
 800553e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005542:	f000 fa95 	bl	8005a70 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8005546:	e7f5      	b.n	8005534 <led_orange_handler+0x8>
 8005548:	40020c00 	.word	0x40020c00

0800554c <led_red_handler>:
  }
}

static void led_red_handler(void* parameters)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  while(1)
  {
    //SEGGER_Sysview_printfTarget("Toggling green LED");
    HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8005554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005558:	4803      	ldr	r0, [pc, #12]	; (8005568 <led_red_handler+0x1c>)
 800555a:	f000 fd2c 	bl	8005fb6 <HAL_GPIO_TogglePin>
    HAL_Delay(2000);
 800555e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005562:	f000 fa85 	bl	8005a70 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8005566:	e7f5      	b.n	8005554 <led_red_handler+0x8>
 8005568:	40020c00 	.word	0x40020c00

0800556c <led_blue_handler>:
  }
}
static void led_blue_handler(void* parameters)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  while(1)
  {
    //SEGGER_Sysview_printfTarget("Toggling green LED");
    HAL_GPIO_TogglePin(GPIOD, LED_BLUE_PIN);
 8005574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005578:	4803      	ldr	r0, [pc, #12]	; (8005588 <led_blue_handler+0x1c>)
 800557a:	f000 fd1c 	bl	8005fb6 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 800557e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005582:	f000 fa75 	bl	8005a70 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, LED_BLUE_PIN);
 8005586:	e7f5      	b.n	8005574 <led_blue_handler+0x8>
 8005588:	40020c00 	.word	0x40020c00

0800558c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559c:	d101      	bne.n	80055a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800559e:	f000 fa47 	bl	8005a30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80055a2:	bf00      	nop
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055aa:	b480      	push	{r7}
 80055ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055ae:	b672      	cpsid	i
}
 80055b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80055b2:	e7fe      	b.n	80055b2 <Error_Handler+0x8>

080055b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	607b      	str	r3, [r7, #4]
 80055be:	4b10      	ldr	r3, [pc, #64]	; (8005600 <HAL_MspInit+0x4c>)
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	4a0f      	ldr	r2, [pc, #60]	; (8005600 <HAL_MspInit+0x4c>)
 80055c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055c8:	6453      	str	r3, [r2, #68]	; 0x44
 80055ca:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <HAL_MspInit+0x4c>)
 80055cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <HAL_MspInit+0x4c>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	4a08      	ldr	r2, [pc, #32]	; (8005600 <HAL_MspInit+0x4c>)
 80055e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e4:	6413      	str	r3, [r2, #64]	; 0x40
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_MspInit+0x4c>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 80055f2:	f7fd f8d9 	bl	80027a8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40023800 	.word	0x40023800

08005604 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b090      	sub	sp, #64	; 0x40
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	605a      	str	r2, [r3, #4]
 8005616:	609a      	str	r2, [r3, #8]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800561c:	f107 0314 	add.w	r3, r7, #20
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	605a      	str	r2, [r3, #4]
 8005626:	609a      	str	r2, [r3, #8]
 8005628:	60da      	str	r2, [r3, #12]
 800562a:	611a      	str	r2, [r3, #16]
 800562c:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a3a      	ldr	r2, [pc, #232]	; (800571c <HAL_I2S_MspInit+0x118>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d16c      	bne.n	8005712 <HAL_I2S_MspInit+0x10e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8005638:	2301      	movs	r3, #1
 800563a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800563c:	23c0      	movs	r3, #192	; 0xc0
 800563e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8005640:	2308      	movs	r3, #8
 8005642:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8005644:	2302      	movs	r3, #2
 8005646:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005648:	f107 0314 	add.w	r3, r7, #20
 800564c:	4618      	mov	r0, r3
 800564e:	f003 fa2d 	bl	8008aac <HAL_RCCEx_PeriphCLKConfig>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8005658:	f7ff ffa7 	bl	80055aa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800565c:	2300      	movs	r3, #0
 800565e:	613b      	str	r3, [r7, #16]
 8005660:	4b2f      	ldr	r3, [pc, #188]	; (8005720 <HAL_I2S_MspInit+0x11c>)
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	4a2e      	ldr	r2, [pc, #184]	; (8005720 <HAL_I2S_MspInit+0x11c>)
 8005666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800566a:	6413      	str	r3, [r2, #64]	; 0x40
 800566c:	4b2c      	ldr	r3, [pc, #176]	; (8005720 <HAL_I2S_MspInit+0x11c>)
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	4b28      	ldr	r3, [pc, #160]	; (8005720 <HAL_I2S_MspInit+0x11c>)
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	4a27      	ldr	r2, [pc, #156]	; (8005720 <HAL_I2S_MspInit+0x11c>)
 8005682:	f043 0304 	orr.w	r3, r3, #4
 8005686:	6313      	str	r3, [r2, #48]	; 0x30
 8005688:	4b25      	ldr	r3, [pc, #148]	; (8005720 <HAL_I2S_MspInit+0x11c>)
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005694:	2300      	movs	r3, #0
 8005696:	60bb      	str	r3, [r7, #8]
 8005698:	4b21      	ldr	r3, [pc, #132]	; (8005720 <HAL_I2S_MspInit+0x11c>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	4a20      	ldr	r2, [pc, #128]	; (8005720 <HAL_I2S_MspInit+0x11c>)
 800569e:	f043 0302 	orr.w	r3, r3, #2
 80056a2:	6313      	str	r3, [r2, #48]	; 0x30
 80056a4:	4b1e      	ldr	r3, [pc, #120]	; (8005720 <HAL_I2S_MspInit+0x11c>)
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	60bb      	str	r3, [r7, #8]
 80056ae:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80056b0:	2304      	movs	r3, #4
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b4:	2302      	movs	r3, #2
 80056b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056bc:	2300      	movs	r3, #0
 80056be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80056c0:	2306      	movs	r3, #6
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056c8:	4619      	mov	r1, r3
 80056ca:	4816      	ldr	r0, [pc, #88]	; (8005724 <HAL_I2S_MspInit+0x120>)
 80056cc:	f000 fad6 	bl	8005c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80056d0:	2308      	movs	r3, #8
 80056d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d4:	2302      	movs	r3, #2
 80056d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056dc:	2300      	movs	r3, #0
 80056de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80056e0:	2305      	movs	r3, #5
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80056e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056e8:	4619      	mov	r1, r3
 80056ea:	480e      	ldr	r0, [pc, #56]	; (8005724 <HAL_I2S_MspInit+0x120>)
 80056ec:	f000 fac6 	bl	8005c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80056f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f6:	2302      	movs	r3, #2
 80056f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056fe:	2300      	movs	r3, #0
 8005700:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005702:	2305      	movs	r3, #5
 8005704:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800570a:	4619      	mov	r1, r3
 800570c:	4806      	ldr	r0, [pc, #24]	; (8005728 <HAL_I2S_MspInit+0x124>)
 800570e:	f000 fab5 	bl	8005c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005712:	bf00      	nop
 8005714:	3740      	adds	r7, #64	; 0x40
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40003800 	.word	0x40003800
 8005720:	40023800 	.word	0x40023800
 8005724:	40020800 	.word	0x40020800
 8005728:	40020400 	.word	0x40020400

0800572c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08a      	sub	sp, #40	; 0x28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005734:	f107 0314 	add.w	r3, r7, #20
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	605a      	str	r2, [r3, #4]
 800573e:	609a      	str	r2, [r3, #8]
 8005740:	60da      	str	r2, [r3, #12]
 8005742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a19      	ldr	r2, [pc, #100]	; (80057b0 <HAL_SPI_MspInit+0x84>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d12b      	bne.n	80057a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800574e:	2300      	movs	r3, #0
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	4b18      	ldr	r3, [pc, #96]	; (80057b4 <HAL_SPI_MspInit+0x88>)
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <HAL_SPI_MspInit+0x88>)
 8005758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800575c:	6453      	str	r3, [r2, #68]	; 0x44
 800575e:	4b15      	ldr	r3, [pc, #84]	; (80057b4 <HAL_SPI_MspInit+0x88>)
 8005760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <HAL_SPI_MspInit+0x88>)
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <HAL_SPI_MspInit+0x88>)
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	6313      	str	r3, [r2, #48]	; 0x30
 800577a:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <HAL_SPI_MspInit+0x88>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8005786:	23e0      	movs	r3, #224	; 0xe0
 8005788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578a:	2302      	movs	r3, #2
 800578c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800578e:	2300      	movs	r3, #0
 8005790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005792:	2303      	movs	r3, #3
 8005794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005796:	2305      	movs	r3, #5
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800579a:	f107 0314 	add.w	r3, r7, #20
 800579e:	4619      	mov	r1, r3
 80057a0:	4805      	ldr	r0, [pc, #20]	; (80057b8 <HAL_SPI_MspInit+0x8c>)
 80057a2:	f000 fa6b 	bl	8005c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80057a6:	bf00      	nop
 80057a8:	3728      	adds	r7, #40	; 0x28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40013000 	.word	0x40013000
 80057b4:	40023800 	.word	0x40023800
 80057b8:	40020000 	.word	0x40020000

080057bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08e      	sub	sp, #56	; 0x38
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	4b34      	ldr	r3, [pc, #208]	; (80058a4 <HAL_InitTick+0xe8>)
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	4a33      	ldr	r2, [pc, #204]	; (80058a4 <HAL_InitTick+0xe8>)
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	6413      	str	r3, [r2, #64]	; 0x40
 80057dc:	4b31      	ldr	r3, [pc, #196]	; (80058a4 <HAL_InitTick+0xe8>)
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80057e8:	f107 0210 	add.w	r2, r7, #16
 80057ec:	f107 0314 	add.w	r3, r7, #20
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f003 f928 	bl	8008a48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d103      	bne.n	800580a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005802:	f003 f90d 	bl	8008a20 <HAL_RCC_GetPCLK1Freq>
 8005806:	6378      	str	r0, [r7, #52]	; 0x34
 8005808:	e004      	b.n	8005814 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800580a:	f003 f909 	bl	8008a20 <HAL_RCC_GetPCLK1Freq>
 800580e:	4603      	mov	r3, r0
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005816:	4a24      	ldr	r2, [pc, #144]	; (80058a8 <HAL_InitTick+0xec>)
 8005818:	fba2 2303 	umull	r2, r3, r2, r3
 800581c:	0c9b      	lsrs	r3, r3, #18
 800581e:	3b01      	subs	r3, #1
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8005822:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_InitTick+0xf0>)
 8005824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005828:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800582a:	4b20      	ldr	r3, [pc, #128]	; (80058ac <HAL_InitTick+0xf0>)
 800582c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005830:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8005832:	4a1e      	ldr	r2, [pc, #120]	; (80058ac <HAL_InitTick+0xf0>)
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8005838:	4b1c      	ldr	r3, [pc, #112]	; (80058ac <HAL_InitTick+0xf0>)
 800583a:	2200      	movs	r2, #0
 800583c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800583e:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <HAL_InitTick+0xf0>)
 8005840:	2200      	movs	r2, #0
 8005842:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005844:	4b19      	ldr	r3, [pc, #100]	; (80058ac <HAL_InitTick+0xf0>)
 8005846:	2200      	movs	r2, #0
 8005848:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800584a:	4818      	ldr	r0, [pc, #96]	; (80058ac <HAL_InitTick+0xf0>)
 800584c:	f003 fb07 	bl	8008e5e <HAL_TIM_Base_Init>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005856:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800585a:	2b00      	cmp	r3, #0
 800585c:	d11b      	bne.n	8005896 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800585e:	4813      	ldr	r0, [pc, #76]	; (80058ac <HAL_InitTick+0xf0>)
 8005860:	f003 fb56 	bl	8008f10 <HAL_TIM_Base_Start_IT>
 8005864:	4603      	mov	r3, r0
 8005866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800586a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800586e:	2b00      	cmp	r3, #0
 8005870:	d111      	bne.n	8005896 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005872:	201c      	movs	r0, #28
 8005874:	f000 f9f4 	bl	8005c60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b0f      	cmp	r3, #15
 800587c:	d808      	bhi.n	8005890 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800587e:	2200      	movs	r2, #0
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	201c      	movs	r0, #28
 8005884:	f000 f9d0 	bl	8005c28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005888:	4a09      	ldr	r2, [pc, #36]	; (80058b0 <HAL_InitTick+0xf4>)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	e002      	b.n	8005896 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800589a:	4618      	mov	r0, r3
 800589c:	3738      	adds	r7, #56	; 0x38
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40023800 	.word	0x40023800
 80058a8:	431bde83 	.word	0x431bde83
 80058ac:	20014584 	.word	0x20014584
 80058b0:	20000014 	.word	0x20000014

080058b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058b8:	e7fe      	b.n	80058b8 <NMI_Handler+0x4>

080058ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058ba:	b480      	push	{r7}
 80058bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058be:	e7fe      	b.n	80058be <HardFault_Handler+0x4>

080058c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058c4:	e7fe      	b.n	80058c4 <MemManage_Handler+0x4>

080058c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058c6:	b480      	push	{r7}
 80058c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058ca:	e7fe      	b.n	80058ca <BusFault_Handler+0x4>

080058cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058d0:	e7fe      	b.n	80058d0 <UsageFault_Handler+0x4>

080058d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058d2:	b480      	push	{r7}
 80058d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058d6:	bf00      	nop
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80058e4:	4802      	ldr	r0, [pc, #8]	; (80058f0 <TIM2_IRQHandler+0x10>)
 80058e6:	f003 fb75 	bl	8008fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80058ea:	bf00      	nop
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20014584 	.word	0x20014584

080058f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80058f8:	4802      	ldr	r0, [pc, #8]	; (8005904 <OTG_FS_IRQHandler+0x10>)
 80058fa:	f000 fde1 	bl	80064c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80058fe:	bf00      	nop
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	200149b0 	.word	0x200149b0

08005908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005910:	4a14      	ldr	r2, [pc, #80]	; (8005964 <_sbrk+0x5c>)
 8005912:	4b15      	ldr	r3, [pc, #84]	; (8005968 <_sbrk+0x60>)
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800591c:	4b13      	ldr	r3, [pc, #76]	; (800596c <_sbrk+0x64>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005924:	4b11      	ldr	r3, [pc, #68]	; (800596c <_sbrk+0x64>)
 8005926:	4a12      	ldr	r2, [pc, #72]	; (8005970 <_sbrk+0x68>)
 8005928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800592a:	4b10      	ldr	r3, [pc, #64]	; (800596c <_sbrk+0x64>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4413      	add	r3, r2
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	429a      	cmp	r2, r3
 8005936:	d207      	bcs.n	8005948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005938:	f006 ffec 	bl	800c914 <__errno>
 800593c:	4603      	mov	r3, r0
 800593e:	220c      	movs	r2, #12
 8005940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005942:	f04f 33ff 	mov.w	r3, #4294967295
 8005946:	e009      	b.n	800595c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005948:	4b08      	ldr	r3, [pc, #32]	; (800596c <_sbrk+0x64>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <_sbrk+0x64>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4413      	add	r3, r2
 8005956:	4a05      	ldr	r2, [pc, #20]	; (800596c <_sbrk+0x64>)
 8005958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800595a:	68fb      	ldr	r3, [r7, #12]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20020000 	.word	0x20020000
 8005968:	00000400 	.word	0x00000400
 800596c:	200145cc 	.word	0x200145cc
 8005970:	20014cc8 	.word	0x20014cc8

08005974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <SystemInit+0x20>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597e:	4a05      	ldr	r2, [pc, #20]	; (8005994 <SystemInit+0x20>)
 8005980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	e000ed00 	.word	0xe000ed00

08005998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800599c:	480d      	ldr	r0, [pc, #52]	; (80059d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800599e:	490e      	ldr	r1, [pc, #56]	; (80059d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80059a0:	4a0e      	ldr	r2, [pc, #56]	; (80059dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80059a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059a4:	e002      	b.n	80059ac <LoopCopyDataInit>

080059a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059aa:	3304      	adds	r3, #4

080059ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059b0:	d3f9      	bcc.n	80059a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059b2:	4a0b      	ldr	r2, [pc, #44]	; (80059e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80059b4:	4c0b      	ldr	r4, [pc, #44]	; (80059e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80059b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059b8:	e001      	b.n	80059be <LoopFillZerobss>

080059ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059bc:	3204      	adds	r2, #4

080059be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059c0:	d3fb      	bcc.n	80059ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80059c2:	f7ff ffd7 	bl	8005974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80059c6:	f006 ffab 	bl	800c920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059ca:	f7ff fb29 	bl	8005020 <main>
  bx  lr    
 80059ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80059d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80059d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059d8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80059dc:	0800cd50 	.word	0x0800cd50
  ldr r2, =_sbss
 80059e0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80059e4:	20014cc4 	.word	0x20014cc4

080059e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059e8:	e7fe      	b.n	80059e8 <ADC_IRQHandler>
	...

080059ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80059f0:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <HAL_Init+0x40>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a0d      	ldr	r2, [pc, #52]	; (8005a2c <HAL_Init+0x40>)
 80059f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HAL_Init+0x40>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <HAL_Init+0x40>)
 8005a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a08:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <HAL_Init+0x40>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a07      	ldr	r2, [pc, #28]	; (8005a2c <HAL_Init+0x40>)
 8005a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a14:	2003      	movs	r0, #3
 8005a16:	f000 f8fc 	bl	8005c12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a1a:	200f      	movs	r0, #15
 8005a1c:	f7ff fece 	bl	80057bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a20:	f7ff fdc8 	bl	80055b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40023c00 	.word	0x40023c00

08005a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <HAL_IncTick+0x20>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <HAL_IncTick+0x24>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4413      	add	r3, r2
 8005a40:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <HAL_IncTick+0x24>)
 8005a42:	6013      	str	r3, [r2, #0]
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000018 	.word	0x20000018
 8005a54:	200145d0 	.word	0x200145d0

08005a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_GetTick+0x14>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	200145d0 	.word	0x200145d0

08005a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a78:	f7ff ffee 	bl	8005a58 <HAL_GetTick>
 8005a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d005      	beq.n	8005a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <HAL_Delay+0x44>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a96:	bf00      	nop
 8005a98:	f7ff ffde 	bl	8005a58 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d8f7      	bhi.n	8005a98 <HAL_Delay+0x28>
  {
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000018 	.word	0x20000018

08005ab8 <__NVIC_SetPriorityGrouping>:
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <__NVIC_SetPriorityGrouping+0x44>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aea:	4a04      	ldr	r2, [pc, #16]	; (8005afc <__NVIC_SetPriorityGrouping+0x44>)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	60d3      	str	r3, [r2, #12]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000ed00 	.word	0xe000ed00

08005b00 <__NVIC_GetPriorityGrouping>:
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <__NVIC_GetPriorityGrouping+0x18>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	0a1b      	lsrs	r3, r3, #8
 8005b0a:	f003 0307 	and.w	r3, r3, #7
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	e000ed00 	.word	0xe000ed00

08005b1c <__NVIC_EnableIRQ>:
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4603      	mov	r3, r0
 8005b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	db0b      	blt.n	8005b46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	f003 021f 	and.w	r2, r3, #31
 8005b34:	4907      	ldr	r1, [pc, #28]	; (8005b54 <__NVIC_EnableIRQ+0x38>)
 8005b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	e000e100 	.word	0xe000e100

08005b58 <__NVIC_SetPriority>:
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	6039      	str	r1, [r7, #0]
 8005b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	db0a      	blt.n	8005b82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	490c      	ldr	r1, [pc, #48]	; (8005ba4 <__NVIC_SetPriority+0x4c>)
 8005b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b76:	0112      	lsls	r2, r2, #4
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b80:	e00a      	b.n	8005b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	4908      	ldr	r1, [pc, #32]	; (8005ba8 <__NVIC_SetPriority+0x50>)
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	3b04      	subs	r3, #4
 8005b90:	0112      	lsls	r2, r2, #4
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	440b      	add	r3, r1
 8005b96:	761a      	strb	r2, [r3, #24]
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	e000e100 	.word	0xe000e100
 8005ba8:	e000ed00 	.word	0xe000ed00

08005bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b089      	sub	sp, #36	; 0x24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f1c3 0307 	rsb	r3, r3, #7
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	bf28      	it	cs
 8005bca:	2304      	movcs	r3, #4
 8005bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	2b06      	cmp	r3, #6
 8005bd4:	d902      	bls.n	8005bdc <NVIC_EncodePriority+0x30>
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	3b03      	subs	r3, #3
 8005bda:	e000      	b.n	8005bde <NVIC_EncodePriority+0x32>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005be0:	f04f 32ff 	mov.w	r2, #4294967295
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	43da      	mvns	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	401a      	ands	r2, r3
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfe:	43d9      	mvns	r1, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c04:	4313      	orrs	r3, r2
         );
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3724      	adds	r7, #36	; 0x24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff ff4c 	bl	8005ab8 <__NVIC_SetPriorityGrouping>
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c3a:	f7ff ff61 	bl	8005b00 <__NVIC_GetPriorityGrouping>
 8005c3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	6978      	ldr	r0, [r7, #20]
 8005c46:	f7ff ffb1 	bl	8005bac <NVIC_EncodePriority>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c50:	4611      	mov	r1, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff ff80 	bl	8005b58 <__NVIC_SetPriority>
}
 8005c58:	bf00      	nop
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff ff54 	bl	8005b1c <__NVIC_EnableIRQ>
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b089      	sub	sp, #36	; 0x24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c92:	2300      	movs	r3, #0
 8005c94:	61fb      	str	r3, [r7, #28]
 8005c96:	e159      	b.n	8005f4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c98:	2201      	movs	r2, #1
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	f040 8148 	bne.w	8005f46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d005      	beq.n	8005cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d130      	bne.n	8005d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	2203      	movs	r2, #3
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d04:	2201      	movs	r2, #1
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4013      	ands	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	f003 0201 	and.w	r2, r3, #1
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d017      	beq.n	8005d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	2203      	movs	r2, #3
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	4013      	ands	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d123      	bne.n	8005dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	08da      	lsrs	r2, r3, #3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3208      	adds	r2, #8
 8005d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	220f      	movs	r2, #15
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	43db      	mvns	r3, r3
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	08da      	lsrs	r2, r3, #3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3208      	adds	r2, #8
 8005dba:	69b9      	ldr	r1, [r7, #24]
 8005dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	2203      	movs	r2, #3
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f003 0203 	and.w	r2, r3, #3
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80a2 	beq.w	8005f46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	4b57      	ldr	r3, [pc, #348]	; (8005f64 <HAL_GPIO_Init+0x2e8>)
 8005e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0a:	4a56      	ldr	r2, [pc, #344]	; (8005f64 <HAL_GPIO_Init+0x2e8>)
 8005e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e10:	6453      	str	r3, [r2, #68]	; 0x44
 8005e12:	4b54      	ldr	r3, [pc, #336]	; (8005f64 <HAL_GPIO_Init+0x2e8>)
 8005e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e1e:	4a52      	ldr	r2, [pc, #328]	; (8005f68 <HAL_GPIO_Init+0x2ec>)
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	089b      	lsrs	r3, r3, #2
 8005e24:	3302      	adds	r3, #2
 8005e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	220f      	movs	r2, #15
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a49      	ldr	r2, [pc, #292]	; (8005f6c <HAL_GPIO_Init+0x2f0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d019      	beq.n	8005e7e <HAL_GPIO_Init+0x202>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a48      	ldr	r2, [pc, #288]	; (8005f70 <HAL_GPIO_Init+0x2f4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <HAL_GPIO_Init+0x1fe>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a47      	ldr	r2, [pc, #284]	; (8005f74 <HAL_GPIO_Init+0x2f8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00d      	beq.n	8005e76 <HAL_GPIO_Init+0x1fa>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a46      	ldr	r2, [pc, #280]	; (8005f78 <HAL_GPIO_Init+0x2fc>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <HAL_GPIO_Init+0x1f6>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a45      	ldr	r2, [pc, #276]	; (8005f7c <HAL_GPIO_Init+0x300>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d101      	bne.n	8005e6e <HAL_GPIO_Init+0x1f2>
 8005e6a:	2304      	movs	r3, #4
 8005e6c:	e008      	b.n	8005e80 <HAL_GPIO_Init+0x204>
 8005e6e:	2307      	movs	r3, #7
 8005e70:	e006      	b.n	8005e80 <HAL_GPIO_Init+0x204>
 8005e72:	2303      	movs	r3, #3
 8005e74:	e004      	b.n	8005e80 <HAL_GPIO_Init+0x204>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e002      	b.n	8005e80 <HAL_GPIO_Init+0x204>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <HAL_GPIO_Init+0x204>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	f002 0203 	and.w	r2, r2, #3
 8005e86:	0092      	lsls	r2, r2, #2
 8005e88:	4093      	lsls	r3, r2
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e90:	4935      	ldr	r1, [pc, #212]	; (8005f68 <HAL_GPIO_Init+0x2ec>)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	089b      	lsrs	r3, r3, #2
 8005e96:	3302      	adds	r3, #2
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e9e:	4b38      	ldr	r3, [pc, #224]	; (8005f80 <HAL_GPIO_Init+0x304>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ec2:	4a2f      	ldr	r2, [pc, #188]	; (8005f80 <HAL_GPIO_Init+0x304>)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ec8:	4b2d      	ldr	r3, [pc, #180]	; (8005f80 <HAL_GPIO_Init+0x304>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005eec:	4a24      	ldr	r2, [pc, #144]	; (8005f80 <HAL_GPIO_Init+0x304>)
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ef2:	4b23      	ldr	r3, [pc, #140]	; (8005f80 <HAL_GPIO_Init+0x304>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	43db      	mvns	r3, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4013      	ands	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f16:	4a1a      	ldr	r2, [pc, #104]	; (8005f80 <HAL_GPIO_Init+0x304>)
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f1c:	4b18      	ldr	r3, [pc, #96]	; (8005f80 <HAL_GPIO_Init+0x304>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	43db      	mvns	r3, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f40:	4a0f      	ldr	r2, [pc, #60]	; (8005f80 <HAL_GPIO_Init+0x304>)
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	2b0f      	cmp	r3, #15
 8005f50:	f67f aea2 	bls.w	8005c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop
 8005f58:	3724      	adds	r7, #36	; 0x24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40023800 	.word	0x40023800
 8005f68:	40013800 	.word	0x40013800
 8005f6c:	40020000 	.word	0x40020000
 8005f70:	40020400 	.word	0x40020400
 8005f74:	40020800 	.word	0x40020800
 8005f78:	40020c00 	.word	0x40020c00
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	40013c00 	.word	0x40013c00

08005f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	807b      	strh	r3, [r7, #2]
 8005f90:	4613      	mov	r3, r2
 8005f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f94:	787b      	ldrb	r3, [r7, #1]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f9a:	887a      	ldrh	r2, [r7, #2]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fa0:	e003      	b.n	8005faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fa2:	887b      	ldrh	r3, [r7, #2]
 8005fa4:	041a      	lsls	r2, r3, #16
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	619a      	str	r2, [r3, #24]
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005fc8:	887a      	ldrh	r2, [r7, #2]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	041a      	lsls	r2, r3, #16
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	43d9      	mvns	r1, r3
 8005fd4:	887b      	ldrh	r3, [r7, #2]
 8005fd6:	400b      	ands	r3, r1
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	619a      	str	r2, [r3, #24]
}
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fec:	b08f      	sub	sp, #60	; 0x3c
 8005fee:	af0a      	add	r7, sp, #40	; 0x28
 8005ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e054      	b.n	80060a6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f006 f9d2 	bl	800c3c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2203      	movs	r2, #3
 8006020:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f003 fa00 	bl	8009440 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	603b      	str	r3, [r7, #0]
 8006046:	687e      	ldr	r6, [r7, #4]
 8006048:	466d      	mov	r5, sp
 800604a:	f106 0410 	add.w	r4, r6, #16
 800604e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006056:	e894 0003 	ldmia.w	r4, {r0, r1}
 800605a:	e885 0003 	stmia.w	r5, {r0, r1}
 800605e:	1d33      	adds	r3, r6, #4
 8006060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006062:	6838      	ldr	r0, [r7, #0]
 8006064:	f003 f97a 	bl	800935c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	4618      	mov	r0, r3
 8006070:	f003 f9f7 	bl	8009462 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	687e      	ldr	r6, [r7, #4]
 800607c:	466d      	mov	r5, sp
 800607e:	f106 0410 	add.w	r4, r6, #16
 8006082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800608a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800608e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006092:	1d33      	adds	r3, r6, #4
 8006094:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006096:	6838      	ldr	r0, [r7, #0]
 8006098:	f003 fb80 	bl	800979c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060ae <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80060ae:	b590      	push	{r4, r7, lr}
 80060b0:	b089      	sub	sp, #36	; 0x24
 80060b2:	af04      	add	r7, sp, #16
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	4608      	mov	r0, r1
 80060b8:	4611      	mov	r1, r2
 80060ba:	461a      	mov	r2, r3
 80060bc:	4603      	mov	r3, r0
 80060be:	70fb      	strb	r3, [r7, #3]
 80060c0:	460b      	mov	r3, r1
 80060c2:	70bb      	strb	r3, [r7, #2]
 80060c4:	4613      	mov	r3, r2
 80060c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_HCD_HC_Init+0x28>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e076      	b.n	80061c4 <HAL_HCD_HC_Init+0x116>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80060de:	78fb      	ldrb	r3, [r7, #3]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	212c      	movs	r1, #44	; 0x2c
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	4413      	add	r3, r2
 80060ea:	333d      	adds	r3, #61	; 0x3d
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	212c      	movs	r1, #44	; 0x2c
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	4413      	add	r3, r2
 80060fc:	3338      	adds	r3, #56	; 0x38
 80060fe:	787a      	ldrb	r2, [r7, #1]
 8006100:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	212c      	movs	r1, #44	; 0x2c
 8006108:	fb01 f303 	mul.w	r3, r1, r3
 800610c:	4413      	add	r3, r2
 800610e:	3340      	adds	r3, #64	; 0x40
 8006110:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006112:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	212c      	movs	r1, #44	; 0x2c
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	4413      	add	r3, r2
 8006120:	3339      	adds	r3, #57	; 0x39
 8006122:	78fa      	ldrb	r2, [r7, #3]
 8006124:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	212c      	movs	r1, #44	; 0x2c
 800612c:	fb01 f303 	mul.w	r3, r1, r3
 8006130:	4413      	add	r3, r2
 8006132:	333f      	adds	r3, #63	; 0x3f
 8006134:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006138:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	78ba      	ldrb	r2, [r7, #2]
 800613e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006142:	b2d0      	uxtb	r0, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	212c      	movs	r1, #44	; 0x2c
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	4413      	add	r3, r2
 800614e:	333a      	adds	r3, #58	; 0x3a
 8006150:	4602      	mov	r2, r0
 8006152:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006154:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006158:	2b00      	cmp	r3, #0
 800615a:	da09      	bge.n	8006170 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	212c      	movs	r1, #44	; 0x2c
 8006162:	fb01 f303 	mul.w	r3, r1, r3
 8006166:	4413      	add	r3, r2
 8006168:	333b      	adds	r3, #59	; 0x3b
 800616a:	2201      	movs	r2, #1
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e008      	b.n	8006182 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	212c      	movs	r1, #44	; 0x2c
 8006176:	fb01 f303 	mul.w	r3, r1, r3
 800617a:	4413      	add	r3, r2
 800617c:	333b      	adds	r3, #59	; 0x3b
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	212c      	movs	r1, #44	; 0x2c
 8006188:	fb01 f303 	mul.w	r3, r1, r3
 800618c:	4413      	add	r3, r2
 800618e:	333c      	adds	r3, #60	; 0x3c
 8006190:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006194:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	787c      	ldrb	r4, [r7, #1]
 800619c:	78ba      	ldrb	r2, [r7, #2]
 800619e:	78f9      	ldrb	r1, [r7, #3]
 80061a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80061a2:	9302      	str	r3, [sp, #8]
 80061a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	4623      	mov	r3, r4
 80061b2:	f003 fc79 	bl	8009aa8 <USB_HC_Init>
 80061b6:	4603      	mov	r3, r0
 80061b8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd90      	pop	{r4, r7, pc}

080061cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_HCD_HC_Halt+0x1e>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e00f      	b.n	800620a <HAL_HCD_HC_Halt+0x3e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	78fa      	ldrb	r2, [r7, #3]
 80061f8:	4611      	mov	r1, r2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f003 fec9 	bl	8009f92 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006208:	7bfb      	ldrb	r3, [r7, #15]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	4608      	mov	r0, r1
 800621e:	4611      	mov	r1, r2
 8006220:	461a      	mov	r2, r3
 8006222:	4603      	mov	r3, r0
 8006224:	70fb      	strb	r3, [r7, #3]
 8006226:	460b      	mov	r3, r1
 8006228:	70bb      	strb	r3, [r7, #2]
 800622a:	4613      	mov	r3, r2
 800622c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800622e:	78fb      	ldrb	r3, [r7, #3]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	212c      	movs	r1, #44	; 0x2c
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	4413      	add	r3, r2
 800623a:	333b      	adds	r3, #59	; 0x3b
 800623c:	78ba      	ldrb	r2, [r7, #2]
 800623e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	212c      	movs	r1, #44	; 0x2c
 8006246:	fb01 f303 	mul.w	r3, r1, r3
 800624a:	4413      	add	r3, r2
 800624c:	333f      	adds	r3, #63	; 0x3f
 800624e:	787a      	ldrb	r2, [r7, #1]
 8006250:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006252:	7c3b      	ldrb	r3, [r7, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d112      	bne.n	800627e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	212c      	movs	r1, #44	; 0x2c
 800625e:	fb01 f303 	mul.w	r3, r1, r3
 8006262:	4413      	add	r3, r2
 8006264:	3342      	adds	r3, #66	; 0x42
 8006266:	2203      	movs	r2, #3
 8006268:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	212c      	movs	r1, #44	; 0x2c
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	4413      	add	r3, r2
 8006276:	333d      	adds	r3, #61	; 0x3d
 8006278:	7f3a      	ldrb	r2, [r7, #28]
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	e008      	b.n	8006290 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	212c      	movs	r1, #44	; 0x2c
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	4413      	add	r3, r2
 800628a:	3342      	adds	r3, #66	; 0x42
 800628c:	2202      	movs	r2, #2
 800628e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006290:	787b      	ldrb	r3, [r7, #1]
 8006292:	2b03      	cmp	r3, #3
 8006294:	f200 80c6 	bhi.w	8006424 <HAL_HCD_HC_SubmitRequest+0x210>
 8006298:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800629a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629e:	bf00      	nop
 80062a0:	080062b1 	.word	0x080062b1
 80062a4:	08006411 	.word	0x08006411
 80062a8:	08006315 	.word	0x08006315
 80062ac:	08006393 	.word	0x08006393
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80062b0:	7c3b      	ldrb	r3, [r7, #16]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	f040 80b8 	bne.w	8006428 <HAL_HCD_HC_SubmitRequest+0x214>
 80062b8:	78bb      	ldrb	r3, [r7, #2]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f040 80b4 	bne.w	8006428 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80062c0:	8b3b      	ldrh	r3, [r7, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d108      	bne.n	80062d8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	212c      	movs	r1, #44	; 0x2c
 80062cc:	fb01 f303 	mul.w	r3, r1, r3
 80062d0:	4413      	add	r3, r2
 80062d2:	3355      	adds	r3, #85	; 0x55
 80062d4:	2201      	movs	r2, #1
 80062d6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	212c      	movs	r1, #44	; 0x2c
 80062de:	fb01 f303 	mul.w	r3, r1, r3
 80062e2:	4413      	add	r3, r2
 80062e4:	3355      	adds	r3, #85	; 0x55
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d109      	bne.n	8006300 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	212c      	movs	r1, #44	; 0x2c
 80062f2:	fb01 f303 	mul.w	r3, r1, r3
 80062f6:	4413      	add	r3, r2
 80062f8:	3342      	adds	r3, #66	; 0x42
 80062fa:	2200      	movs	r2, #0
 80062fc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80062fe:	e093      	b.n	8006428 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	212c      	movs	r1, #44	; 0x2c
 8006306:	fb01 f303 	mul.w	r3, r1, r3
 800630a:	4413      	add	r3, r2
 800630c:	3342      	adds	r3, #66	; 0x42
 800630e:	2202      	movs	r2, #2
 8006310:	701a      	strb	r2, [r3, #0]
      break;
 8006312:	e089      	b.n	8006428 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006314:	78bb      	ldrb	r3, [r7, #2]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d11d      	bne.n	8006356 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	212c      	movs	r1, #44	; 0x2c
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	4413      	add	r3, r2
 8006326:	3355      	adds	r3, #85	; 0x55
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d109      	bne.n	8006342 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	212c      	movs	r1, #44	; 0x2c
 8006334:	fb01 f303 	mul.w	r3, r1, r3
 8006338:	4413      	add	r3, r2
 800633a:	3342      	adds	r3, #66	; 0x42
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006340:	e073      	b.n	800642a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	212c      	movs	r1, #44	; 0x2c
 8006348:	fb01 f303 	mul.w	r3, r1, r3
 800634c:	4413      	add	r3, r2
 800634e:	3342      	adds	r3, #66	; 0x42
 8006350:	2202      	movs	r2, #2
 8006352:	701a      	strb	r2, [r3, #0]
      break;
 8006354:	e069      	b.n	800642a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	212c      	movs	r1, #44	; 0x2c
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	4413      	add	r3, r2
 8006362:	3354      	adds	r3, #84	; 0x54
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d109      	bne.n	800637e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	212c      	movs	r1, #44	; 0x2c
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	4413      	add	r3, r2
 8006376:	3342      	adds	r3, #66	; 0x42
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
      break;
 800637c:	e055      	b.n	800642a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	212c      	movs	r1, #44	; 0x2c
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	4413      	add	r3, r2
 800638a:	3342      	adds	r3, #66	; 0x42
 800638c:	2202      	movs	r2, #2
 800638e:	701a      	strb	r2, [r3, #0]
      break;
 8006390:	e04b      	b.n	800642a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006392:	78bb      	ldrb	r3, [r7, #2]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11d      	bne.n	80063d4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	212c      	movs	r1, #44	; 0x2c
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	3355      	adds	r3, #85	; 0x55
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	212c      	movs	r1, #44	; 0x2c
 80063b2:	fb01 f303 	mul.w	r3, r1, r3
 80063b6:	4413      	add	r3, r2
 80063b8:	3342      	adds	r3, #66	; 0x42
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80063be:	e034      	b.n	800642a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	212c      	movs	r1, #44	; 0x2c
 80063c6:	fb01 f303 	mul.w	r3, r1, r3
 80063ca:	4413      	add	r3, r2
 80063cc:	3342      	adds	r3, #66	; 0x42
 80063ce:	2202      	movs	r2, #2
 80063d0:	701a      	strb	r2, [r3, #0]
      break;
 80063d2:	e02a      	b.n	800642a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	212c      	movs	r1, #44	; 0x2c
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	4413      	add	r3, r2
 80063e0:	3354      	adds	r3, #84	; 0x54
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d109      	bne.n	80063fc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	212c      	movs	r1, #44	; 0x2c
 80063ee:	fb01 f303 	mul.w	r3, r1, r3
 80063f2:	4413      	add	r3, r2
 80063f4:	3342      	adds	r3, #66	; 0x42
 80063f6:	2200      	movs	r2, #0
 80063f8:	701a      	strb	r2, [r3, #0]
      break;
 80063fa:	e016      	b.n	800642a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	212c      	movs	r1, #44	; 0x2c
 8006402:	fb01 f303 	mul.w	r3, r1, r3
 8006406:	4413      	add	r3, r2
 8006408:	3342      	adds	r3, #66	; 0x42
 800640a:	2202      	movs	r2, #2
 800640c:	701a      	strb	r2, [r3, #0]
      break;
 800640e:	e00c      	b.n	800642a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	212c      	movs	r1, #44	; 0x2c
 8006416:	fb01 f303 	mul.w	r3, r1, r3
 800641a:	4413      	add	r3, r2
 800641c:	3342      	adds	r3, #66	; 0x42
 800641e:	2200      	movs	r2, #0
 8006420:	701a      	strb	r2, [r3, #0]
      break;
 8006422:	e002      	b.n	800642a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006424:	bf00      	nop
 8006426:	e000      	b.n	800642a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006428:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	212c      	movs	r1, #44	; 0x2c
 8006430:	fb01 f303 	mul.w	r3, r1, r3
 8006434:	4413      	add	r3, r2
 8006436:	3344      	adds	r3, #68	; 0x44
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	8b3a      	ldrh	r2, [r7, #24]
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	202c      	movs	r0, #44	; 0x2c
 8006444:	fb00 f303 	mul.w	r3, r0, r3
 8006448:	440b      	add	r3, r1
 800644a:	334c      	adds	r3, #76	; 0x4c
 800644c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	212c      	movs	r1, #44	; 0x2c
 8006454:	fb01 f303 	mul.w	r3, r1, r3
 8006458:	4413      	add	r3, r2
 800645a:	3360      	adds	r3, #96	; 0x60
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	212c      	movs	r1, #44	; 0x2c
 8006466:	fb01 f303 	mul.w	r3, r1, r3
 800646a:	4413      	add	r3, r2
 800646c:	3350      	adds	r3, #80	; 0x50
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	212c      	movs	r1, #44	; 0x2c
 8006478:	fb01 f303 	mul.w	r3, r1, r3
 800647c:	4413      	add	r3, r2
 800647e:	3339      	adds	r3, #57	; 0x39
 8006480:	78fa      	ldrb	r2, [r7, #3]
 8006482:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	212c      	movs	r1, #44	; 0x2c
 800648a:	fb01 f303 	mul.w	r3, r1, r3
 800648e:	4413      	add	r3, r2
 8006490:	3361      	adds	r3, #97	; 0x61
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	222c      	movs	r2, #44	; 0x2c
 800649e:	fb02 f303 	mul.w	r3, r2, r3
 80064a2:	3338      	adds	r3, #56	; 0x38
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	18d1      	adds	r1, r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	f003 fc1c 	bl	8009cec <USB_HC_StartXfer>
 80064b4:	4603      	mov	r3, r0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop

080064c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f003 f91d 	bl	8009716 <USB_GetMode>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b01      	cmp	r3, #1
 80064e0:	f040 80f6 	bne.w	80066d0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f003 f901 	bl	80096f0 <USB_ReadInterrupts>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80ec 	beq.w	80066ce <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f003 f8f8 	bl	80096f0 <USB_ReadInterrupts>
 8006500:	4603      	mov	r3, r0
 8006502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800650a:	d104      	bne.n	8006516 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006514:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f003 f8e8 	bl	80096f0 <USB_ReadInterrupts>
 8006520:	4603      	mov	r3, r0
 8006522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800652a:	d104      	bne.n	8006536 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006534:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f003 f8d8 	bl	80096f0 <USB_ReadInterrupts>
 8006540:	4603      	mov	r3, r0
 8006542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800654a:	d104      	bne.n	8006556 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006554:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f003 f8c8 	bl	80096f0 <USB_ReadInterrupts>
 8006560:	4603      	mov	r3, r0
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b02      	cmp	r3, #2
 8006568:	d103      	bne.n	8006572 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2202      	movs	r2, #2
 8006570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f003 f8ba 	bl	80096f0 <USB_ReadInterrupts>
 800657c:	4603      	mov	r3, r0
 800657e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006586:	d11c      	bne.n	80065c2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006590:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10f      	bne.n	80065c2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80065a2:	2110      	movs	r1, #16
 80065a4:	6938      	ldr	r0, [r7, #16]
 80065a6:	f002 ffa9 	bl	80094fc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80065aa:	6938      	ldr	r0, [r7, #16]
 80065ac:	f002 ffda 	bl	8009564 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2101      	movs	r1, #1
 80065b6:	4618      	mov	r0, r3
 80065b8:	f003 f9b0 	bl	800991c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f005 ff7d 	bl	800c4bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f003 f892 	bl	80096f0 <USB_ReadInterrupts>
 80065cc:	4603      	mov	r3, r0
 80065ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065d6:	d102      	bne.n	80065de <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f89e 	bl	800771a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f003 f884 	bl	80096f0 <USB_ReadInterrupts>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d106      	bne.n	8006600 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f005 ff46 	bl	800c484 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2208      	movs	r2, #8
 80065fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f003 f873 	bl	80096f0 <USB_ReadInterrupts>
 800660a:	4603      	mov	r3, r0
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b10      	cmp	r3, #16
 8006612:	d101      	bne.n	8006618 <HAL_HCD_IRQHandler+0x158>
 8006614:	2301      	movs	r3, #1
 8006616:	e000      	b.n	800661a <HAL_HCD_IRQHandler+0x15a>
 8006618:	2300      	movs	r3, #0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d012      	beq.n	8006644 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	699a      	ldr	r2, [r3, #24]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0210 	bic.w	r2, r2, #16
 800662c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 ffa1 	bl	8007576 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0210 	orr.w	r2, r2, #16
 8006642:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4618      	mov	r0, r3
 800664a:	f003 f851 	bl	80096f0 <USB_ReadInterrupts>
 800664e:	4603      	mov	r3, r0
 8006650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006658:	d13a      	bne.n	80066d0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4618      	mov	r0, r3
 8006660:	f003 fc86 	bl	8009f70 <USB_HC_ReadInterrupt>
 8006664:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	e025      	b.n	80066b8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	fa22 f303 	lsr.w	r3, r2, r3
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d018      	beq.n	80066b2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006696:	d106      	bne.n	80066a6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f8ab 	bl	80067fa <HCD_HC_IN_IRQHandler>
 80066a4:	e005      	b.n	80066b2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fbf9 	bl	8006ea4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	3301      	adds	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d3d4      	bcc.n	800666c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066ca:	615a      	str	r2, [r3, #20]
 80066cc:	e000      	b.n	80066d0 <HAL_HCD_IRQHandler+0x210>
      return;
 80066ce:	bf00      	nop
    }
  }
}
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d101      	bne.n	80066ec <HAL_HCD_Start+0x16>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e013      	b.n	8006714 <HAL_HCD_Start+0x3e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2101      	movs	r1, #1
 80066fa:	4618      	mov	r0, r3
 80066fc:	f003 f972 	bl	80099e4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f002 fe8a 	bl	800941e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_HCD_Stop+0x16>
 800672e:	2302      	movs	r3, #2
 8006730:	e00d      	b.n	800674e <HAL_HCD_Stop+0x32>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f003 fd60 	bl	800a204 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f003 f914 	bl	8009990 <USB_ResetPort>
 8006768:	4603      	mov	r3, r0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800677e:	78fb      	ldrb	r3, [r7, #3]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	212c      	movs	r1, #44	; 0x2c
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	4413      	add	r3, r2
 800678a:	3360      	adds	r3, #96	; 0x60
 800678c:	781b      	ldrb	r3, [r3, #0]
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	460b      	mov	r3, r1
 80067a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	212c      	movs	r1, #44	; 0x2c
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	4413      	add	r3, r2
 80067b2:	3350      	adds	r3, #80	; 0x50
 80067b4:	681b      	ldr	r3, [r3, #0]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f003 f958 	bl	8009a84 <USB_GetCurrentFrame>
 80067d4:	4603      	mov	r3, r0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f003 f933 	bl	8009a56 <USB_GetHostSpeed>
 80067f0:	4603      	mov	r3, r0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b086      	sub	sp, #24
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	460b      	mov	r3, r1
 8006804:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4413      	add	r3, r2
 800681c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b04      	cmp	r3, #4
 8006828:	d11a      	bne.n	8006860 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4413      	add	r3, r2
 8006832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006836:	461a      	mov	r2, r3
 8006838:	2304      	movs	r3, #4
 800683a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	212c      	movs	r1, #44	; 0x2c
 8006842:	fb01 f303 	mul.w	r3, r1, r3
 8006846:	4413      	add	r3, r2
 8006848:	3361      	adds	r3, #97	; 0x61
 800684a:	2206      	movs	r2, #6
 800684c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	4611      	mov	r1, r2
 8006858:	4618      	mov	r0, r3
 800685a:	f003 fb9a 	bl	8009f92 <USB_HC_Halt>
 800685e:	e0af      	b.n	80069c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	4413      	add	r3, r2
 8006868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006876:	d11b      	bne.n	80068b0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4413      	add	r3, r2
 8006880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006884:	461a      	mov	r2, r3
 8006886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800688a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	212c      	movs	r1, #44	; 0x2c
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	4413      	add	r3, r2
 8006898:	3361      	adds	r3, #97	; 0x61
 800689a:	2207      	movs	r2, #7
 800689c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f003 fb72 	bl	8009f92 <USB_HC_Halt>
 80068ae:	e087      	b.n	80069c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d109      	bne.n	80068da <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d2:	461a      	mov	r2, r3
 80068d4:	2320      	movs	r3, #32
 80068d6:	6093      	str	r3, [r2, #8]
 80068d8:	e072      	b.n	80069c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d11a      	bne.n	8006926 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fc:	461a      	mov	r2, r3
 80068fe:	2308      	movs	r3, #8
 8006900:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	212c      	movs	r1, #44	; 0x2c
 8006908:	fb01 f303 	mul.w	r3, r1, r3
 800690c:	4413      	add	r3, r2
 800690e:	3361      	adds	r3, #97	; 0x61
 8006910:	2205      	movs	r2, #5
 8006912:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	4611      	mov	r1, r2
 800691e:	4618      	mov	r0, r3
 8006920:	f003 fb37 	bl	8009f92 <USB_HC_Halt>
 8006924:	e04c      	b.n	80069c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	4413      	add	r3, r2
 800692e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800693c:	d11b      	bne.n	8006976 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800694a:	461a      	mov	r2, r3
 800694c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006950:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	212c      	movs	r1, #44	; 0x2c
 8006958:	fb01 f303 	mul.w	r3, r1, r3
 800695c:	4413      	add	r3, r2
 800695e:	3361      	adds	r3, #97	; 0x61
 8006960:	2208      	movs	r2, #8
 8006962:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	4611      	mov	r1, r2
 800696e:	4618      	mov	r0, r3
 8006970:	f003 fb0f 	bl	8009f92 <USB_HC_Halt>
 8006974:	e024      	b.n	80069c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d119      	bne.n	80069c0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	4413      	add	r3, r2
 8006994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006998:	461a      	mov	r2, r3
 800699a:	2380      	movs	r3, #128	; 0x80
 800699c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	212c      	movs	r1, #44	; 0x2c
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	4413      	add	r3, r2
 80069aa:	3361      	adds	r3, #97	; 0x61
 80069ac:	2206      	movs	r2, #6
 80069ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f003 fae9 	bl	8009f92 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d6:	d112      	bne.n	80069fe <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	4611      	mov	r1, r2
 80069e2:	4618      	mov	r0, r3
 80069e4:	f003 fad5 	bl	8009f92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f4:	461a      	mov	r2, r3
 80069f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069fa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80069fc:	e24e      	b.n	8006e9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	f040 80df 	bne.w	8006bd4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d019      	beq.n	8006a52 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	212c      	movs	r1, #44	; 0x2c
 8006a24:	fb01 f303 	mul.w	r3, r1, r3
 8006a28:	4413      	add	r3, r2
 8006a2a:	3348      	adds	r3, #72	; 0x48
 8006a2c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	0159      	lsls	r1, r3, #5
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	440b      	add	r3, r1
 8006a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006a40:	1ad2      	subs	r2, r2, r3
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	202c      	movs	r0, #44	; 0x2c
 8006a48:	fb00 f303 	mul.w	r3, r0, r3
 8006a4c:	440b      	add	r3, r1
 8006a4e:	3350      	adds	r3, #80	; 0x50
 8006a50:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	212c      	movs	r1, #44	; 0x2c
 8006a58:	fb01 f303 	mul.w	r3, r1, r3
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3361      	adds	r3, #97	; 0x61
 8006a60:	2201      	movs	r2, #1
 8006a62:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	212c      	movs	r1, #44	; 0x2c
 8006a6a:	fb01 f303 	mul.w	r3, r1, r3
 8006a6e:	4413      	add	r3, r2
 8006a70:	335c      	adds	r3, #92	; 0x5c
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a82:	461a      	mov	r2, r3
 8006a84:	2301      	movs	r3, #1
 8006a86:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	212c      	movs	r1, #44	; 0x2c
 8006a8e:	fb01 f303 	mul.w	r3, r1, r3
 8006a92:	4413      	add	r3, r2
 8006a94:	333f      	adds	r3, #63	; 0x3f
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d009      	beq.n	8006ab0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	212c      	movs	r1, #44	; 0x2c
 8006aa2:	fb01 f303 	mul.w	r3, r1, r3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	333f      	adds	r3, #63	; 0x3f
 8006aaa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d111      	bne.n	8006ad4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f003 fa69 	bl	8009f92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006acc:	461a      	mov	r2, r3
 8006ace:	2310      	movs	r3, #16
 8006ad0:	6093      	str	r3, [r2, #8]
 8006ad2:	e03a      	b.n	8006b4a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	212c      	movs	r1, #44	; 0x2c
 8006ada:	fb01 f303 	mul.w	r3, r1, r3
 8006ade:	4413      	add	r3, r2
 8006ae0:	333f      	adds	r3, #63	; 0x3f
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d009      	beq.n	8006afc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	212c      	movs	r1, #44	; 0x2c
 8006aee:	fb01 f303 	mul.w	r3, r1, r3
 8006af2:	4413      	add	r3, r2
 8006af4:	333f      	adds	r3, #63	; 0x3f
 8006af6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d126      	bne.n	8006b4a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b1a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	212c      	movs	r1, #44	; 0x2c
 8006b22:	fb01 f303 	mul.w	r3, r1, r3
 8006b26:	4413      	add	r3, r2
 8006b28:	3360      	adds	r3, #96	; 0x60
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	b2d9      	uxtb	r1, r3
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	202c      	movs	r0, #44	; 0x2c
 8006b38:	fb00 f303 	mul.w	r3, r0, r3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	3360      	adds	r3, #96	; 0x60
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f005 fcc7 	bl	800c4d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d12b      	bne.n	8006baa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	212c      	movs	r1, #44	; 0x2c
 8006b58:	fb01 f303 	mul.w	r3, r1, r3
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3348      	adds	r3, #72	; 0x48
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	202c      	movs	r0, #44	; 0x2c
 8006b68:	fb00 f202 	mul.w	r2, r0, r2
 8006b6c:	440a      	add	r2, r1
 8006b6e:	3240      	adds	r2, #64	; 0x40
 8006b70:	8812      	ldrh	r2, [r2, #0]
 8006b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 818e 	beq.w	8006e9c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	212c      	movs	r1, #44	; 0x2c
 8006b86:	fb01 f303 	mul.w	r3, r1, r3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	3354      	adds	r3, #84	; 0x54
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f083 0301 	eor.w	r3, r3, #1
 8006b94:	b2d8      	uxtb	r0, r3
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	212c      	movs	r1, #44	; 0x2c
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3354      	adds	r3, #84	; 0x54
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	701a      	strb	r2, [r3, #0]
}
 8006ba8:	e178      	b.n	8006e9c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	212c      	movs	r1, #44	; 0x2c
 8006bb0:	fb01 f303 	mul.w	r3, r1, r3
 8006bb4:	4413      	add	r3, r2
 8006bb6:	3354      	adds	r3, #84	; 0x54
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	f083 0301 	eor.w	r3, r3, #1
 8006bbe:	b2d8      	uxtb	r0, r3
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	212c      	movs	r1, #44	; 0x2c
 8006bc6:	fb01 f303 	mul.w	r3, r1, r3
 8006bca:	4413      	add	r3, r2
 8006bcc:	3354      	adds	r3, #84	; 0x54
 8006bce:	4602      	mov	r2, r0
 8006bd0:	701a      	strb	r2, [r3, #0]
}
 8006bd2:	e163      	b.n	8006e9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	f040 80f6 	bne.w	8006dd8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	212c      	movs	r1, #44	; 0x2c
 8006bf2:	fb01 f303 	mul.w	r3, r1, r3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3361      	adds	r3, #97	; 0x61
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d109      	bne.n	8006c14 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	212c      	movs	r1, #44	; 0x2c
 8006c06:	fb01 f303 	mul.w	r3, r1, r3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3360      	adds	r3, #96	; 0x60
 8006c0e:	2201      	movs	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	e0c9      	b.n	8006da8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	212c      	movs	r1, #44	; 0x2c
 8006c1a:	fb01 f303 	mul.w	r3, r1, r3
 8006c1e:	4413      	add	r3, r2
 8006c20:	3361      	adds	r3, #97	; 0x61
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b05      	cmp	r3, #5
 8006c26:	d109      	bne.n	8006c3c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	212c      	movs	r1, #44	; 0x2c
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	4413      	add	r3, r2
 8006c34:	3360      	adds	r3, #96	; 0x60
 8006c36:	2205      	movs	r2, #5
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e0b5      	b.n	8006da8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	212c      	movs	r1, #44	; 0x2c
 8006c42:	fb01 f303 	mul.w	r3, r1, r3
 8006c46:	4413      	add	r3, r2
 8006c48:	3361      	adds	r3, #97	; 0x61
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b06      	cmp	r3, #6
 8006c4e:	d009      	beq.n	8006c64 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	212c      	movs	r1, #44	; 0x2c
 8006c56:	fb01 f303 	mul.w	r3, r1, r3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3361      	adds	r3, #97	; 0x61
 8006c5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d150      	bne.n	8006d06 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	212c      	movs	r1, #44	; 0x2c
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	4413      	add	r3, r2
 8006c70:	335c      	adds	r3, #92	; 0x5c
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	202c      	movs	r0, #44	; 0x2c
 8006c7c:	fb00 f303 	mul.w	r3, r0, r3
 8006c80:	440b      	add	r3, r1
 8006c82:	335c      	adds	r3, #92	; 0x5c
 8006c84:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	212c      	movs	r1, #44	; 0x2c
 8006c8c:	fb01 f303 	mul.w	r3, r1, r3
 8006c90:	4413      	add	r3, r2
 8006c92:	335c      	adds	r3, #92	; 0x5c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d912      	bls.n	8006cc0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	212c      	movs	r1, #44	; 0x2c
 8006ca0:	fb01 f303 	mul.w	r3, r1, r3
 8006ca4:	4413      	add	r3, r2
 8006ca6:	335c      	adds	r3, #92	; 0x5c
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	212c      	movs	r1, #44	; 0x2c
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3360      	adds	r3, #96	; 0x60
 8006cba:	2204      	movs	r2, #4
 8006cbc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006cbe:	e073      	b.n	8006da8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	212c      	movs	r1, #44	; 0x2c
 8006cc6:	fb01 f303 	mul.w	r3, r1, r3
 8006cca:	4413      	add	r3, r2
 8006ccc:	3360      	adds	r3, #96	; 0x60
 8006cce:	2202      	movs	r2, #2
 8006cd0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ce8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cf0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfe:	461a      	mov	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006d04:	e050      	b.n	8006da8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	212c      	movs	r1, #44	; 0x2c
 8006d0c:	fb01 f303 	mul.w	r3, r1, r3
 8006d10:	4413      	add	r3, r2
 8006d12:	3361      	adds	r3, #97	; 0x61
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d122      	bne.n	8006d60 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	212c      	movs	r1, #44	; 0x2c
 8006d20:	fb01 f303 	mul.w	r3, r1, r3
 8006d24:	4413      	add	r3, r2
 8006d26:	3360      	adds	r3, #96	; 0x60
 8006d28:	2202      	movs	r2, #2
 8006d2a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d42:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d4a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	e023      	b.n	8006da8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	212c      	movs	r1, #44	; 0x2c
 8006d66:	fb01 f303 	mul.w	r3, r1, r3
 8006d6a:	4413      	add	r3, r2
 8006d6c:	3361      	adds	r3, #97	; 0x61
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b07      	cmp	r3, #7
 8006d72:	d119      	bne.n	8006da8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	212c      	movs	r1, #44	; 0x2c
 8006d7a:	fb01 f303 	mul.w	r3, r1, r3
 8006d7e:	4413      	add	r3, r2
 8006d80:	335c      	adds	r3, #92	; 0x5c
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	202c      	movs	r0, #44	; 0x2c
 8006d8c:	fb00 f303 	mul.w	r3, r0, r3
 8006d90:	440b      	add	r3, r1
 8006d92:	335c      	adds	r3, #92	; 0x5c
 8006d94:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	212c      	movs	r1, #44	; 0x2c
 8006d9c:	fb01 f303 	mul.w	r3, r1, r3
 8006da0:	4413      	add	r3, r2
 8006da2:	3360      	adds	r3, #96	; 0x60
 8006da4:	2204      	movs	r2, #4
 8006da6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db4:	461a      	mov	r2, r3
 8006db6:	2302      	movs	r3, #2
 8006db8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	b2d9      	uxtb	r1, r3
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	202c      	movs	r0, #44	; 0x2c
 8006dc4:	fb00 f303 	mul.w	r3, r0, r3
 8006dc8:	4413      	add	r3, r2
 8006dca:	3360      	adds	r3, #96	; 0x60
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f005 fb81 	bl	800c4d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006dd6:	e061      	b.n	8006e9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b10      	cmp	r3, #16
 8006dec:	d156      	bne.n	8006e9c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	212c      	movs	r1, #44	; 0x2c
 8006df4:	fb01 f303 	mul.w	r3, r1, r3
 8006df8:	4413      	add	r3, r2
 8006dfa:	333f      	adds	r3, #63	; 0x3f
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d111      	bne.n	8006e26 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	212c      	movs	r1, #44	; 0x2c
 8006e08:	fb01 f303 	mul.w	r3, r1, r3
 8006e0c:	4413      	add	r3, r2
 8006e0e:	335c      	adds	r3, #92	; 0x5c
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f003 f8b7 	bl	8009f92 <USB_HC_Halt>
 8006e24:	e031      	b.n	8006e8a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	212c      	movs	r1, #44	; 0x2c
 8006e2c:	fb01 f303 	mul.w	r3, r1, r3
 8006e30:	4413      	add	r3, r2
 8006e32:	333f      	adds	r3, #63	; 0x3f
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d009      	beq.n	8006e4e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	212c      	movs	r1, #44	; 0x2c
 8006e40:	fb01 f303 	mul.w	r3, r1, r3
 8006e44:	4413      	add	r3, r2
 8006e46:	333f      	adds	r3, #63	; 0x3f
 8006e48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d11d      	bne.n	8006e8a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	212c      	movs	r1, #44	; 0x2c
 8006e54:	fb01 f303 	mul.w	r3, r1, r3
 8006e58:	4413      	add	r3, r2
 8006e5a:	335c      	adds	r3, #92	; 0x5c
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d110      	bne.n	8006e8a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	212c      	movs	r1, #44	; 0x2c
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	4413      	add	r3, r2
 8006e74:	3361      	adds	r3, #97	; 0x61
 8006e76:	2203      	movs	r2, #3
 8006e78:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	4611      	mov	r1, r2
 8006e84:	4618      	mov	r0, r3
 8006e86:	f003 f884 	bl	8009f92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e96:	461a      	mov	r2, r3
 8006e98:	2310      	movs	r3, #16
 8006e9a:	6093      	str	r3, [r2, #8]
}
 8006e9c:	bf00      	nop
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d11a      	bne.n	8006f0a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	2304      	movs	r3, #4
 8006ee4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	212c      	movs	r1, #44	; 0x2c
 8006eec:	fb01 f303 	mul.w	r3, r1, r3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	3361      	adds	r3, #97	; 0x61
 8006ef4:	2206      	movs	r2, #6
 8006ef6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	4611      	mov	r1, r2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f003 f845 	bl	8009f92 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8006f08:	e331      	b.n	800756e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d12e      	bne.n	8006f7e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	2320      	movs	r3, #32
 8006f30:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	212c      	movs	r1, #44	; 0x2c
 8006f38:	fb01 f303 	mul.w	r3, r1, r3
 8006f3c:	4413      	add	r3, r2
 8006f3e:	333d      	adds	r3, #61	; 0x3d
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	f040 8313 	bne.w	800756e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	212c      	movs	r1, #44	; 0x2c
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	4413      	add	r3, r2
 8006f54:	333d      	adds	r3, #61	; 0x3d
 8006f56:	2200      	movs	r2, #0
 8006f58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	212c      	movs	r1, #44	; 0x2c
 8006f60:	fb01 f303 	mul.w	r3, r1, r3
 8006f64:	4413      	add	r3, r2
 8006f66:	3360      	adds	r3, #96	; 0x60
 8006f68:	2202      	movs	r2, #2
 8006f6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	4611      	mov	r1, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f003 f80b 	bl	8009f92 <USB_HC_Halt>
}
 8006f7c:	e2f7      	b.n	800756e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f94:	d112      	bne.n	8006fbc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fa8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f002 ffec 	bl	8009f92 <USB_HC_Halt>
}
 8006fba:	e2d8      	b.n	800756e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d140      	bne.n	8007054 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	212c      	movs	r1, #44	; 0x2c
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	4413      	add	r3, r2
 8006fde:	335c      	adds	r3, #92	; 0x5c
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	d111      	bne.n	800701e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	212c      	movs	r1, #44	; 0x2c
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	4413      	add	r3, r2
 8007006:	333d      	adds	r3, #61	; 0x3d
 8007008:	2201      	movs	r2, #1
 800700a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	4413      	add	r3, r2
 8007014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007018:	461a      	mov	r2, r3
 800701a:	2340      	movs	r3, #64	; 0x40
 800701c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	4413      	add	r3, r2
 8007026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702a:	461a      	mov	r2, r3
 800702c:	2301      	movs	r3, #1
 800702e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	212c      	movs	r1, #44	; 0x2c
 8007036:	fb01 f303 	mul.w	r3, r1, r3
 800703a:	4413      	add	r3, r2
 800703c:	3361      	adds	r3, #97	; 0x61
 800703e:	2201      	movs	r2, #1
 8007040:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	4611      	mov	r1, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f002 ffa0 	bl	8009f92 <USB_HC_Halt>
}
 8007052:	e28c      	b.n	800756e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	4413      	add	r3, r2
 800705c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007066:	2b40      	cmp	r3, #64	; 0x40
 8007068:	d12c      	bne.n	80070c4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	212c      	movs	r1, #44	; 0x2c
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	4413      	add	r3, r2
 8007076:	3361      	adds	r3, #97	; 0x61
 8007078:	2204      	movs	r2, #4
 800707a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	212c      	movs	r1, #44	; 0x2c
 8007082:	fb01 f303 	mul.w	r3, r1, r3
 8007086:	4413      	add	r3, r2
 8007088:	333d      	adds	r3, #61	; 0x3d
 800708a:	2201      	movs	r2, #1
 800708c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	212c      	movs	r1, #44	; 0x2c
 8007094:	fb01 f303 	mul.w	r3, r1, r3
 8007098:	4413      	add	r3, r2
 800709a:	335c      	adds	r3, #92	; 0x5c
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	4611      	mov	r1, r2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f002 ff71 	bl	8009f92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070bc:	461a      	mov	r2, r3
 80070be:	2340      	movs	r3, #64	; 0x40
 80070c0:	6093      	str	r3, [r2, #8]
}
 80070c2:	e254      	b.n	800756e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b08      	cmp	r3, #8
 80070d8:	d11a      	bne.n	8007110 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e6:	461a      	mov	r2, r3
 80070e8:	2308      	movs	r3, #8
 80070ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	212c      	movs	r1, #44	; 0x2c
 80070f2:	fb01 f303 	mul.w	r3, r1, r3
 80070f6:	4413      	add	r3, r2
 80070f8:	3361      	adds	r3, #97	; 0x61
 80070fa:	2205      	movs	r2, #5
 80070fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	4611      	mov	r1, r2
 8007108:	4618      	mov	r0, r3
 800710a:	f002 ff42 	bl	8009f92 <USB_HC_Halt>
}
 800710e:	e22e      	b.n	800756e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b10      	cmp	r3, #16
 8007124:	d140      	bne.n	80071a8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	212c      	movs	r1, #44	; 0x2c
 800712c:	fb01 f303 	mul.w	r3, r1, r3
 8007130:	4413      	add	r3, r2
 8007132:	335c      	adds	r3, #92	; 0x5c
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	212c      	movs	r1, #44	; 0x2c
 800713e:	fb01 f303 	mul.w	r3, r1, r3
 8007142:	4413      	add	r3, r2
 8007144:	3361      	adds	r3, #97	; 0x61
 8007146:	2203      	movs	r2, #3
 8007148:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	212c      	movs	r1, #44	; 0x2c
 8007150:	fb01 f303 	mul.w	r3, r1, r3
 8007154:	4413      	add	r3, r2
 8007156:	333d      	adds	r3, #61	; 0x3d
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d112      	bne.n	8007184 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	212c      	movs	r1, #44	; 0x2c
 8007164:	fb01 f303 	mul.w	r3, r1, r3
 8007168:	4413      	add	r3, r2
 800716a:	333c      	adds	r3, #60	; 0x3c
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d108      	bne.n	8007184 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	212c      	movs	r1, #44	; 0x2c
 8007178:	fb01 f303 	mul.w	r3, r1, r3
 800717c:	4413      	add	r3, r2
 800717e:	333d      	adds	r3, #61	; 0x3d
 8007180:	2201      	movs	r2, #1
 8007182:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	4611      	mov	r1, r2
 800718e:	4618      	mov	r0, r3
 8007190:	f002 feff 	bl	8009f92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	4413      	add	r3, r2
 800719c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a0:	461a      	mov	r2, r3
 80071a2:	2310      	movs	r3, #16
 80071a4:	6093      	str	r3, [r2, #8]
}
 80071a6:	e1e2      	b.n	800756e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ba:	2b80      	cmp	r3, #128	; 0x80
 80071bc:	d164      	bne.n	8007288 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d111      	bne.n	80071ea <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	212c      	movs	r1, #44	; 0x2c
 80071cc:	fb01 f303 	mul.w	r3, r1, r3
 80071d0:	4413      	add	r3, r2
 80071d2:	3361      	adds	r3, #97	; 0x61
 80071d4:	2206      	movs	r2, #6
 80071d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	4611      	mov	r1, r2
 80071e2:	4618      	mov	r0, r3
 80071e4:	f002 fed5 	bl	8009f92 <USB_HC_Halt>
 80071e8:	e044      	b.n	8007274 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	212c      	movs	r1, #44	; 0x2c
 80071f0:	fb01 f303 	mul.w	r3, r1, r3
 80071f4:	4413      	add	r3, r2
 80071f6:	335c      	adds	r3, #92	; 0x5c
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	202c      	movs	r0, #44	; 0x2c
 8007202:	fb00 f303 	mul.w	r3, r0, r3
 8007206:	440b      	add	r3, r1
 8007208:	335c      	adds	r3, #92	; 0x5c
 800720a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	212c      	movs	r1, #44	; 0x2c
 8007212:	fb01 f303 	mul.w	r3, r1, r3
 8007216:	4413      	add	r3, r2
 8007218:	335c      	adds	r3, #92	; 0x5c
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d920      	bls.n	8007262 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	212c      	movs	r1, #44	; 0x2c
 8007226:	fb01 f303 	mul.w	r3, r1, r3
 800722a:	4413      	add	r3, r2
 800722c:	335c      	adds	r3, #92	; 0x5c
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	212c      	movs	r1, #44	; 0x2c
 8007238:	fb01 f303 	mul.w	r3, r1, r3
 800723c:	4413      	add	r3, r2
 800723e:	3360      	adds	r3, #96	; 0x60
 8007240:	2204      	movs	r2, #4
 8007242:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	b2d9      	uxtb	r1, r3
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	202c      	movs	r0, #44	; 0x2c
 800724e:	fb00 f303 	mul.w	r3, r0, r3
 8007252:	4413      	add	r3, r2
 8007254:	3360      	adds	r3, #96	; 0x60
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f005 f93c 	bl	800c4d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007260:	e008      	b.n	8007274 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	212c      	movs	r1, #44	; 0x2c
 8007268:	fb01 f303 	mul.w	r3, r1, r3
 800726c:	4413      	add	r3, r2
 800726e:	3360      	adds	r3, #96	; 0x60
 8007270:	2202      	movs	r2, #2
 8007272:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	4413      	add	r3, r2
 800727c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007280:	461a      	mov	r2, r3
 8007282:	2380      	movs	r3, #128	; 0x80
 8007284:	6093      	str	r3, [r2, #8]
}
 8007286:	e172      	b.n	800756e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	4413      	add	r3, r2
 8007290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800729a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800729e:	d11b      	bne.n	80072d8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	212c      	movs	r1, #44	; 0x2c
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	3361      	adds	r3, #97	; 0x61
 80072ae:	2208      	movs	r2, #8
 80072b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	b2d2      	uxtb	r2, r2
 80072ba:	4611      	mov	r1, r2
 80072bc:	4618      	mov	r0, r3
 80072be:	f002 fe68 	bl	8009f92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ce:	461a      	mov	r2, r3
 80072d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072d4:	6093      	str	r3, [r2, #8]
}
 80072d6:	e14a      	b.n	800756e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	f040 813f 	bne.w	800756e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	212c      	movs	r1, #44	; 0x2c
 80072f6:	fb01 f303 	mul.w	r3, r1, r3
 80072fa:	4413      	add	r3, r2
 80072fc:	3361      	adds	r3, #97	; 0x61
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d17d      	bne.n	8007400 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	212c      	movs	r1, #44	; 0x2c
 800730a:	fb01 f303 	mul.w	r3, r1, r3
 800730e:	4413      	add	r3, r2
 8007310:	3360      	adds	r3, #96	; 0x60
 8007312:	2201      	movs	r2, #1
 8007314:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	212c      	movs	r1, #44	; 0x2c
 800731c:	fb01 f303 	mul.w	r3, r1, r3
 8007320:	4413      	add	r3, r2
 8007322:	333f      	adds	r3, #63	; 0x3f
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d00a      	beq.n	8007340 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	212c      	movs	r1, #44	; 0x2c
 8007330:	fb01 f303 	mul.w	r3, r1, r3
 8007334:	4413      	add	r3, r2
 8007336:	333f      	adds	r3, #63	; 0x3f
 8007338:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800733a:	2b03      	cmp	r3, #3
 800733c:	f040 8100 	bne.w	8007540 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d113      	bne.n	8007370 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	212c      	movs	r1, #44	; 0x2c
 800734e:	fb01 f303 	mul.w	r3, r1, r3
 8007352:	4413      	add	r3, r2
 8007354:	3355      	adds	r3, #85	; 0x55
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	f083 0301 	eor.w	r3, r3, #1
 800735c:	b2d8      	uxtb	r0, r3
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	212c      	movs	r1, #44	; 0x2c
 8007364:	fb01 f303 	mul.w	r3, r1, r3
 8007368:	4413      	add	r3, r2
 800736a:	3355      	adds	r3, #85	; 0x55
 800736c:	4602      	mov	r2, r0
 800736e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	2b01      	cmp	r3, #1
 8007376:	f040 80e3 	bne.w	8007540 <HCD_HC_OUT_IRQHandler+0x69c>
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	212c      	movs	r1, #44	; 0x2c
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	4413      	add	r3, r2
 8007386:	334c      	adds	r3, #76	; 0x4c
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 80d8 	beq.w	8007540 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	212c      	movs	r1, #44	; 0x2c
 8007396:	fb01 f303 	mul.w	r3, r1, r3
 800739a:	4413      	add	r3, r2
 800739c:	334c      	adds	r3, #76	; 0x4c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	202c      	movs	r0, #44	; 0x2c
 80073a6:	fb00 f202 	mul.w	r2, r0, r2
 80073aa:	440a      	add	r2, r1
 80073ac:	3240      	adds	r2, #64	; 0x40
 80073ae:	8812      	ldrh	r2, [r2, #0]
 80073b0:	4413      	add	r3, r2
 80073b2:	3b01      	subs	r3, #1
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	202c      	movs	r0, #44	; 0x2c
 80073ba:	fb00 f202 	mul.w	r2, r0, r2
 80073be:	440a      	add	r2, r1
 80073c0:	3240      	adds	r2, #64	; 0x40
 80073c2:	8812      	ldrh	r2, [r2, #0]
 80073c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 80b5 	beq.w	8007540 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	212c      	movs	r1, #44	; 0x2c
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	4413      	add	r3, r2
 80073e2:	3355      	adds	r3, #85	; 0x55
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	f083 0301 	eor.w	r3, r3, #1
 80073ea:	b2d8      	uxtb	r0, r3
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	212c      	movs	r1, #44	; 0x2c
 80073f2:	fb01 f303 	mul.w	r3, r1, r3
 80073f6:	4413      	add	r3, r2
 80073f8:	3355      	adds	r3, #85	; 0x55
 80073fa:	4602      	mov	r2, r0
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	e09f      	b.n	8007540 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	212c      	movs	r1, #44	; 0x2c
 8007406:	fb01 f303 	mul.w	r3, r1, r3
 800740a:	4413      	add	r3, r2
 800740c:	3361      	adds	r3, #97	; 0x61
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b03      	cmp	r3, #3
 8007412:	d109      	bne.n	8007428 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	212c      	movs	r1, #44	; 0x2c
 800741a:	fb01 f303 	mul.w	r3, r1, r3
 800741e:	4413      	add	r3, r2
 8007420:	3360      	adds	r3, #96	; 0x60
 8007422:	2202      	movs	r2, #2
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	e08b      	b.n	8007540 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	212c      	movs	r1, #44	; 0x2c
 800742e:	fb01 f303 	mul.w	r3, r1, r3
 8007432:	4413      	add	r3, r2
 8007434:	3361      	adds	r3, #97	; 0x61
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b04      	cmp	r3, #4
 800743a:	d109      	bne.n	8007450 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	212c      	movs	r1, #44	; 0x2c
 8007442:	fb01 f303 	mul.w	r3, r1, r3
 8007446:	4413      	add	r3, r2
 8007448:	3360      	adds	r3, #96	; 0x60
 800744a:	2202      	movs	r2, #2
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	e077      	b.n	8007540 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	212c      	movs	r1, #44	; 0x2c
 8007456:	fb01 f303 	mul.w	r3, r1, r3
 800745a:	4413      	add	r3, r2
 800745c:	3361      	adds	r3, #97	; 0x61
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b05      	cmp	r3, #5
 8007462:	d109      	bne.n	8007478 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	212c      	movs	r1, #44	; 0x2c
 800746a:	fb01 f303 	mul.w	r3, r1, r3
 800746e:	4413      	add	r3, r2
 8007470:	3360      	adds	r3, #96	; 0x60
 8007472:	2205      	movs	r2, #5
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	e063      	b.n	8007540 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	212c      	movs	r1, #44	; 0x2c
 800747e:	fb01 f303 	mul.w	r3, r1, r3
 8007482:	4413      	add	r3, r2
 8007484:	3361      	adds	r3, #97	; 0x61
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b06      	cmp	r3, #6
 800748a:	d009      	beq.n	80074a0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	212c      	movs	r1, #44	; 0x2c
 8007492:	fb01 f303 	mul.w	r3, r1, r3
 8007496:	4413      	add	r3, r2
 8007498:	3361      	adds	r3, #97	; 0x61
 800749a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800749c:	2b08      	cmp	r3, #8
 800749e:	d14f      	bne.n	8007540 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	212c      	movs	r1, #44	; 0x2c
 80074a6:	fb01 f303 	mul.w	r3, r1, r3
 80074aa:	4413      	add	r3, r2
 80074ac:	335c      	adds	r3, #92	; 0x5c
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	202c      	movs	r0, #44	; 0x2c
 80074b8:	fb00 f303 	mul.w	r3, r0, r3
 80074bc:	440b      	add	r3, r1
 80074be:	335c      	adds	r3, #92	; 0x5c
 80074c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	212c      	movs	r1, #44	; 0x2c
 80074c8:	fb01 f303 	mul.w	r3, r1, r3
 80074cc:	4413      	add	r3, r2
 80074ce:	335c      	adds	r3, #92	; 0x5c
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d912      	bls.n	80074fc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	212c      	movs	r1, #44	; 0x2c
 80074dc:	fb01 f303 	mul.w	r3, r1, r3
 80074e0:	4413      	add	r3, r2
 80074e2:	335c      	adds	r3, #92	; 0x5c
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	212c      	movs	r1, #44	; 0x2c
 80074ee:	fb01 f303 	mul.w	r3, r1, r3
 80074f2:	4413      	add	r3, r2
 80074f4:	3360      	adds	r3, #96	; 0x60
 80074f6:	2204      	movs	r2, #4
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	e021      	b.n	8007540 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	212c      	movs	r1, #44	; 0x2c
 8007502:	fb01 f303 	mul.w	r3, r1, r3
 8007506:	4413      	add	r3, r2
 8007508:	3360      	adds	r3, #96	; 0x60
 800750a:	2202      	movs	r2, #2
 800750c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	4413      	add	r3, r2
 8007516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007524:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800752c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	4413      	add	r3, r2
 8007536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800753a:	461a      	mov	r2, r3
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	4413      	add	r3, r2
 8007548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800754c:	461a      	mov	r2, r3
 800754e:	2302      	movs	r3, #2
 8007550:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	b2d9      	uxtb	r1, r3
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	202c      	movs	r0, #44	; 0x2c
 800755c:	fb00 f303 	mul.w	r3, r0, r3
 8007560:	4413      	add	r3, r2
 8007562:	3360      	adds	r3, #96	; 0x60
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f004 ffb5 	bl	800c4d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800756e:	bf00      	nop
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b08a      	sub	sp, #40	; 0x28
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	f003 030f 	and.w	r3, r3, #15
 8007596:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	0c5b      	lsrs	r3, r3, #17
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	091b      	lsrs	r3, r3, #4
 80075a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d004      	beq.n	80075bc <HCD_RXQLVL_IRQHandler+0x46>
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b05      	cmp	r3, #5
 80075b6:	f000 80a9 	beq.w	800770c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80075ba:	e0aa      	b.n	8007712 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 80a6 	beq.w	8007710 <HCD_RXQLVL_IRQHandler+0x19a>
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	212c      	movs	r1, #44	; 0x2c
 80075ca:	fb01 f303 	mul.w	r3, r1, r3
 80075ce:	4413      	add	r3, r2
 80075d0:	3344      	adds	r3, #68	; 0x44
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 809b 	beq.w	8007710 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	212c      	movs	r1, #44	; 0x2c
 80075e0:	fb01 f303 	mul.w	r3, r1, r3
 80075e4:	4413      	add	r3, r2
 80075e6:	3350      	adds	r3, #80	; 0x50
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	441a      	add	r2, r3
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	202c      	movs	r0, #44	; 0x2c
 80075f4:	fb00 f303 	mul.w	r3, r0, r3
 80075f8:	440b      	add	r3, r1
 80075fa:	334c      	adds	r3, #76	; 0x4c
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d87a      	bhi.n	80076f8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6818      	ldr	r0, [r3, #0]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	212c      	movs	r1, #44	; 0x2c
 800760c:	fb01 f303 	mul.w	r3, r1, r3
 8007610:	4413      	add	r3, r2
 8007612:	3344      	adds	r3, #68	; 0x44
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	b292      	uxth	r2, r2
 800761a:	4619      	mov	r1, r3
 800761c:	f002 f810 	bl	8009640 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	212c      	movs	r1, #44	; 0x2c
 8007626:	fb01 f303 	mul.w	r3, r1, r3
 800762a:	4413      	add	r3, r2
 800762c:	3344      	adds	r3, #68	; 0x44
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	441a      	add	r2, r3
 8007634:	6879      	ldr	r1, [r7, #4]
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	202c      	movs	r0, #44	; 0x2c
 800763a:	fb00 f303 	mul.w	r3, r0, r3
 800763e:	440b      	add	r3, r1
 8007640:	3344      	adds	r3, #68	; 0x44
 8007642:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	212c      	movs	r1, #44	; 0x2c
 800764a:	fb01 f303 	mul.w	r3, r1, r3
 800764e:	4413      	add	r3, r2
 8007650:	3350      	adds	r3, #80	; 0x50
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	441a      	add	r2, r3
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	202c      	movs	r0, #44	; 0x2c
 800765e:	fb00 f303 	mul.w	r3, r0, r3
 8007662:	440b      	add	r3, r1
 8007664:	3350      	adds	r3, #80	; 0x50
 8007666:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	4413      	add	r3, r2
 8007670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	0cdb      	lsrs	r3, r3, #19
 8007678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800767c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	212c      	movs	r1, #44	; 0x2c
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	4413      	add	r3, r2
 800768a:	3340      	adds	r3, #64	; 0x40
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	4293      	cmp	r3, r2
 8007694:	d13c      	bne.n	8007710 <HCD_RXQLVL_IRQHandler+0x19a>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d039      	beq.n	8007710 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076b2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076ba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c8:	461a      	mov	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	212c      	movs	r1, #44	; 0x2c
 80076d4:	fb01 f303 	mul.w	r3, r1, r3
 80076d8:	4413      	add	r3, r2
 80076da:	3354      	adds	r3, #84	; 0x54
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	f083 0301 	eor.w	r3, r3, #1
 80076e2:	b2d8      	uxtb	r0, r3
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	212c      	movs	r1, #44	; 0x2c
 80076ea:	fb01 f303 	mul.w	r3, r1, r3
 80076ee:	4413      	add	r3, r2
 80076f0:	3354      	adds	r3, #84	; 0x54
 80076f2:	4602      	mov	r2, r0
 80076f4:	701a      	strb	r2, [r3, #0]
      break;
 80076f6:	e00b      	b.n	8007710 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	212c      	movs	r1, #44	; 0x2c
 80076fe:	fb01 f303 	mul.w	r3, r1, r3
 8007702:	4413      	add	r3, r2
 8007704:	3360      	adds	r3, #96	; 0x60
 8007706:	2204      	movs	r2, #4
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e001      	b.n	8007710 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800770c:	bf00      	nop
 800770e:	e000      	b.n	8007712 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007710:	bf00      	nop
  }
}
 8007712:	bf00      	nop
 8007714:	3728      	adds	r7, #40	; 0x28
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b086      	sub	sp, #24
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007746:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b02      	cmp	r3, #2
 8007750:	d10b      	bne.n	800776a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b01      	cmp	r3, #1
 800775a:	d102      	bne.n	8007762 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f004 fe9f 	bl	800c4a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f043 0302 	orr.w	r3, r3, #2
 8007768:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b08      	cmp	r3, #8
 8007772:	d132      	bne.n	80077da <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f043 0308 	orr.w	r3, r3, #8
 800777a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f003 0304 	and.w	r3, r3, #4
 8007782:	2b04      	cmp	r3, #4
 8007784:	d126      	bne.n	80077d4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	2b02      	cmp	r3, #2
 800778c:	d113      	bne.n	80077b6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007794:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007798:	d106      	bne.n	80077a8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2102      	movs	r1, #2
 80077a0:	4618      	mov	r0, r3
 80077a2:	f002 f8bb 	bl	800991c <USB_InitFSLSPClkSel>
 80077a6:	e011      	b.n	80077cc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2101      	movs	r1, #1
 80077ae:	4618      	mov	r0, r3
 80077b0:	f002 f8b4 	bl	800991c <USB_InitFSLSPClkSel>
 80077b4:	e00a      	b.n	80077cc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d106      	bne.n	80077cc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077c4:	461a      	mov	r2, r3
 80077c6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80077ca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f004 fe91 	bl	800c4f4 <HAL_HCD_PortEnabled_Callback>
 80077d2:	e002      	b.n	80077da <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f004 fe9b 	bl	800c510 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d103      	bne.n	80077ec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f043 0320 	orr.w	r3, r3, #32
 80077ea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077f2:	461a      	mov	r2, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	6013      	str	r3, [r2, #0]
}
 80077f8:	bf00      	nop
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e128      	b.n	8007a64 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d109      	bne.n	8007832 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a90      	ldr	r2, [pc, #576]	; (8007a6c <HAL_I2S_Init+0x26c>)
 800782a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7fd fee9 	bl	8005604 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2202      	movs	r2, #2
 8007836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69db      	ldr	r3, [r3, #28]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6812      	ldr	r2, [r2, #0]
 8007844:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007848:	f023 030f 	bic.w	r3, r3, #15
 800784c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2202      	movs	r2, #2
 8007854:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d060      	beq.n	8007920 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d102      	bne.n	800786c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007866:	2310      	movs	r3, #16
 8007868:	617b      	str	r3, [r7, #20]
 800786a:	e001      	b.n	8007870 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800786c:	2320      	movs	r3, #32
 800786e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	2b20      	cmp	r3, #32
 8007876:	d802      	bhi.n	800787e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800787e:	2001      	movs	r0, #1
 8007880:	f001 fa04 	bl	8008c8c <HAL_RCCEx_GetPeriphCLKFreq>
 8007884:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800788e:	d125      	bne.n	80078dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d010      	beq.n	80078ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	fbb2 f2f3 	udiv	r2, r2, r3
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	461a      	mov	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b4:	3305      	adds	r3, #5
 80078b6:	613b      	str	r3, [r7, #16]
 80078b8:	e01f      	b.n	80078fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	00db      	lsls	r3, r3, #3
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80078c4:	4613      	mov	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	461a      	mov	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d6:	3305      	adds	r3, #5
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	e00e      	b.n	80078fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	461a      	mov	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f6:	3305      	adds	r3, #5
 80078f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	4a5c      	ldr	r2, [pc, #368]	; (8007a70 <HAL_I2S_Init+0x270>)
 80078fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007902:	08db      	lsrs	r3, r3, #3
 8007904:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	085b      	lsrs	r3, r3, #1
 8007916:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	021b      	lsls	r3, r3, #8
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	e003      	b.n	8007928 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007920:	2302      	movs	r3, #2
 8007922:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007924:	2300      	movs	r3, #0
 8007926:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d902      	bls.n	8007934 <HAL_I2S_Init+0x134>
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	2bff      	cmp	r3, #255	; 0xff
 8007932:	d907      	bls.n	8007944 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007938:	f043 0210 	orr.w	r2, r3, #16
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e08f      	b.n	8007a64 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	ea42 0103 	orr.w	r1, r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	430a      	orrs	r2, r1
 8007956:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007962:	f023 030f 	bic.w	r3, r3, #15
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6851      	ldr	r1, [r2, #4]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6892      	ldr	r2, [r2, #8]
 800796e:	4311      	orrs	r1, r2
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	68d2      	ldr	r2, [r2, #12]
 8007974:	4311      	orrs	r1, r2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	6992      	ldr	r2, [r2, #24]
 800797a:	430a      	orrs	r2, r1
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007986:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d161      	bne.n	8007a54 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a38      	ldr	r2, [pc, #224]	; (8007a74 <HAL_I2S_Init+0x274>)
 8007994:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a37      	ldr	r2, [pc, #220]	; (8007a78 <HAL_I2S_Init+0x278>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d101      	bne.n	80079a4 <HAL_I2S_Init+0x1a4>
 80079a0:	4b36      	ldr	r3, [pc, #216]	; (8007a7c <HAL_I2S_Init+0x27c>)
 80079a2:	e001      	b.n	80079a8 <HAL_I2S_Init+0x1a8>
 80079a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6812      	ldr	r2, [r2, #0]
 80079ae:	4932      	ldr	r1, [pc, #200]	; (8007a78 <HAL_I2S_Init+0x278>)
 80079b0:	428a      	cmp	r2, r1
 80079b2:	d101      	bne.n	80079b8 <HAL_I2S_Init+0x1b8>
 80079b4:	4a31      	ldr	r2, [pc, #196]	; (8007a7c <HAL_I2S_Init+0x27c>)
 80079b6:	e001      	b.n	80079bc <HAL_I2S_Init+0x1bc>
 80079b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80079bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80079c0:	f023 030f 	bic.w	r3, r3, #15
 80079c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a2b      	ldr	r2, [pc, #172]	; (8007a78 <HAL_I2S_Init+0x278>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d101      	bne.n	80079d4 <HAL_I2S_Init+0x1d4>
 80079d0:	4b2a      	ldr	r3, [pc, #168]	; (8007a7c <HAL_I2S_Init+0x27c>)
 80079d2:	e001      	b.n	80079d8 <HAL_I2S_Init+0x1d8>
 80079d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079d8:	2202      	movs	r2, #2
 80079da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a25      	ldr	r2, [pc, #148]	; (8007a78 <HAL_I2S_Init+0x278>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d101      	bne.n	80079ea <HAL_I2S_Init+0x1ea>
 80079e6:	4b25      	ldr	r3, [pc, #148]	; (8007a7c <HAL_I2S_Init+0x27c>)
 80079e8:	e001      	b.n	80079ee <HAL_I2S_Init+0x1ee>
 80079ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079fa:	d003      	beq.n	8007a04 <HAL_I2S_Init+0x204>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d103      	bne.n	8007a0c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8007a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a08:	613b      	str	r3, [r7, #16]
 8007a0a:	e001      	b.n	8007a10 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007a24:	4313      	orrs	r3, r2
 8007a26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	897b      	ldrh	r3, [r7, #10]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a3c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a0d      	ldr	r2, [pc, #52]	; (8007a78 <HAL_I2S_Init+0x278>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d101      	bne.n	8007a4c <HAL_I2S_Init+0x24c>
 8007a48:	4b0c      	ldr	r3, [pc, #48]	; (8007a7c <HAL_I2S_Init+0x27c>)
 8007a4a:	e001      	b.n	8007a50 <HAL_I2S_Init+0x250>
 8007a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a50:	897a      	ldrh	r2, [r7, #10]
 8007a52:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3720      	adds	r7, #32
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	08007b77 	.word	0x08007b77
 8007a70:	cccccccd 	.word	0xcccccccd
 8007a74:	08007c8d 	.word	0x08007c8d
 8007a78:	40003800 	.word	0x40003800
 8007a7c:	40003400 	.word	0x40003400

08007a80 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	881a      	ldrh	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	1c9a      	adds	r2, r3, #2
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10e      	bne.n	8007b10 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b00:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff ffb8 	bl	8007a80 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	b292      	uxth	r2, r2
 8007b2c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	1c9a      	adds	r2, r3, #2
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10e      	bne.n	8007b6e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff ff93 	bl	8007a94 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007b6e:	bf00      	nop
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b086      	sub	sp, #24
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d13a      	bne.n	8007c08 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d109      	bne.n	8007bb0 <I2S_IRQHandler+0x3a>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba6:	2b40      	cmp	r3, #64	; 0x40
 8007ba8:	d102      	bne.n	8007bb0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff ffb4 	bl	8007b18 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb6:	2b40      	cmp	r3, #64	; 0x40
 8007bb8:	d126      	bne.n	8007c08 <I2S_IRQHandler+0x92>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b20      	cmp	r3, #32
 8007bc6:	d11f      	bne.n	8007c08 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007bd6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007bd8:	2300      	movs	r3, #0
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	613b      	str	r3, [r7, #16]
 8007bec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfa:	f043 0202 	orr.w	r2, r3, #2
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff ff50 	bl	8007aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d136      	bne.n	8007c82 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d109      	bne.n	8007c32 <I2S_IRQHandler+0xbc>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c28:	2b80      	cmp	r3, #128	; 0x80
 8007c2a:	d102      	bne.n	8007c32 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff ff45 	bl	8007abc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d122      	bne.n	8007c82 <I2S_IRQHandler+0x10c>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f003 0320 	and.w	r3, r3, #32
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d11b      	bne.n	8007c82 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c58:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c74:	f043 0204 	orr.w	r2, r3, #4
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff ff13 	bl	8007aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007c82:	bf00      	nop
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a92      	ldr	r2, [pc, #584]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d101      	bne.n	8007caa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007ca6:	4b92      	ldr	r3, [pc, #584]	; (8007ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007ca8:	e001      	b.n	8007cae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a8b      	ldr	r2, [pc, #556]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d101      	bne.n	8007cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007cc4:	4b8a      	ldr	r3, [pc, #552]	; (8007ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007cc6:	e001      	b.n	8007ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007cc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd8:	d004      	beq.n	8007ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f040 8099 	bne.w	8007e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d107      	bne.n	8007cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f925 	bl	8007f48 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d107      	bne.n	8007d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f9c8 	bl	80080a8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1e:	2b40      	cmp	r3, #64	; 0x40
 8007d20:	d13a      	bne.n	8007d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f003 0320 	and.w	r3, r3, #32
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d035      	beq.n	8007d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a6e      	ldr	r2, [pc, #440]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d101      	bne.n	8007d3a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007d36:	4b6e      	ldr	r3, [pc, #440]	; (8007ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007d38:	e001      	b.n	8007d3e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007d3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4969      	ldr	r1, [pc, #420]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007d46:	428b      	cmp	r3, r1
 8007d48:	d101      	bne.n	8007d4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007d4a:	4b69      	ldr	r3, [pc, #420]	; (8007ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007d4c:	e001      	b.n	8007d52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007d4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d56:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8a:	f043 0202 	orr.w	r2, r3, #2
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7ff fe88 	bl	8007aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	f003 0308 	and.w	r3, r3, #8
 8007d9e:	2b08      	cmp	r3, #8
 8007da0:	f040 80c3 	bne.w	8007f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 80bd 	beq.w	8007f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007dbe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a49      	ldr	r2, [pc, #292]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d101      	bne.n	8007dce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007dca:	4b49      	ldr	r3, [pc, #292]	; (8007ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007dcc:	e001      	b.n	8007dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007dce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4944      	ldr	r1, [pc, #272]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007dda:	428b      	cmp	r3, r1
 8007ddc:	d101      	bne.n	8007de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007dde:	4b44      	ldr	r3, [pc, #272]	; (8007ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007de0:	e001      	b.n	8007de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007de2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007de6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007dea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007dec:	2300      	movs	r3, #0
 8007dee:	60bb      	str	r3, [r7, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	60bb      	str	r3, [r7, #8]
 8007df8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e06:	f043 0204 	orr.w	r2, r3, #4
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7ff fe4a 	bl	8007aa8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007e14:	e089      	b.n	8007f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d107      	bne.n	8007e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f8be 	bl	8007fac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d107      	bne.n	8007e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f8fd 	bl	8008044 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e50:	2b40      	cmp	r3, #64	; 0x40
 8007e52:	d12f      	bne.n	8007eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f003 0320 	and.w	r3, r3, #32
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d02a      	beq.n	8007eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007e6c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a1e      	ldr	r2, [pc, #120]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d101      	bne.n	8007e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007e78:	4b1d      	ldr	r3, [pc, #116]	; (8007ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007e7a:	e001      	b.n	8007e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007e7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4919      	ldr	r1, [pc, #100]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007e88:	428b      	cmp	r3, r1
 8007e8a:	d101      	bne.n	8007e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007e8c:	4b18      	ldr	r3, [pc, #96]	; (8007ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007e8e:	e001      	b.n	8007e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea6:	f043 0202 	orr.w	r2, r3, #2
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fdfa 	bl	8007aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	f003 0308 	and.w	r3, r3, #8
 8007eba:	2b08      	cmp	r3, #8
 8007ebc:	d136      	bne.n	8007f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f003 0320 	and.w	r3, r3, #32
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d031      	beq.n	8007f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a07      	ldr	r2, [pc, #28]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d101      	bne.n	8007ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007ed2:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007ed4:	e001      	b.n	8007eda <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4902      	ldr	r1, [pc, #8]	; (8007eec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007ee2:	428b      	cmp	r3, r1
 8007ee4:	d106      	bne.n	8007ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007ee6:	4b02      	ldr	r3, [pc, #8]	; (8007ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007ee8:	e006      	b.n	8007ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007eea:	bf00      	nop
 8007eec:	40003800 	.word	0x40003800
 8007ef0:	40003400 	.word	0x40003400
 8007ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ef8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007efc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007f0c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1a:	f043 0204 	orr.w	r2, r3, #4
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff fdc0 	bl	8007aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007f28:	e000      	b.n	8007f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007f2a:	bf00      	nop
}
 8007f2c:	bf00      	nop
 8007f2e:	3720      	adds	r7, #32
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	1c99      	adds	r1, r3, #2
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6251      	str	r1, [r2, #36]	; 0x24
 8007f5a:	881a      	ldrh	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d113      	bne.n	8007fa2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007f88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d106      	bne.n	8007fa2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff ffc9 	bl	8007f34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	1c99      	adds	r1, r3, #2
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	6251      	str	r1, [r2, #36]	; 0x24
 8007fbe:	8819      	ldrh	r1, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1d      	ldr	r2, [pc, #116]	; (800803c <I2SEx_TxISR_I2SExt+0x90>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d101      	bne.n	8007fce <I2SEx_TxISR_I2SExt+0x22>
 8007fca:	4b1d      	ldr	r3, [pc, #116]	; (8008040 <I2SEx_TxISR_I2SExt+0x94>)
 8007fcc:	e001      	b.n	8007fd2 <I2SEx_TxISR_I2SExt+0x26>
 8007fce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007fd2:	460a      	mov	r2, r1
 8007fd4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d121      	bne.n	8008032 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a12      	ldr	r2, [pc, #72]	; (800803c <I2SEx_TxISR_I2SExt+0x90>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d101      	bne.n	8007ffc <I2SEx_TxISR_I2SExt+0x50>
 8007ff8:	4b11      	ldr	r3, [pc, #68]	; (8008040 <I2SEx_TxISR_I2SExt+0x94>)
 8007ffa:	e001      	b.n	8008000 <I2SEx_TxISR_I2SExt+0x54>
 8007ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	490d      	ldr	r1, [pc, #52]	; (800803c <I2SEx_TxISR_I2SExt+0x90>)
 8008008:	428b      	cmp	r3, r1
 800800a:	d101      	bne.n	8008010 <I2SEx_TxISR_I2SExt+0x64>
 800800c:	4b0c      	ldr	r3, [pc, #48]	; (8008040 <I2SEx_TxISR_I2SExt+0x94>)
 800800e:	e001      	b.n	8008014 <I2SEx_TxISR_I2SExt+0x68>
 8008010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008014:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008018:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800801e:	b29b      	uxth	r3, r3
 8008020:	2b00      	cmp	r3, #0
 8008022:	d106      	bne.n	8008032 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff ff81 	bl	8007f34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	40003800 	.word	0x40003800
 8008040:	40003400 	.word	0x40003400

08008044 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68d8      	ldr	r0, [r3, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	1c99      	adds	r1, r3, #2
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800805c:	b282      	uxth	r2, r0
 800805e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008064:	b29b      	uxth	r3, r3
 8008066:	3b01      	subs	r3, #1
 8008068:	b29a      	uxth	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008072:	b29b      	uxth	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d113      	bne.n	80080a0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008086:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800808c:	b29b      	uxth	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff ff4a 	bl	8007f34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a20      	ldr	r2, [pc, #128]	; (8008138 <I2SEx_RxISR_I2SExt+0x90>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d101      	bne.n	80080be <I2SEx_RxISR_I2SExt+0x16>
 80080ba:	4b20      	ldr	r3, [pc, #128]	; (800813c <I2SEx_RxISR_I2SExt+0x94>)
 80080bc:	e001      	b.n	80080c2 <I2SEx_RxISR_I2SExt+0x1a>
 80080be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80080c2:	68d8      	ldr	r0, [r3, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c8:	1c99      	adds	r1, r3, #2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80080ce:	b282      	uxth	r2, r0
 80080d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	3b01      	subs	r3, #1
 80080da:	b29a      	uxth	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d121      	bne.n	800812e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a12      	ldr	r2, [pc, #72]	; (8008138 <I2SEx_RxISR_I2SExt+0x90>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d101      	bne.n	80080f8 <I2SEx_RxISR_I2SExt+0x50>
 80080f4:	4b11      	ldr	r3, [pc, #68]	; (800813c <I2SEx_RxISR_I2SExt+0x94>)
 80080f6:	e001      	b.n	80080fc <I2SEx_RxISR_I2SExt+0x54>
 80080f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	490d      	ldr	r1, [pc, #52]	; (8008138 <I2SEx_RxISR_I2SExt+0x90>)
 8008104:	428b      	cmp	r3, r1
 8008106:	d101      	bne.n	800810c <I2SEx_RxISR_I2SExt+0x64>
 8008108:	4b0c      	ldr	r3, [pc, #48]	; (800813c <I2SEx_RxISR_I2SExt+0x94>)
 800810a:	e001      	b.n	8008110 <I2SEx_RxISR_I2SExt+0x68>
 800810c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008110:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008114:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800811a:	b29b      	uxth	r3, r3
 800811c:	2b00      	cmp	r3, #0
 800811e:	d106      	bne.n	800812e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff ff03 	bl	8007f34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	40003800 	.word	0x40003800
 800813c:	40003400 	.word	0x40003400

08008140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e267      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d075      	beq.n	800824a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800815e:	4b88      	ldr	r3, [pc, #544]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f003 030c 	and.w	r3, r3, #12
 8008166:	2b04      	cmp	r3, #4
 8008168:	d00c      	beq.n	8008184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800816a:	4b85      	ldr	r3, [pc, #532]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008172:	2b08      	cmp	r3, #8
 8008174:	d112      	bne.n	800819c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008176:	4b82      	ldr	r3, [pc, #520]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008182:	d10b      	bne.n	800819c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008184:	4b7e      	ldr	r3, [pc, #504]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d05b      	beq.n	8008248 <HAL_RCC_OscConfig+0x108>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d157      	bne.n	8008248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e242      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081a4:	d106      	bne.n	80081b4 <HAL_RCC_OscConfig+0x74>
 80081a6:	4b76      	ldr	r3, [pc, #472]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a75      	ldr	r2, [pc, #468]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80081ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	e01d      	b.n	80081f0 <HAL_RCC_OscConfig+0xb0>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081bc:	d10c      	bne.n	80081d8 <HAL_RCC_OscConfig+0x98>
 80081be:	4b70      	ldr	r3, [pc, #448]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a6f      	ldr	r2, [pc, #444]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80081c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	4b6d      	ldr	r3, [pc, #436]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a6c      	ldr	r2, [pc, #432]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80081d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	e00b      	b.n	80081f0 <HAL_RCC_OscConfig+0xb0>
 80081d8:	4b69      	ldr	r3, [pc, #420]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a68      	ldr	r2, [pc, #416]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80081de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	4b66      	ldr	r3, [pc, #408]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a65      	ldr	r2, [pc, #404]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80081ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d013      	beq.n	8008220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081f8:	f7fd fc2e 	bl	8005a58 <HAL_GetTick>
 80081fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008200:	f7fd fc2a 	bl	8005a58 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b64      	cmp	r3, #100	; 0x64
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e207      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008212:	4b5b      	ldr	r3, [pc, #364]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0f0      	beq.n	8008200 <HAL_RCC_OscConfig+0xc0>
 800821e:	e014      	b.n	800824a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008220:	f7fd fc1a 	bl	8005a58 <HAL_GetTick>
 8008224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008226:	e008      	b.n	800823a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008228:	f7fd fc16 	bl	8005a58 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b64      	cmp	r3, #100	; 0x64
 8008234:	d901      	bls.n	800823a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e1f3      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800823a:	4b51      	ldr	r3, [pc, #324]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1f0      	bne.n	8008228 <HAL_RCC_OscConfig+0xe8>
 8008246:	e000      	b.n	800824a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d063      	beq.n	800831e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008256:	4b4a      	ldr	r3, [pc, #296]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f003 030c 	and.w	r3, r3, #12
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008262:	4b47      	ldr	r3, [pc, #284]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800826a:	2b08      	cmp	r3, #8
 800826c:	d11c      	bne.n	80082a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800826e:	4b44      	ldr	r3, [pc, #272]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d116      	bne.n	80082a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800827a:	4b41      	ldr	r3, [pc, #260]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d005      	beq.n	8008292 <HAL_RCC_OscConfig+0x152>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d001      	beq.n	8008292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e1c7      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008292:	4b3b      	ldr	r3, [pc, #236]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	4937      	ldr	r1, [pc, #220]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082a6:	e03a      	b.n	800831e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d020      	beq.n	80082f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082b0:	4b34      	ldr	r3, [pc, #208]	; (8008384 <HAL_RCC_OscConfig+0x244>)
 80082b2:	2201      	movs	r2, #1
 80082b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b6:	f7fd fbcf 	bl	8005a58 <HAL_GetTick>
 80082ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082be:	f7fd fbcb 	bl	8005a58 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e1a8      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082d0:	4b2b      	ldr	r3, [pc, #172]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0f0      	beq.n	80082be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082dc:	4b28      	ldr	r3, [pc, #160]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	4925      	ldr	r1, [pc, #148]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	600b      	str	r3, [r1, #0]
 80082f0:	e015      	b.n	800831e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082f2:	4b24      	ldr	r3, [pc, #144]	; (8008384 <HAL_RCC_OscConfig+0x244>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f8:	f7fd fbae 	bl	8005a58 <HAL_GetTick>
 80082fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082fe:	e008      	b.n	8008312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008300:	f7fd fbaa 	bl	8005a58 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	2b02      	cmp	r3, #2
 800830c:	d901      	bls.n	8008312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e187      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008312:	4b1b      	ldr	r3, [pc, #108]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1f0      	bne.n	8008300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0308 	and.w	r3, r3, #8
 8008326:	2b00      	cmp	r3, #0
 8008328:	d036      	beq.n	8008398 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d016      	beq.n	8008360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008332:	4b15      	ldr	r3, [pc, #84]	; (8008388 <HAL_RCC_OscConfig+0x248>)
 8008334:	2201      	movs	r2, #1
 8008336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008338:	f7fd fb8e 	bl	8005a58 <HAL_GetTick>
 800833c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800833e:	e008      	b.n	8008352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008340:	f7fd fb8a 	bl	8005a58 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d901      	bls.n	8008352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e167      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008352:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <HAL_RCC_OscConfig+0x240>)
 8008354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0f0      	beq.n	8008340 <HAL_RCC_OscConfig+0x200>
 800835e:	e01b      	b.n	8008398 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008360:	4b09      	ldr	r3, [pc, #36]	; (8008388 <HAL_RCC_OscConfig+0x248>)
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008366:	f7fd fb77 	bl	8005a58 <HAL_GetTick>
 800836a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800836c:	e00e      	b.n	800838c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800836e:	f7fd fb73 	bl	8005a58 <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	2b02      	cmp	r3, #2
 800837a:	d907      	bls.n	800838c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e150      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
 8008380:	40023800 	.word	0x40023800
 8008384:	42470000 	.word	0x42470000
 8008388:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800838c:	4b88      	ldr	r3, [pc, #544]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 800838e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1ea      	bne.n	800836e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 8097 	beq.w	80084d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083a6:	2300      	movs	r3, #0
 80083a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083aa:	4b81      	ldr	r3, [pc, #516]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10f      	bne.n	80083d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083b6:	2300      	movs	r3, #0
 80083b8:	60bb      	str	r3, [r7, #8]
 80083ba:	4b7d      	ldr	r3, [pc, #500]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	4a7c      	ldr	r2, [pc, #496]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 80083c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083c4:	6413      	str	r3, [r2, #64]	; 0x40
 80083c6:	4b7a      	ldr	r3, [pc, #488]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 80083c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ce:	60bb      	str	r3, [r7, #8]
 80083d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083d2:	2301      	movs	r3, #1
 80083d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083d6:	4b77      	ldr	r3, [pc, #476]	; (80085b4 <HAL_RCC_OscConfig+0x474>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d118      	bne.n	8008414 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083e2:	4b74      	ldr	r3, [pc, #464]	; (80085b4 <HAL_RCC_OscConfig+0x474>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a73      	ldr	r2, [pc, #460]	; (80085b4 <HAL_RCC_OscConfig+0x474>)
 80083e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083ee:	f7fd fb33 	bl	8005a58 <HAL_GetTick>
 80083f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083f4:	e008      	b.n	8008408 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083f6:	f7fd fb2f 	bl	8005a58 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d901      	bls.n	8008408 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e10c      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008408:	4b6a      	ldr	r3, [pc, #424]	; (80085b4 <HAL_RCC_OscConfig+0x474>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0f0      	beq.n	80083f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d106      	bne.n	800842a <HAL_RCC_OscConfig+0x2ea>
 800841c:	4b64      	ldr	r3, [pc, #400]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 800841e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008420:	4a63      	ldr	r2, [pc, #396]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 8008422:	f043 0301 	orr.w	r3, r3, #1
 8008426:	6713      	str	r3, [r2, #112]	; 0x70
 8008428:	e01c      	b.n	8008464 <HAL_RCC_OscConfig+0x324>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	2b05      	cmp	r3, #5
 8008430:	d10c      	bne.n	800844c <HAL_RCC_OscConfig+0x30c>
 8008432:	4b5f      	ldr	r3, [pc, #380]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 8008434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008436:	4a5e      	ldr	r2, [pc, #376]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 8008438:	f043 0304 	orr.w	r3, r3, #4
 800843c:	6713      	str	r3, [r2, #112]	; 0x70
 800843e:	4b5c      	ldr	r3, [pc, #368]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 8008440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008442:	4a5b      	ldr	r2, [pc, #364]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 8008444:	f043 0301 	orr.w	r3, r3, #1
 8008448:	6713      	str	r3, [r2, #112]	; 0x70
 800844a:	e00b      	b.n	8008464 <HAL_RCC_OscConfig+0x324>
 800844c:	4b58      	ldr	r3, [pc, #352]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 800844e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008450:	4a57      	ldr	r2, [pc, #348]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 8008452:	f023 0301 	bic.w	r3, r3, #1
 8008456:	6713      	str	r3, [r2, #112]	; 0x70
 8008458:	4b55      	ldr	r3, [pc, #340]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 800845a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800845c:	4a54      	ldr	r2, [pc, #336]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 800845e:	f023 0304 	bic.w	r3, r3, #4
 8008462:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d015      	beq.n	8008498 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800846c:	f7fd faf4 	bl	8005a58 <HAL_GetTick>
 8008470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008472:	e00a      	b.n	800848a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008474:	f7fd faf0 	bl	8005a58 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008482:	4293      	cmp	r3, r2
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e0cb      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800848a:	4b49      	ldr	r3, [pc, #292]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 800848c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d0ee      	beq.n	8008474 <HAL_RCC_OscConfig+0x334>
 8008496:	e014      	b.n	80084c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008498:	f7fd fade 	bl	8005a58 <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800849e:	e00a      	b.n	80084b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084a0:	f7fd fada 	bl	8005a58 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d901      	bls.n	80084b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e0b5      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084b6:	4b3e      	ldr	r3, [pc, #248]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 80084b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1ee      	bne.n	80084a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d105      	bne.n	80084d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084c8:	4b39      	ldr	r3, [pc, #228]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 80084ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084cc:	4a38      	ldr	r2, [pc, #224]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 80084ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 80a1 	beq.w	8008620 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084de:	4b34      	ldr	r3, [pc, #208]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f003 030c 	and.w	r3, r3, #12
 80084e6:	2b08      	cmp	r3, #8
 80084e8:	d05c      	beq.n	80085a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d141      	bne.n	8008576 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084f2:	4b31      	ldr	r3, [pc, #196]	; (80085b8 <HAL_RCC_OscConfig+0x478>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084f8:	f7fd faae 	bl	8005a58 <HAL_GetTick>
 80084fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084fe:	e008      	b.n	8008512 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008500:	f7fd faaa 	bl	8005a58 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d901      	bls.n	8008512 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e087      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008512:	4b27      	ldr	r3, [pc, #156]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1f0      	bne.n	8008500 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	69da      	ldr	r2, [r3, #28]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852c:	019b      	lsls	r3, r3, #6
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008534:	085b      	lsrs	r3, r3, #1
 8008536:	3b01      	subs	r3, #1
 8008538:	041b      	lsls	r3, r3, #16
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	061b      	lsls	r3, r3, #24
 8008542:	491b      	ldr	r1, [pc, #108]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 8008544:	4313      	orrs	r3, r2
 8008546:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008548:	4b1b      	ldr	r3, [pc, #108]	; (80085b8 <HAL_RCC_OscConfig+0x478>)
 800854a:	2201      	movs	r2, #1
 800854c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800854e:	f7fd fa83 	bl	8005a58 <HAL_GetTick>
 8008552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008554:	e008      	b.n	8008568 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008556:	f7fd fa7f 	bl	8005a58 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e05c      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008568:	4b11      	ldr	r3, [pc, #68]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0f0      	beq.n	8008556 <HAL_RCC_OscConfig+0x416>
 8008574:	e054      	b.n	8008620 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008576:	4b10      	ldr	r3, [pc, #64]	; (80085b8 <HAL_RCC_OscConfig+0x478>)
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800857c:	f7fd fa6c 	bl	8005a58 <HAL_GetTick>
 8008580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008582:	e008      	b.n	8008596 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008584:	f7fd fa68 	bl	8005a58 <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	2b02      	cmp	r3, #2
 8008590:	d901      	bls.n	8008596 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e045      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008596:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <HAL_RCC_OscConfig+0x470>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1f0      	bne.n	8008584 <HAL_RCC_OscConfig+0x444>
 80085a2:	e03d      	b.n	8008620 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d107      	bne.n	80085bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e038      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
 80085b0:	40023800 	.word	0x40023800
 80085b4:	40007000 	.word	0x40007000
 80085b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085bc:	4b1b      	ldr	r3, [pc, #108]	; (800862c <HAL_RCC_OscConfig+0x4ec>)
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d028      	beq.n	800861c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d121      	bne.n	800861c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d11a      	bne.n	800861c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80085ec:	4013      	ands	r3, r2
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d111      	bne.n	800861c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008602:	085b      	lsrs	r3, r3, #1
 8008604:	3b01      	subs	r3, #1
 8008606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008608:	429a      	cmp	r2, r3
 800860a:	d107      	bne.n	800861c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008618:	429a      	cmp	r2, r3
 800861a:	d001      	beq.n	8008620 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e000      	b.n	8008622 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3718      	adds	r7, #24
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	40023800 	.word	0x40023800

08008630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e0cc      	b.n	80087de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008644:	4b68      	ldr	r3, [pc, #416]	; (80087e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0307 	and.w	r3, r3, #7
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d90c      	bls.n	800866c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008652:	4b65      	ldr	r3, [pc, #404]	; (80087e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	b2d2      	uxtb	r2, r2
 8008658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800865a:	4b63      	ldr	r3, [pc, #396]	; (80087e8 <HAL_RCC_ClockConfig+0x1b8>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	429a      	cmp	r2, r3
 8008666:	d001      	beq.n	800866c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e0b8      	b.n	80087de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0302 	and.w	r3, r3, #2
 8008674:	2b00      	cmp	r3, #0
 8008676:	d020      	beq.n	80086ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b00      	cmp	r3, #0
 8008682:	d005      	beq.n	8008690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008684:	4b59      	ldr	r3, [pc, #356]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	4a58      	ldr	r2, [pc, #352]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 800868a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800868e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0308 	and.w	r3, r3, #8
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800869c:	4b53      	ldr	r3, [pc, #332]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	4a52      	ldr	r2, [pc, #328]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 80086a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80086a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086a8:	4b50      	ldr	r3, [pc, #320]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	494d      	ldr	r1, [pc, #308]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d044      	beq.n	8008750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d107      	bne.n	80086de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ce:	4b47      	ldr	r3, [pc, #284]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d119      	bne.n	800870e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e07f      	b.n	80087de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d003      	beq.n	80086ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d107      	bne.n	80086fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086ee:	4b3f      	ldr	r3, [pc, #252]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d109      	bne.n	800870e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e06f      	b.n	80087de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086fe:	4b3b      	ldr	r3, [pc, #236]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0302 	and.w	r3, r3, #2
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e067      	b.n	80087de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800870e:	4b37      	ldr	r3, [pc, #220]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f023 0203 	bic.w	r2, r3, #3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	4934      	ldr	r1, [pc, #208]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 800871c:	4313      	orrs	r3, r2
 800871e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008720:	f7fd f99a 	bl	8005a58 <HAL_GetTick>
 8008724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008726:	e00a      	b.n	800873e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008728:	f7fd f996 	bl	8005a58 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	f241 3288 	movw	r2, #5000	; 0x1388
 8008736:	4293      	cmp	r3, r2
 8008738:	d901      	bls.n	800873e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e04f      	b.n	80087de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800873e:	4b2b      	ldr	r3, [pc, #172]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f003 020c 	and.w	r2, r3, #12
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	429a      	cmp	r2, r3
 800874e:	d1eb      	bne.n	8008728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008750:	4b25      	ldr	r3, [pc, #148]	; (80087e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0307 	and.w	r3, r3, #7
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d20c      	bcs.n	8008778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800875e:	4b22      	ldr	r3, [pc, #136]	; (80087e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	b2d2      	uxtb	r2, r2
 8008764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008766:	4b20      	ldr	r3, [pc, #128]	; (80087e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	429a      	cmp	r2, r3
 8008772:	d001      	beq.n	8008778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e032      	b.n	80087de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0304 	and.w	r3, r3, #4
 8008780:	2b00      	cmp	r3, #0
 8008782:	d008      	beq.n	8008796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008784:	4b19      	ldr	r3, [pc, #100]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	4916      	ldr	r1, [pc, #88]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 8008792:	4313      	orrs	r3, r2
 8008794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087a2:	4b12      	ldr	r3, [pc, #72]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	490e      	ldr	r1, [pc, #56]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80087b6:	f000 f821 	bl	80087fc <HAL_RCC_GetSysClockFreq>
 80087ba:	4602      	mov	r2, r0
 80087bc:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <HAL_RCC_ClockConfig+0x1bc>)
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	091b      	lsrs	r3, r3, #4
 80087c2:	f003 030f 	and.w	r3, r3, #15
 80087c6:	490a      	ldr	r1, [pc, #40]	; (80087f0 <HAL_RCC_ClockConfig+0x1c0>)
 80087c8:	5ccb      	ldrb	r3, [r1, r3]
 80087ca:	fa22 f303 	lsr.w	r3, r2, r3
 80087ce:	4a09      	ldr	r2, [pc, #36]	; (80087f4 <HAL_RCC_ClockConfig+0x1c4>)
 80087d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80087d2:	4b09      	ldr	r3, [pc, #36]	; (80087f8 <HAL_RCC_ClockConfig+0x1c8>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fc fff0 	bl	80057bc <HAL_InitTick>

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40023c00 	.word	0x40023c00
 80087ec:	40023800 	.word	0x40023800
 80087f0:	0800cd28 	.word	0x0800cd28
 80087f4:	20000010 	.word	0x20000010
 80087f8:	20000014 	.word	0x20000014

080087fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008800:	b094      	sub	sp, #80	; 0x50
 8008802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	647b      	str	r3, [r7, #68]	; 0x44
 8008808:	2300      	movs	r3, #0
 800880a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800880c:	2300      	movs	r3, #0
 800880e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008814:	4b79      	ldr	r3, [pc, #484]	; (80089fc <HAL_RCC_GetSysClockFreq+0x200>)
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f003 030c 	and.w	r3, r3, #12
 800881c:	2b08      	cmp	r3, #8
 800881e:	d00d      	beq.n	800883c <HAL_RCC_GetSysClockFreq+0x40>
 8008820:	2b08      	cmp	r3, #8
 8008822:	f200 80e1 	bhi.w	80089e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <HAL_RCC_GetSysClockFreq+0x34>
 800882a:	2b04      	cmp	r3, #4
 800882c:	d003      	beq.n	8008836 <HAL_RCC_GetSysClockFreq+0x3a>
 800882e:	e0db      	b.n	80089e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008830:	4b73      	ldr	r3, [pc, #460]	; (8008a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8008832:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008834:	e0db      	b.n	80089ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008836:	4b73      	ldr	r3, [pc, #460]	; (8008a04 <HAL_RCC_GetSysClockFreq+0x208>)
 8008838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800883a:	e0d8      	b.n	80089ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800883c:	4b6f      	ldr	r3, [pc, #444]	; (80089fc <HAL_RCC_GetSysClockFreq+0x200>)
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008844:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008846:	4b6d      	ldr	r3, [pc, #436]	; (80089fc <HAL_RCC_GetSysClockFreq+0x200>)
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d063      	beq.n	800891a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008852:	4b6a      	ldr	r3, [pc, #424]	; (80089fc <HAL_RCC_GetSysClockFreq+0x200>)
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	099b      	lsrs	r3, r3, #6
 8008858:	2200      	movs	r2, #0
 800885a:	63bb      	str	r3, [r7, #56]	; 0x38
 800885c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008864:	633b      	str	r3, [r7, #48]	; 0x30
 8008866:	2300      	movs	r3, #0
 8008868:	637b      	str	r3, [r7, #52]	; 0x34
 800886a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800886e:	4622      	mov	r2, r4
 8008870:	462b      	mov	r3, r5
 8008872:	f04f 0000 	mov.w	r0, #0
 8008876:	f04f 0100 	mov.w	r1, #0
 800887a:	0159      	lsls	r1, r3, #5
 800887c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008880:	0150      	lsls	r0, r2, #5
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4621      	mov	r1, r4
 8008888:	1a51      	subs	r1, r2, r1
 800888a:	6139      	str	r1, [r7, #16]
 800888c:	4629      	mov	r1, r5
 800888e:	eb63 0301 	sbc.w	r3, r3, r1
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	f04f 0200 	mov.w	r2, #0
 8008898:	f04f 0300 	mov.w	r3, #0
 800889c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088a0:	4659      	mov	r1, fp
 80088a2:	018b      	lsls	r3, r1, #6
 80088a4:	4651      	mov	r1, sl
 80088a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80088aa:	4651      	mov	r1, sl
 80088ac:	018a      	lsls	r2, r1, #6
 80088ae:	4651      	mov	r1, sl
 80088b0:	ebb2 0801 	subs.w	r8, r2, r1
 80088b4:	4659      	mov	r1, fp
 80088b6:	eb63 0901 	sbc.w	r9, r3, r1
 80088ba:	f04f 0200 	mov.w	r2, #0
 80088be:	f04f 0300 	mov.w	r3, #0
 80088c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088ce:	4690      	mov	r8, r2
 80088d0:	4699      	mov	r9, r3
 80088d2:	4623      	mov	r3, r4
 80088d4:	eb18 0303 	adds.w	r3, r8, r3
 80088d8:	60bb      	str	r3, [r7, #8]
 80088da:	462b      	mov	r3, r5
 80088dc:	eb49 0303 	adc.w	r3, r9, r3
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	f04f 0200 	mov.w	r2, #0
 80088e6:	f04f 0300 	mov.w	r3, #0
 80088ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80088ee:	4629      	mov	r1, r5
 80088f0:	024b      	lsls	r3, r1, #9
 80088f2:	4621      	mov	r1, r4
 80088f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80088f8:	4621      	mov	r1, r4
 80088fa:	024a      	lsls	r2, r1, #9
 80088fc:	4610      	mov	r0, r2
 80088fe:	4619      	mov	r1, r3
 8008900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008902:	2200      	movs	r2, #0
 8008904:	62bb      	str	r3, [r7, #40]	; 0x28
 8008906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800890c:	f7f7 fcb2 	bl	8000274 <__aeabi_uldivmod>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	4613      	mov	r3, r2
 8008916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008918:	e058      	b.n	80089cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800891a:	4b38      	ldr	r3, [pc, #224]	; (80089fc <HAL_RCC_GetSysClockFreq+0x200>)
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	099b      	lsrs	r3, r3, #6
 8008920:	2200      	movs	r2, #0
 8008922:	4618      	mov	r0, r3
 8008924:	4611      	mov	r1, r2
 8008926:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800892a:	623b      	str	r3, [r7, #32]
 800892c:	2300      	movs	r3, #0
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
 8008930:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008934:	4642      	mov	r2, r8
 8008936:	464b      	mov	r3, r9
 8008938:	f04f 0000 	mov.w	r0, #0
 800893c:	f04f 0100 	mov.w	r1, #0
 8008940:	0159      	lsls	r1, r3, #5
 8008942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008946:	0150      	lsls	r0, r2, #5
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4641      	mov	r1, r8
 800894e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008952:	4649      	mov	r1, r9
 8008954:	eb63 0b01 	sbc.w	fp, r3, r1
 8008958:	f04f 0200 	mov.w	r2, #0
 800895c:	f04f 0300 	mov.w	r3, #0
 8008960:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008964:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008968:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800896c:	ebb2 040a 	subs.w	r4, r2, sl
 8008970:	eb63 050b 	sbc.w	r5, r3, fp
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	f04f 0300 	mov.w	r3, #0
 800897c:	00eb      	lsls	r3, r5, #3
 800897e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008982:	00e2      	lsls	r2, r4, #3
 8008984:	4614      	mov	r4, r2
 8008986:	461d      	mov	r5, r3
 8008988:	4643      	mov	r3, r8
 800898a:	18e3      	adds	r3, r4, r3
 800898c:	603b      	str	r3, [r7, #0]
 800898e:	464b      	mov	r3, r9
 8008990:	eb45 0303 	adc.w	r3, r5, r3
 8008994:	607b      	str	r3, [r7, #4]
 8008996:	f04f 0200 	mov.w	r2, #0
 800899a:	f04f 0300 	mov.w	r3, #0
 800899e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80089a2:	4629      	mov	r1, r5
 80089a4:	028b      	lsls	r3, r1, #10
 80089a6:	4621      	mov	r1, r4
 80089a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80089ac:	4621      	mov	r1, r4
 80089ae:	028a      	lsls	r2, r1, #10
 80089b0:	4610      	mov	r0, r2
 80089b2:	4619      	mov	r1, r3
 80089b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b6:	2200      	movs	r2, #0
 80089b8:	61bb      	str	r3, [r7, #24]
 80089ba:	61fa      	str	r2, [r7, #28]
 80089bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089c0:	f7f7 fc58 	bl	8000274 <__aeabi_uldivmod>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4613      	mov	r3, r2
 80089ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80089cc:	4b0b      	ldr	r3, [pc, #44]	; (80089fc <HAL_RCC_GetSysClockFreq+0x200>)
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	0c1b      	lsrs	r3, r3, #16
 80089d2:	f003 0303 	and.w	r3, r3, #3
 80089d6:	3301      	adds	r3, #1
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80089dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80089e6:	e002      	b.n	80089ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80089e8:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <HAL_RCC_GetSysClockFreq+0x204>)
 80089ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80089ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3750      	adds	r7, #80	; 0x50
 80089f4:	46bd      	mov	sp, r7
 80089f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089fa:	bf00      	nop
 80089fc:	40023800 	.word	0x40023800
 8008a00:	00f42400 	.word	0x00f42400
 8008a04:	007a1200 	.word	0x007a1200

08008a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a0c:	4b03      	ldr	r3, [pc, #12]	; (8008a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	20000010 	.word	0x20000010

08008a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008a24:	f7ff fff0 	bl	8008a08 <HAL_RCC_GetHCLKFreq>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	0a9b      	lsrs	r3, r3, #10
 8008a30:	f003 0307 	and.w	r3, r3, #7
 8008a34:	4903      	ldr	r1, [pc, #12]	; (8008a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a36:	5ccb      	ldrb	r3, [r1, r3]
 8008a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	40023800 	.word	0x40023800
 8008a44:	0800cd38 	.word	0x0800cd38

08008a48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	220f      	movs	r2, #15
 8008a56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008a58:	4b12      	ldr	r3, [pc, #72]	; (8008aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 0203 	and.w	r2, r3, #3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008a64:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008a70:	4b0c      	ldr	r3, [pc, #48]	; (8008aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008a7c:	4b09      	ldr	r3, [pc, #36]	; (8008aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	08db      	lsrs	r3, r3, #3
 8008a82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008a8a:	4b07      	ldr	r3, [pc, #28]	; (8008aa8 <HAL_RCC_GetClockConfig+0x60>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0207 	and.w	r2, r3, #7
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	601a      	str	r2, [r3, #0]
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	40023800 	.word	0x40023800
 8008aa8:	40023c00 	.word	0x40023c00

08008aac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d105      	bne.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d038      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008ad4:	4b68      	ldr	r3, [pc, #416]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ada:	f7fc ffbd 	bl	8005a58 <HAL_GetTick>
 8008ade:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ae0:	e008      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008ae2:	f7fc ffb9 	bl	8005a58 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d901      	bls.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e0bd      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008af4:	4b61      	ldr	r3, [pc, #388]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1f0      	bne.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	019b      	lsls	r3, r3, #6
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	071b      	lsls	r3, r3, #28
 8008b12:	495a      	ldr	r1, [pc, #360]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008b1a:	4b57      	ldr	r3, [pc, #348]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008b20:	f7fc ff9a 	bl	8005a58 <HAL_GetTick>
 8008b24:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b26:	e008      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008b28:	f7fc ff96 	bl	8005a58 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e09a      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b3a:	4b50      	ldr	r3, [pc, #320]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0f0      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f000 8083 	beq.w	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008b54:	2300      	movs	r3, #0
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	4b48      	ldr	r3, [pc, #288]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5c:	4a47      	ldr	r2, [pc, #284]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b62:	6413      	str	r3, [r2, #64]	; 0x40
 8008b64:	4b45      	ldr	r3, [pc, #276]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008b70:	4b43      	ldr	r3, [pc, #268]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a42      	ldr	r2, [pc, #264]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b7a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b7c:	f7fc ff6c 	bl	8005a58 <HAL_GetTick>
 8008b80:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b82:	e008      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b84:	f7fc ff68 	bl	8005a58 <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d901      	bls.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e06c      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b96:	4b3a      	ldr	r3, [pc, #232]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0f0      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008ba2:	4b36      	ldr	r3, [pc, #216]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008baa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d02f      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d028      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bc0:	4b2e      	ldr	r3, [pc, #184]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bc8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008bca:	4b2e      	ldr	r3, [pc, #184]	; (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008bcc:	2201      	movs	r2, #1
 8008bce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008bd0:	4b2c      	ldr	r3, [pc, #176]	; (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008bd6:	4a29      	ldr	r2, [pc, #164]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008bdc:	4b27      	ldr	r3, [pc, #156]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d114      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008be8:	f7fc ff36 	bl	8005a58 <HAL_GetTick>
 8008bec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bee:	e00a      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bf0:	f7fc ff32 	bl	8005a58 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d901      	bls.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e034      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c06:	4b1d      	ldr	r3, [pc, #116]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d0ee      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c1e:	d10d      	bne.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008c20:	4b16      	ldr	r3, [pc, #88]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c34:	4911      	ldr	r1, [pc, #68]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c36:	4313      	orrs	r3, r2
 8008c38:	608b      	str	r3, [r1, #8]
 8008c3a:	e005      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008c3c:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	4a0e      	ldr	r2, [pc, #56]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008c46:	6093      	str	r3, [r2, #8]
 8008c48:	4b0c      	ldr	r3, [pc, #48]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c54:	4909      	ldr	r1, [pc, #36]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0308 	and.w	r3, r3, #8
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	7d1a      	ldrb	r2, [r3, #20]
 8008c6a:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008c6c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	42470068 	.word	0x42470068
 8008c7c:	40023800 	.word	0x40023800
 8008c80:	40007000 	.word	0x40007000
 8008c84:	42470e40 	.word	0x42470e40
 8008c88:	424711e0 	.word	0x424711e0

08008c8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d140      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008caa:	4b24      	ldr	r3, [pc, #144]	; (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d005      	beq.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d131      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008cc0:	4b1f      	ldr	r3, [pc, #124]	; (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008cc2:	617b      	str	r3, [r7, #20]
          break;
 8008cc4:	e031      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008cc6:	4b1d      	ldr	r3, [pc, #116]	; (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cd2:	d109      	bne.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008cd4:	4b19      	ldr	r3, [pc, #100]	; (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cde:	4a19      	ldr	r2, [pc, #100]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce4:	613b      	str	r3, [r7, #16]
 8008ce6:	e008      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008ce8:	4b14      	ldr	r3, [pc, #80]	; (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cf2:	4a15      	ldr	r2, [pc, #84]	; (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8008cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf8:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008cfa:	4b10      	ldr	r3, [pc, #64]	; (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d00:	099b      	lsrs	r3, r3, #6
 8008d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	fb02 f303 	mul.w	r3, r2, r3
 8008d0c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008d0e:	4b0b      	ldr	r3, [pc, #44]	; (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d14:	0f1b      	lsrs	r3, r3, #28
 8008d16:	f003 0307 	and.w	r3, r3, #7
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d20:	617b      	str	r3, [r7, #20]
          break;
 8008d22:	e002      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	617b      	str	r3, [r7, #20]
          break;
 8008d28:	bf00      	nop
        }
      }
      break;
 8008d2a:	bf00      	nop
    }
  }
  return frequency;
 8008d2c:	697b      	ldr	r3, [r7, #20]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	371c      	adds	r7, #28
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	40023800 	.word	0x40023800
 8008d40:	00bb8000 	.word	0x00bb8000
 8008d44:	007a1200 	.word	0x007a1200
 8008d48:	00f42400 	.word	0x00f42400

08008d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e07b      	b.n	8008e56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d108      	bne.n	8008d78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d6e:	d009      	beq.n	8008d84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	61da      	str	r2, [r3, #28]
 8008d76:	e005      	b.n	8008d84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d106      	bne.n	8008da4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7fc fcc4 	bl	800572c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	f003 0302 	and.w	r3, r3, #2
 8008de0:	431a      	orrs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	431a      	orrs	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008df4:	431a      	orrs	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e08:	ea42 0103 	orr.w	r1, r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	0c1b      	lsrs	r3, r3, #16
 8008e22:	f003 0104 	and.w	r1, r3, #4
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2a:	f003 0210 	and.w	r2, r3, #16
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	69da      	ldr	r2, [r3, #28]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e041      	b.n	8008ef4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d106      	bne.n	8008e8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f839 	bl	8008efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	3304      	adds	r3, #4
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	f000 f9c9 	bl	8009234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d001      	beq.n	8008f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e044      	b.n	8008fb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68da      	ldr	r2, [r3, #12]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0201 	orr.w	r2, r2, #1
 8008f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a1e      	ldr	r2, [pc, #120]	; (8008fc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d018      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0x6c>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f52:	d013      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0x6c>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a1a      	ldr	r2, [pc, #104]	; (8008fc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00e      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0x6c>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a19      	ldr	r2, [pc, #100]	; (8008fc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d009      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0x6c>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a17      	ldr	r2, [pc, #92]	; (8008fcc <HAL_TIM_Base_Start_IT+0xbc>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d004      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0x6c>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a16      	ldr	r2, [pc, #88]	; (8008fd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d111      	bne.n	8008fa0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b06      	cmp	r3, #6
 8008f8c:	d010      	beq.n	8008fb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f042 0201 	orr.w	r2, r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f9e:	e007      	b.n	8008fb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f042 0201 	orr.w	r2, r2, #1
 8008fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	40010000 	.word	0x40010000
 8008fc4:	40000400 	.word	0x40000400
 8008fc8:	40000800 	.word	0x40000800
 8008fcc:	40000c00 	.word	0x40000c00
 8008fd0:	40014000 	.word	0x40014000

08008fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d122      	bne.n	8009030 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d11b      	bne.n	8009030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f06f 0202 	mvn.w	r2, #2
 8009000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	f003 0303 	and.w	r3, r3, #3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f8ee 	bl	80091f8 <HAL_TIM_IC_CaptureCallback>
 800901c:	e005      	b.n	800902a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f8e0 	bl	80091e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f8f1 	bl	800920c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 0304 	and.w	r3, r3, #4
 800903a:	2b04      	cmp	r3, #4
 800903c:	d122      	bne.n	8009084 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f003 0304 	and.w	r3, r3, #4
 8009048:	2b04      	cmp	r3, #4
 800904a:	d11b      	bne.n	8009084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f06f 0204 	mvn.w	r2, #4
 8009054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2202      	movs	r2, #2
 800905a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f8c4 	bl	80091f8 <HAL_TIM_IC_CaptureCallback>
 8009070:	e005      	b.n	800907e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f8b6 	bl	80091e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f8c7 	bl	800920c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	f003 0308 	and.w	r3, r3, #8
 800908e:	2b08      	cmp	r3, #8
 8009090:	d122      	bne.n	80090d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f003 0308 	and.w	r3, r3, #8
 800909c:	2b08      	cmp	r3, #8
 800909e:	d11b      	bne.n	80090d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f06f 0208 	mvn.w	r2, #8
 80090a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2204      	movs	r2, #4
 80090ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f89a 	bl	80091f8 <HAL_TIM_IC_CaptureCallback>
 80090c4:	e005      	b.n	80090d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f88c 	bl	80091e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f89d 	bl	800920c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f003 0310 	and.w	r3, r3, #16
 80090e2:	2b10      	cmp	r3, #16
 80090e4:	d122      	bne.n	800912c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f003 0310 	and.w	r3, r3, #16
 80090f0:	2b10      	cmp	r3, #16
 80090f2:	d11b      	bne.n	800912c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f06f 0210 	mvn.w	r2, #16
 80090fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2208      	movs	r2, #8
 8009102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f870 	bl	80091f8 <HAL_TIM_IC_CaptureCallback>
 8009118:	e005      	b.n	8009126 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f862 	bl	80091e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f873 	bl	800920c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	2b01      	cmp	r3, #1
 8009138:	d10e      	bne.n	8009158 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b01      	cmp	r3, #1
 8009146:	d107      	bne.n	8009158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f06f 0201 	mvn.w	r2, #1
 8009150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7fc fa1a 	bl	800558c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009162:	2b80      	cmp	r3, #128	; 0x80
 8009164:	d10e      	bne.n	8009184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009170:	2b80      	cmp	r3, #128	; 0x80
 8009172:	d107      	bne.n	8009184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800917c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f8e2 	bl	8009348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918e:	2b40      	cmp	r3, #64	; 0x40
 8009190:	d10e      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919c:	2b40      	cmp	r3, #64	; 0x40
 800919e:	d107      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f838 	bl	8009220 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b20      	cmp	r3, #32
 80091bc:	d10e      	bne.n	80091dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f003 0320 	and.w	r3, r3, #32
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d107      	bne.n	80091dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0220 	mvn.w	r2, #32
 80091d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f8ac 	bl	8009334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a34      	ldr	r2, [pc, #208]	; (8009318 <TIM_Base_SetConfig+0xe4>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d00f      	beq.n	800926c <TIM_Base_SetConfig+0x38>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009252:	d00b      	beq.n	800926c <TIM_Base_SetConfig+0x38>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a31      	ldr	r2, [pc, #196]	; (800931c <TIM_Base_SetConfig+0xe8>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d007      	beq.n	800926c <TIM_Base_SetConfig+0x38>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a30      	ldr	r2, [pc, #192]	; (8009320 <TIM_Base_SetConfig+0xec>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d003      	beq.n	800926c <TIM_Base_SetConfig+0x38>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a2f      	ldr	r2, [pc, #188]	; (8009324 <TIM_Base_SetConfig+0xf0>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d108      	bne.n	800927e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	4313      	orrs	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a25      	ldr	r2, [pc, #148]	; (8009318 <TIM_Base_SetConfig+0xe4>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d01b      	beq.n	80092be <TIM_Base_SetConfig+0x8a>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800928c:	d017      	beq.n	80092be <TIM_Base_SetConfig+0x8a>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a22      	ldr	r2, [pc, #136]	; (800931c <TIM_Base_SetConfig+0xe8>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d013      	beq.n	80092be <TIM_Base_SetConfig+0x8a>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a21      	ldr	r2, [pc, #132]	; (8009320 <TIM_Base_SetConfig+0xec>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d00f      	beq.n	80092be <TIM_Base_SetConfig+0x8a>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a20      	ldr	r2, [pc, #128]	; (8009324 <TIM_Base_SetConfig+0xf0>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d00b      	beq.n	80092be <TIM_Base_SetConfig+0x8a>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a1f      	ldr	r2, [pc, #124]	; (8009328 <TIM_Base_SetConfig+0xf4>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d007      	beq.n	80092be <TIM_Base_SetConfig+0x8a>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a1e      	ldr	r2, [pc, #120]	; (800932c <TIM_Base_SetConfig+0xf8>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d003      	beq.n	80092be <TIM_Base_SetConfig+0x8a>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a1d      	ldr	r2, [pc, #116]	; (8009330 <TIM_Base_SetConfig+0xfc>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d108      	bne.n	80092d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	4313      	orrs	r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a08      	ldr	r2, [pc, #32]	; (8009318 <TIM_Base_SetConfig+0xe4>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d103      	bne.n	8009304 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	691a      	ldr	r2, [r3, #16]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	615a      	str	r2, [r3, #20]
}
 800930a:	bf00      	nop
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	40010000 	.word	0x40010000
 800931c:	40000400 	.word	0x40000400
 8009320:	40000800 	.word	0x40000800
 8009324:	40000c00 	.word	0x40000c00
 8009328:	40014000 	.word	0x40014000
 800932c:	40014400 	.word	0x40014400
 8009330:	40014800 	.word	0x40014800

08009334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800935c:	b084      	sub	sp, #16
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	f107 001c 	add.w	r0, r7, #28
 800936a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	2b01      	cmp	r3, #1
 8009372:	d122      	bne.n	80093ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009378:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800939c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d105      	bne.n	80093ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f9c0 	bl	8009734 <USB_CoreReset>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73fb      	strb	r3, [r7, #15]
 80093b8:	e01a      	b.n	80093f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f9b4 	bl	8009734 <USB_CoreReset>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80093d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d106      	bne.n	80093e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38
 80093e2:	e005      	b.n	80093f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d10b      	bne.n	800940e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f043 0206 	orr.w	r2, r3, #6
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f043 0220 	orr.w	r2, r3, #32
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800940e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800941a:	b004      	add	sp, #16
 800941c:	4770      	bx	lr

0800941e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800941e:	b480      	push	{r7}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f043 0201 	orr.w	r2, r3, #1
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f023 0201 	bic.w	r2, r3, #1
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	460b      	mov	r3, r1
 800946c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d115      	bne.n	80094b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009490:	2001      	movs	r0, #1
 8009492:	f7fc faed 	bl	8005a70 <HAL_Delay>
      ms++;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3301      	adds	r3, #1
 800949a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f93a 	bl	8009716 <USB_GetMode>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d01e      	beq.n	80094e6 <USB_SetCurrentMode+0x84>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b31      	cmp	r3, #49	; 0x31
 80094ac:	d9f0      	bls.n	8009490 <USB_SetCurrentMode+0x2e>
 80094ae:	e01a      	b.n	80094e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d115      	bne.n	80094e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80094c2:	2001      	movs	r0, #1
 80094c4:	f7fc fad4 	bl	8005a70 <HAL_Delay>
      ms++;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3301      	adds	r3, #1
 80094cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f921 	bl	8009716 <USB_GetMode>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d005      	beq.n	80094e6 <USB_SetCurrentMode+0x84>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2b31      	cmp	r3, #49	; 0x31
 80094de:	d9f0      	bls.n	80094c2 <USB_SetCurrentMode+0x60>
 80094e0:	e001      	b.n	80094e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e005      	b.n	80094f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2b32      	cmp	r3, #50	; 0x32
 80094ea:	d101      	bne.n	80094f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e000      	b.n	80094f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009506:	2300      	movs	r3, #0
 8009508:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3301      	adds	r3, #1
 800950e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4a13      	ldr	r2, [pc, #76]	; (8009560 <USB_FlushTxFifo+0x64>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d901      	bls.n	800951c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009518:	2303      	movs	r3, #3
 800951a:	e01b      	b.n	8009554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	daf2      	bge.n	800950a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	019b      	lsls	r3, r3, #6
 800952c:	f043 0220 	orr.w	r2, r3, #32
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3301      	adds	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4a08      	ldr	r2, [pc, #32]	; (8009560 <USB_FlushTxFifo+0x64>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d901      	bls.n	8009546 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e006      	b.n	8009554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	f003 0320 	and.w	r3, r3, #32
 800954e:	2b20      	cmp	r3, #32
 8009550:	d0f0      	beq.n	8009534 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	00030d40 	.word	0x00030d40

08009564 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	3301      	adds	r3, #1
 8009574:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4a11      	ldr	r2, [pc, #68]	; (80095c0 <USB_FlushRxFifo+0x5c>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d901      	bls.n	8009582 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e018      	b.n	80095b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	daf2      	bge.n	8009570 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800958a:	2300      	movs	r3, #0
 800958c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2210      	movs	r2, #16
 8009592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3301      	adds	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	4a08      	ldr	r2, [pc, #32]	; (80095c0 <USB_FlushRxFifo+0x5c>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d901      	bls.n	80095a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e006      	b.n	80095b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f003 0310 	and.w	r3, r3, #16
 80095ae:	2b10      	cmp	r3, #16
 80095b0:	d0f0      	beq.n	8009594 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	00030d40 	.word	0x00030d40

080095c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b089      	sub	sp, #36	; 0x24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	4611      	mov	r1, r2
 80095d0:	461a      	mov	r2, r3
 80095d2:	460b      	mov	r3, r1
 80095d4:	71fb      	strb	r3, [r7, #7]
 80095d6:	4613      	mov	r3, r2
 80095d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80095e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d123      	bne.n	8009632 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80095ea:	88bb      	ldrh	r3, [r7, #4]
 80095ec:	3303      	adds	r3, #3
 80095ee:	089b      	lsrs	r3, r3, #2
 80095f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80095f2:	2300      	movs	r3, #0
 80095f4:	61bb      	str	r3, [r7, #24]
 80095f6:	e018      	b.n	800962a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80095f8:	79fb      	ldrb	r3, [r7, #7]
 80095fa:	031a      	lsls	r2, r3, #12
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009604:	461a      	mov	r2, r3
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	3301      	adds	r3, #1
 8009610:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	3301      	adds	r3, #1
 8009616:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	3301      	adds	r3, #1
 800961c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	3301      	adds	r3, #1
 8009622:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	3301      	adds	r3, #1
 8009628:	61bb      	str	r3, [r7, #24]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	429a      	cmp	r2, r3
 8009630:	d3e2      	bcc.n	80095f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3724      	adds	r7, #36	; 0x24
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009640:	b480      	push	{r7}
 8009642:	b08b      	sub	sp, #44	; 0x2c
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	4613      	mov	r3, r2
 800964c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009656:	88fb      	ldrh	r3, [r7, #6]
 8009658:	089b      	lsrs	r3, r3, #2
 800965a:	b29b      	uxth	r3, r3
 800965c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800965e:	88fb      	ldrh	r3, [r7, #6]
 8009660:	f003 0303 	and.w	r3, r3, #3
 8009664:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009666:	2300      	movs	r3, #0
 8009668:	623b      	str	r3, [r7, #32]
 800966a:	e014      	b.n	8009696 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	601a      	str	r2, [r3, #0]
    pDest++;
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	3301      	adds	r3, #1
 800967c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	3301      	adds	r3, #1
 8009682:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	3301      	adds	r3, #1
 8009688:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	3301      	adds	r3, #1
 800968e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	3301      	adds	r3, #1
 8009694:	623b      	str	r3, [r7, #32]
 8009696:	6a3a      	ldr	r2, [r7, #32]
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	429a      	cmp	r2, r3
 800969c:	d3e6      	bcc.n	800966c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800969e:	8bfb      	ldrh	r3, [r7, #30]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d01e      	beq.n	80096e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80096a4:	2300      	movs	r3, #0
 80096a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ae:	461a      	mov	r2, r3
 80096b0:	f107 0310 	add.w	r3, r7, #16
 80096b4:	6812      	ldr	r2, [r2, #0]
 80096b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	fa22 f303 	lsr.w	r3, r2, r3
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	701a      	strb	r2, [r3, #0]
      i++;
 80096ca:	6a3b      	ldr	r3, [r7, #32]
 80096cc:	3301      	adds	r3, #1
 80096ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	3301      	adds	r3, #1
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80096d6:	8bfb      	ldrh	r3, [r7, #30]
 80096d8:	3b01      	subs	r3, #1
 80096da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80096dc:	8bfb      	ldrh	r3, [r7, #30]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1ea      	bne.n	80096b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	372c      	adds	r7, #44	; 0x2c
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	4013      	ands	r3, r2
 8009706:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009708:	68fb      	ldr	r3, [r7, #12]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	f003 0301 	and.w	r3, r3, #1
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
	...

08009734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800973c:	2300      	movs	r3, #0
 800973e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	3301      	adds	r3, #1
 8009744:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	4a13      	ldr	r2, [pc, #76]	; (8009798 <USB_CoreReset+0x64>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d901      	bls.n	8009752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	e01b      	b.n	800978a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	daf2      	bge.n	8009740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f043 0201 	orr.w	r2, r3, #1
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3301      	adds	r3, #1
 800976e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4a09      	ldr	r2, [pc, #36]	; (8009798 <USB_CoreReset+0x64>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d901      	bls.n	800977c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009778:	2303      	movs	r3, #3
 800977a:	e006      	b.n	800978a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b01      	cmp	r3, #1
 8009786:	d0f0      	beq.n	800976a <USB_CoreReset+0x36>

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	00030d40 	.word	0x00030d40

0800979c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800979c:	b084      	sub	sp, #16
 800979e:	b580      	push	{r7, lr}
 80097a0:	b086      	sub	sp, #24
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80097aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097bc:	461a      	mov	r2, r3
 80097be:	2300      	movs	r3, #0
 80097c0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097de:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d018      	beq.n	8009824 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80097f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d10a      	bne.n	800980e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009806:	f043 0304 	orr.w	r3, r3, #4
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	e014      	b.n	8009838 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800981c:	f023 0304 	bic.w	r3, r3, #4
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	e009      	b.n	8009838 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009832:	f023 0304 	bic.w	r3, r3, #4
 8009836:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009838:	2110      	movs	r1, #16
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7ff fe5e 	bl	80094fc <USB_FlushTxFifo>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff fe8a 	bl	8009564 <USB_FlushRxFifo>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800985a:	2300      	movs	r3, #0
 800985c:	613b      	str	r3, [r7, #16]
 800985e:	e015      	b.n	800988c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	4413      	add	r3, r2
 8009868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800986c:	461a      	mov	r2, r3
 800986e:	f04f 33ff 	mov.w	r3, #4294967295
 8009872:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4413      	add	r3, r2
 800987c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009880:	461a      	mov	r2, r3
 8009882:	2300      	movs	r3, #0
 8009884:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	3301      	adds	r3, #1
 800988a:	613b      	str	r3, [r7, #16]
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	429a      	cmp	r2, r3
 8009892:	d3e5      	bcc.n	8009860 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f04f 32ff 	mov.w	r2, #4294967295
 80098a0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098b4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a13      	ldr	r2, [pc, #76]	; (8009908 <USB_HostInit+0x16c>)
 80098ba:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a13      	ldr	r2, [pc, #76]	; (800990c <USB_HostInit+0x170>)
 80098c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80098c4:	e009      	b.n	80098da <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2280      	movs	r2, #128	; 0x80
 80098ca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a10      	ldr	r2, [pc, #64]	; (8009910 <USB_HostInit+0x174>)
 80098d0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a0f      	ldr	r2, [pc, #60]	; (8009914 <USB_HostInit+0x178>)
 80098d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d105      	bne.n	80098ec <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	f043 0210 	orr.w	r2, r3, #16
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	699a      	ldr	r2, [r3, #24]
 80098f0:	4b09      	ldr	r3, [pc, #36]	; (8009918 <USB_HostInit+0x17c>)
 80098f2:	4313      	orrs	r3, r2
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009904:	b004      	add	sp, #16
 8009906:	4770      	bx	lr
 8009908:	01000200 	.word	0x01000200
 800990c:	00e00300 	.word	0x00e00300
 8009910:	00600080 	.word	0x00600080
 8009914:	004000e0 	.word	0x004000e0
 8009918:	a3200008 	.word	0xa3200008

0800991c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800993a:	f023 0303 	bic.w	r3, r3, #3
 800993e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	f003 0303 	and.w	r3, r3, #3
 800994e:	68f9      	ldr	r1, [r7, #12]
 8009950:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009954:	4313      	orrs	r3, r2
 8009956:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009958:	78fb      	ldrb	r3, [r7, #3]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d107      	bne.n	800996e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009964:	461a      	mov	r2, r3
 8009966:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800996a:	6053      	str	r3, [r2, #4]
 800996c:	e009      	b.n	8009982 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800996e:	78fb      	ldrb	r3, [r7, #3]
 8009970:	2b02      	cmp	r3, #2
 8009972:	d106      	bne.n	8009982 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800997a:	461a      	mov	r2, r3
 800997c:	f241 7370 	movw	r3, #6000	; 0x1770
 8009980:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800999c:	2300      	movs	r3, #0
 800999e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80099b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80099ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099be:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80099c0:	2064      	movs	r0, #100	; 0x64
 80099c2:	f7fc f855 	bl	8005a70 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80099ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80099d4:	200a      	movs	r0, #10
 80099d6:	f7fc f84b 	bl	8005a70 <HAL_Delay>

  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80099f4:	2300      	movs	r3, #0
 80099f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009a08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d109      	bne.n	8009a28 <USB_DriveVbus+0x44>
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d106      	bne.n	8009a28 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009a22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009a26:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a32:	d109      	bne.n	8009a48 <USB_DriveVbus+0x64>
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d106      	bne.n	8009a48 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009a42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a46:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b085      	sub	sp, #20
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	0c5b      	lsrs	r3, r3, #17
 8009a74:	f003 0303 	and.w	r3, r3, #3
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	b29b      	uxth	r3, r3
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3714      	adds	r7, #20
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
	...

08009aa8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b088      	sub	sp, #32
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	70fb      	strb	r3, [r7, #3]
 8009aba:	460b      	mov	r3, r1
 8009abc:	70bb      	strb	r3, [r7, #2]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009aca:	78fb      	ldrb	r3, [r7, #3]
 8009acc:	015a      	lsls	r2, r3, #5
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8009adc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009ade:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009ae2:	2b03      	cmp	r3, #3
 8009ae4:	d87e      	bhi.n	8009be4 <USB_HC_Init+0x13c>
 8009ae6:	a201      	add	r2, pc, #4	; (adr r2, 8009aec <USB_HC_Init+0x44>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009afd 	.word	0x08009afd
 8009af0:	08009ba7 	.word	0x08009ba7
 8009af4:	08009afd 	.word	0x08009afd
 8009af8:	08009b69 	.word	0x08009b69
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009afc:	78fb      	ldrb	r3, [r7, #3]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b08:	461a      	mov	r2, r3
 8009b0a:	f240 439d 	movw	r3, #1181	; 0x49d
 8009b0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009b10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	da10      	bge.n	8009b3a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009b18:	78fb      	ldrb	r3, [r7, #3]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	78fa      	ldrb	r2, [r7, #3]
 8009b28:	0151      	lsls	r1, r2, #5
 8009b2a:	693a      	ldr	r2, [r7, #16]
 8009b2c:	440a      	add	r2, r1
 8009b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b36:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009b38:	e057      	b.n	8009bea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d051      	beq.n	8009bea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009b46:	78fb      	ldrb	r3, [r7, #3]
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	78fa      	ldrb	r2, [r7, #3]
 8009b56:	0151      	lsls	r1, r2, #5
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	440a      	add	r2, r1
 8009b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009b64:	60d3      	str	r3, [r2, #12]
      break;
 8009b66:	e040      	b.n	8009bea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b68:	78fb      	ldrb	r3, [r7, #3]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b74:	461a      	mov	r2, r3
 8009b76:	f240 639d 	movw	r3, #1693	; 0x69d
 8009b7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009b7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	da34      	bge.n	8009bee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009b84:	78fb      	ldrb	r3, [r7, #3]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	78fa      	ldrb	r2, [r7, #3]
 8009b94:	0151      	lsls	r1, r2, #5
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	440a      	add	r2, r1
 8009b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ba2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009ba4:	e023      	b.n	8009bee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	015a      	lsls	r2, r3, #5
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	4413      	add	r3, r2
 8009bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f240 2325 	movw	r3, #549	; 0x225
 8009bb8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009bba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	da17      	bge.n	8009bf2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009bc2:	78fb      	ldrb	r3, [r7, #3]
 8009bc4:	015a      	lsls	r2, r3, #5
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	78fa      	ldrb	r2, [r7, #3]
 8009bd2:	0151      	lsls	r1, r2, #5
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	440a      	add	r2, r1
 8009bd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bdc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009be0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009be2:	e006      	b.n	8009bf2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	77fb      	strb	r3, [r7, #31]
      break;
 8009be8:	e004      	b.n	8009bf4 <USB_HC_Init+0x14c>
      break;
 8009bea:	bf00      	nop
 8009bec:	e002      	b.n	8009bf4 <USB_HC_Init+0x14c>
      break;
 8009bee:	bf00      	nop
 8009bf0:	e000      	b.n	8009bf4 <USB_HC_Init+0x14c>
      break;
 8009bf2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	78fa      	ldrb	r2, [r7, #3]
 8009c04:	0151      	lsls	r1, r2, #5
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	440a      	add	r2, r1
 8009c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c0e:	f043 0302 	orr.w	r3, r3, #2
 8009c12:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c1a:	699a      	ldr	r2, [r3, #24]
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	f003 030f 	and.w	r3, r3, #15
 8009c22:	2101      	movs	r1, #1
 8009c24:	fa01 f303 	lsl.w	r3, r1, r3
 8009c28:	6939      	ldr	r1, [r7, #16]
 8009c2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009c3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	da03      	bge.n	8009c4e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c4a:	61bb      	str	r3, [r7, #24]
 8009c4c:	e001      	b.n	8009c52 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff feff 	bl	8009a56 <USB_GetHostSpeed>
 8009c58:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009c5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d106      	bne.n	8009c70 <USB_HC_Init+0x1c8>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d003      	beq.n	8009c70 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c6c:	617b      	str	r3, [r7, #20]
 8009c6e:	e001      	b.n	8009c74 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c74:	787b      	ldrb	r3, [r7, #1]
 8009c76:	059b      	lsls	r3, r3, #22
 8009c78:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009c7c:	78bb      	ldrb	r3, [r7, #2]
 8009c7e:	02db      	lsls	r3, r3, #11
 8009c80:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c84:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c8a:	049b      	lsls	r3, r3, #18
 8009c8c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009c90:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c92:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009c94:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c98:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c9e:	78fb      	ldrb	r3, [r7, #3]
 8009ca0:	0159      	lsls	r1, r3, #5
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	440b      	add	r3, r1
 8009ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009caa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009cb0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009cb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d003      	beq.n	8009cc2 <USB_HC_Init+0x21a>
 8009cba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d10f      	bne.n	8009ce2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009cc2:	78fb      	ldrb	r3, [r7, #3]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	78fa      	ldrb	r2, [r7, #3]
 8009cd2:	0151      	lsls	r1, r2, #5
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	440a      	add	r2, r1
 8009cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ce0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009ce2:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3720      	adds	r7, #32
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08c      	sub	sp, #48	; 0x30
 8009cf0:	af02      	add	r7, sp, #8
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	785b      	ldrb	r3, [r3, #1]
 8009d02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d08:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d02d      	beq.n	8009d72 <USB_HC_StartXfer+0x86>
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	791b      	ldrb	r3, [r3, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d129      	bne.n	8009d72 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d117      	bne.n	8009d54 <USB_HC_StartXfer+0x68>
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	79db      	ldrb	r3, [r3, #7]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <USB_HC_StartXfer+0x48>
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	79db      	ldrb	r3, [r3, #7]
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d10f      	bne.n	8009d54 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	015a      	lsls	r2, r3, #5
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	69fa      	ldr	r2, [r7, #28]
 8009d44:	0151      	lsls	r1, r2, #5
 8009d46:	6a3a      	ldr	r2, [r7, #32]
 8009d48:	440a      	add	r2, r1
 8009d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d52:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009d54:	79fb      	ldrb	r3, [r7, #7]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10b      	bne.n	8009d72 <USB_HC_StartXfer+0x86>
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	795b      	ldrb	r3, [r3, #5]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d107      	bne.n	8009d72 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	785b      	ldrb	r3, [r3, #1]
 8009d66:	4619      	mov	r1, r3
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 fa0f 	bl	800a18c <USB_DoPing>
      return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e0f8      	b.n	8009f64 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d018      	beq.n	8009dac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	8912      	ldrh	r2, [r2, #8]
 8009d82:	4413      	add	r3, r2
 8009d84:	3b01      	subs	r3, #1
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	8912      	ldrh	r2, [r2, #8]
 8009d8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d8e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009d90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009d92:	8b7b      	ldrh	r3, [r7, #26]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d90b      	bls.n	8009db0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009d98:	8b7b      	ldrh	r3, [r7, #26]
 8009d9a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009d9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	8912      	ldrh	r2, [r2, #8]
 8009da2:	fb03 f202 	mul.w	r2, r3, r2
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	611a      	str	r2, [r3, #16]
 8009daa:	e001      	b.n	8009db0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009dac:	2301      	movs	r3, #1
 8009dae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	78db      	ldrb	r3, [r3, #3]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d007      	beq.n	8009dc8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009db8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	8912      	ldrh	r2, [r2, #8]
 8009dbe:	fb03 f202 	mul.w	r2, r3, r2
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	611a      	str	r2, [r3, #16]
 8009dc6:	e003      	b.n	8009dd0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	695a      	ldr	r2, [r3, #20]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009dd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009dda:	04d9      	lsls	r1, r3, #19
 8009ddc:	4b63      	ldr	r3, [pc, #396]	; (8009f6c <USB_HC_StartXfer+0x280>)
 8009dde:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009de0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	7a9b      	ldrb	r3, [r3, #10]
 8009de6:	075b      	lsls	r3, r3, #29
 8009de8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009dec:	69f9      	ldr	r1, [r7, #28]
 8009dee:	0148      	lsls	r0, r1, #5
 8009df0:	6a39      	ldr	r1, [r7, #32]
 8009df2:	4401      	add	r1, r0
 8009df4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009df8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009dfa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009dfc:	79fb      	ldrb	r3, [r7, #7]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d009      	beq.n	8009e16 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	68d9      	ldr	r1, [r3, #12]
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e12:	460a      	mov	r2, r1
 8009e14:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bf0c      	ite	eq
 8009e26:	2301      	moveq	r3, #1
 8009e28:	2300      	movne	r3, #0
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	69fa      	ldr	r2, [r7, #28]
 8009e3e:	0151      	lsls	r1, r2, #5
 8009e40:	6a3a      	ldr	r2, [r7, #32]
 8009e42:	440a      	add	r2, r1
 8009e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e4c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	015a      	lsls	r2, r3, #5
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	4413      	add	r3, r2
 8009e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	7e7b      	ldrb	r3, [r7, #25]
 8009e5e:	075b      	lsls	r3, r3, #29
 8009e60:	69f9      	ldr	r1, [r7, #28]
 8009e62:	0148      	lsls	r0, r1, #5
 8009e64:	6a39      	ldr	r1, [r7, #32]
 8009e66:	4401      	add	r1, r0
 8009e68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e86:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	78db      	ldrb	r3, [r3, #3]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d004      	beq.n	8009e9a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e96:	613b      	str	r3, [r7, #16]
 8009e98:	e003      	b.n	8009ea2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ea0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ea8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009ebc:	79fb      	ldrb	r3, [r7, #7]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	e04e      	b.n	8009f64 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	78db      	ldrb	r3, [r3, #3]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d149      	bne.n	8009f62 <USB_HC_StartXfer+0x276>
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d045      	beq.n	8009f62 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	79db      	ldrb	r3, [r3, #7]
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d830      	bhi.n	8009f40 <USB_HC_StartXfer+0x254>
 8009ede:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <USB_HC_StartXfer+0x1f8>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009ef5 	.word	0x08009ef5
 8009ee8:	08009f19 	.word	0x08009f19
 8009eec:	08009ef5 	.word	0x08009ef5
 8009ef0:	08009f19 	.word	0x08009f19
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	3303      	adds	r3, #3
 8009efa:	089b      	lsrs	r3, r3, #2
 8009efc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009efe:	8afa      	ldrh	r2, [r7, #22]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d91c      	bls.n	8009f44 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	f043 0220 	orr.w	r2, r3, #32
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	619a      	str	r2, [r3, #24]
        }
        break;
 8009f16:	e015      	b.n	8009f44 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	695b      	ldr	r3, [r3, #20]
 8009f1c:	3303      	adds	r3, #3
 8009f1e:	089b      	lsrs	r3, r3, #2
 8009f20:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009f22:	8afa      	ldrh	r2, [r7, #22]
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d90a      	bls.n	8009f48 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009f3e:	e003      	b.n	8009f48 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009f40:	bf00      	nop
 8009f42:	e002      	b.n	8009f4a <USB_HC_StartXfer+0x25e>
        break;
 8009f44:	bf00      	nop
 8009f46:	e000      	b.n	8009f4a <USB_HC_StartXfer+0x25e>
        break;
 8009f48:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	68d9      	ldr	r1, [r3, #12]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	785a      	ldrb	r2, [r3, #1]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	2000      	movs	r0, #0
 8009f5a:	9000      	str	r0, [sp, #0]
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7ff fb31 	bl	80095c4 <USB_WritePacket>
  }

  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3728      	adds	r7, #40	; 0x28
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	1ff80000 	.word	0x1ff80000

08009f70 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f82:	695b      	ldr	r3, [r3, #20]
 8009f84:	b29b      	uxth	r3, r3
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b089      	sub	sp, #36	; 0x24
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009fa2:	78fb      	ldrb	r3, [r7, #3]
 8009fa4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	0c9b      	lsrs	r3, r3, #18
 8009fba:	f003 0303 	and.w	r3, r3, #3
 8009fbe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	0fdb      	lsrs	r3, r3, #31
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f003 0320 	and.w	r3, r3, #32
 8009fde:	2b20      	cmp	r3, #32
 8009fe0:	d104      	bne.n	8009fec <USB_HC_Halt+0x5a>
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d101      	bne.n	8009fec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	e0c8      	b.n	800a17e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d002      	beq.n	8009ff8 <USB_HC_Halt+0x66>
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d163      	bne.n	800a0c0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	0151      	lsls	r1, r2, #5
 800a00a:	69fa      	ldr	r2, [r7, #28]
 800a00c:	440a      	add	r2, r1
 800a00e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a016:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f003 0320 	and.w	r3, r3, #32
 800a020:	2b00      	cmp	r3, #0
 800a022:	f040 80ab 	bne.w	800a17c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d133      	bne.n	800a09a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	69ba      	ldr	r2, [r7, #24]
 800a042:	0151      	lsls	r1, r2, #5
 800a044:	69fa      	ldr	r2, [r7, #28]
 800a046:	440a      	add	r2, r1
 800a048:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a04c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a050:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	015a      	lsls	r2, r3, #5
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	4413      	add	r3, r2
 800a05a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	0151      	lsls	r1, r2, #5
 800a064:	69fa      	ldr	r2, [r7, #28]
 800a066:	440a      	add	r2, r1
 800a068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a06c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a070:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3301      	adds	r3, #1
 800a076:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a07e:	d81d      	bhi.n	800a0bc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	4413      	add	r3, r2
 800a088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a096:	d0ec      	beq.n	800a072 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a098:	e070      	b.n	800a17c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	69ba      	ldr	r2, [r7, #24]
 800a0aa:	0151      	lsls	r1, r2, #5
 800a0ac:	69fa      	ldr	r2, [r7, #28]
 800a0ae:	440a      	add	r2, r1
 800a0b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a0ba:	e05f      	b.n	800a17c <USB_HC_Halt+0x1ea>
            break;
 800a0bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a0be:	e05d      	b.n	800a17c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	69ba      	ldr	r2, [r7, #24]
 800a0d0:	0151      	lsls	r1, r2, #5
 800a0d2:	69fa      	ldr	r2, [r7, #28]
 800a0d4:	440a      	add	r2, r1
 800a0d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d133      	bne.n	800a158 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	0151      	lsls	r1, r2, #5
 800a102:	69fa      	ldr	r2, [r7, #28]
 800a104:	440a      	add	r2, r1
 800a106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a10a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a10e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	4413      	add	r3, r2
 800a118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69ba      	ldr	r2, [r7, #24]
 800a120:	0151      	lsls	r1, r2, #5
 800a122:	69fa      	ldr	r2, [r7, #28]
 800a124:	440a      	add	r2, r1
 800a126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a12a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a12e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	3301      	adds	r3, #1
 800a134:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a13c:	d81d      	bhi.n	800a17a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	4413      	add	r3, r2
 800a146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a150:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a154:	d0ec      	beq.n	800a130 <USB_HC_Halt+0x19e>
 800a156:	e011      	b.n	800a17c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	0151      	lsls	r1, r2, #5
 800a16a:	69fa      	ldr	r2, [r7, #28]
 800a16c:	440a      	add	r2, r1
 800a16e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	e000      	b.n	800a17c <USB_HC_Halt+0x1ea>
          break;
 800a17a:	bf00      	nop
    }
  }

  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3724      	adds	r7, #36	; 0x24
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
	...

0800a18c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	04da      	lsls	r2, r3, #19
 800a1a8:	4b15      	ldr	r3, [pc, #84]	; (800a200 <USB_DoPing+0x74>)
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	0151      	lsls	r1, r2, #5
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	440a      	add	r2, r1
 800a1b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a1d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	371c      	adds	r7, #28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	1ff80000 	.word	0x1ff80000

0800a204 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a214:	2300      	movs	r3, #0
 800a216:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff f911 	bl	8009440 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a21e:	2110      	movs	r1, #16
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7ff f96b 	bl	80094fc <USB_FlushTxFifo>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7ff f997 	bl	8009564 <USB_FlushRxFifo>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a240:	2300      	movs	r3, #0
 800a242:	61bb      	str	r3, [r7, #24]
 800a244:	e01f      	b.n	800a286 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a25c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a264:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a26c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	4413      	add	r3, r2
 800a276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a27a:	461a      	mov	r2, r3
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	3301      	adds	r3, #1
 800a284:	61bb      	str	r3, [r7, #24]
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	2b0f      	cmp	r3, #15
 800a28a:	d9dc      	bls.n	800a246 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a28c:	2300      	movs	r3, #0
 800a28e:	61bb      	str	r3, [r7, #24]
 800a290:	e034      	b.n	800a2fc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	015a      	lsls	r2, r3, #5
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	4413      	add	r3, r2
 800a29a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a2b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	015a      	lsls	r2, r3, #5
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2d8:	d80c      	bhi.n	800a2f4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2f0:	d0ec      	beq.n	800a2cc <USB_StopHost+0xc8>
 800a2f2:	e000      	b.n	800a2f6 <USB_StopHost+0xf2>
        break;
 800a2f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	61bb      	str	r3, [r7, #24]
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	2b0f      	cmp	r3, #15
 800a300:	d9c7      	bls.n	800a292 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a308:	461a      	mov	r2, r3
 800a30a:	f04f 33ff 	mov.w	r3, #4294967295
 800a30e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f04f 32ff 	mov.w	r2, #4294967295
 800a316:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f7ff f880 	bl	800941e <USB_EnableGlobalInt>

  return ret;
 800a31e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a328:	b590      	push	{r4, r7, lr}
 800a32a:	b089      	sub	sp, #36	; 0x24
 800a32c:	af04      	add	r7, sp, #16
 800a32e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a330:	2301      	movs	r3, #1
 800a332:	2202      	movs	r2, #2
 800a334:	2102      	movs	r1, #2
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fc66 	bl	800ac08 <USBH_FindInterface>
 800a33c:	4603      	mov	r3, r0
 800a33e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a340:	7bfb      	ldrb	r3, [r7, #15]
 800a342:	2bff      	cmp	r3, #255	; 0xff
 800a344:	d002      	beq.n	800a34c <USBH_CDC_InterfaceInit+0x24>
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d901      	bls.n	800a350 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a34c:	2302      	movs	r3, #2
 800a34e:	e13d      	b.n	800a5cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	4619      	mov	r1, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fc3b 	bl	800abd0 <USBH_SelectInterface>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a35e:	7bbb      	ldrb	r3, [r7, #14]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a364:	2302      	movs	r3, #2
 800a366:	e131      	b.n	800a5cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a36e:	2050      	movs	r0, #80	; 0x50
 800a370:	f002 fafa 	bl	800c968 <malloc>
 800a374:	4603      	mov	r3, r0
 800a376:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a37e:	69db      	ldr	r3, [r3, #28]
 800a380:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a388:	2302      	movs	r3, #2
 800a38a:	e11f      	b.n	800a5cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a38c:	2250      	movs	r2, #80	; 0x50
 800a38e:	2100      	movs	r1, #0
 800a390:	68b8      	ldr	r0, [r7, #8]
 800a392:	f002 fb17 	bl	800c9c4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a396:	7bfb      	ldrb	r3, [r7, #15]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	211a      	movs	r1, #26
 800a39c:	fb01 f303 	mul.w	r3, r1, r3
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	b25b      	sxtb	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	da15      	bge.n	800a3da <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	211a      	movs	r1, #26
 800a3b4:	fb01 f303 	mul.w	r3, r1, r3
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a3be:	781a      	ldrb	r2, [r3, #0]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	211a      	movs	r1, #26
 800a3ca:	fb01 f303 	mul.w	r3, r1, r3
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a3d4:	881a      	ldrh	r2, [r3, #0]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	785b      	ldrb	r3, [r3, #1]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f001 ff2c 	bl	800c23e <USBH_AllocPipe>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	7819      	ldrb	r1, [r3, #0]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	7858      	ldrb	r0, [r3, #1]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	8952      	ldrh	r2, [r2, #10]
 800a406:	9202      	str	r2, [sp, #8]
 800a408:	2203      	movs	r2, #3
 800a40a:	9201      	str	r2, [sp, #4]
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	4623      	mov	r3, r4
 800a410:	4602      	mov	r2, r0
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f001 fee4 	bl	800c1e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2200      	movs	r2, #0
 800a41e:	4619      	mov	r1, r3
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f002 f9f3 	bl	800c80c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a426:	2300      	movs	r3, #0
 800a428:	2200      	movs	r2, #0
 800a42a:	210a      	movs	r1, #10
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fbeb 	bl	800ac08 <USBH_FindInterface>
 800a432:	4603      	mov	r3, r0
 800a434:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	2bff      	cmp	r3, #255	; 0xff
 800a43a:	d002      	beq.n	800a442 <USBH_CDC_InterfaceInit+0x11a>
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d901      	bls.n	800a446 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a442:	2302      	movs	r3, #2
 800a444:	e0c2      	b.n	800a5cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a446:	7bfb      	ldrb	r3, [r7, #15]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	211a      	movs	r1, #26
 800a44c:	fb01 f303 	mul.w	r3, r1, r3
 800a450:	4413      	add	r3, r2
 800a452:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	b25b      	sxtb	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	da16      	bge.n	800a48c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	211a      	movs	r1, #26
 800a464:	fb01 f303 	mul.w	r3, r1, r3
 800a468:	4413      	add	r3, r2
 800a46a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a46e:	781a      	ldrb	r2, [r3, #0]
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	211a      	movs	r1, #26
 800a47a:	fb01 f303 	mul.w	r3, r1, r3
 800a47e:	4413      	add	r3, r2
 800a480:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a484:	881a      	ldrh	r2, [r3, #0]
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	835a      	strh	r2, [r3, #26]
 800a48a:	e015      	b.n	800a4b8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	211a      	movs	r1, #26
 800a492:	fb01 f303 	mul.w	r3, r1, r3
 800a496:	4413      	add	r3, r2
 800a498:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a49c:	781a      	ldrb	r2, [r3, #0]
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	211a      	movs	r1, #26
 800a4a8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a4b2:	881a      	ldrh	r2, [r3, #0]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	211a      	movs	r1, #26
 800a4be:	fb01 f303 	mul.w	r3, r1, r3
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	b25b      	sxtb	r3, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	da16      	bge.n	800a4fe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	211a      	movs	r1, #26
 800a4d6:	fb01 f303 	mul.w	r3, r1, r3
 800a4da:	4413      	add	r3, r2
 800a4dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a4e0:	781a      	ldrb	r2, [r3, #0]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	211a      	movs	r1, #26
 800a4ec:	fb01 f303 	mul.w	r3, r1, r3
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a4f6:	881a      	ldrh	r2, [r3, #0]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	835a      	strh	r2, [r3, #26]
 800a4fc:	e015      	b.n	800a52a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	211a      	movs	r1, #26
 800a504:	fb01 f303 	mul.w	r3, r1, r3
 800a508:	4413      	add	r3, r2
 800a50a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a50e:	781a      	ldrb	r2, [r3, #0]
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	211a      	movs	r1, #26
 800a51a:	fb01 f303 	mul.w	r3, r1, r3
 800a51e:	4413      	add	r3, r2
 800a520:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a524:	881a      	ldrh	r2, [r3, #0]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	7b9b      	ldrb	r3, [r3, #14]
 800a52e:	4619      	mov	r1, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f001 fe84 	bl	800c23e <USBH_AllocPipe>
 800a536:	4603      	mov	r3, r0
 800a538:	461a      	mov	r2, r3
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	7bdb      	ldrb	r3, [r3, #15]
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f001 fe7a 	bl	800c23e <USBH_AllocPipe>
 800a54a:	4603      	mov	r3, r0
 800a54c:	461a      	mov	r2, r3
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	7b59      	ldrb	r1, [r3, #13]
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	7b98      	ldrb	r0, [r3, #14]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	8b12      	ldrh	r2, [r2, #24]
 800a56a:	9202      	str	r2, [sp, #8]
 800a56c:	2202      	movs	r2, #2
 800a56e:	9201      	str	r2, [sp, #4]
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	4623      	mov	r3, r4
 800a574:	4602      	mov	r2, r0
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f001 fe32 	bl	800c1e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	7b19      	ldrb	r1, [r3, #12]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	7bd8      	ldrb	r0, [r3, #15]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	8b52      	ldrh	r2, [r2, #26]
 800a594:	9202      	str	r2, [sp, #8]
 800a596:	2202      	movs	r2, #2
 800a598:	9201      	str	r2, [sp, #4]
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	4623      	mov	r3, r4
 800a59e:	4602      	mov	r2, r0
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 fe1d 	bl	800c1e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	7b5b      	ldrb	r3, [r3, #13]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f002 f928 	bl	800c80c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	7b1b      	ldrb	r3, [r3, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f002 f921 	bl	800c80c <USBH_LL_SetToggle>

  return USBH_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3714      	adds	r7, #20
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd90      	pop	{r4, r7, pc}

0800a5d4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5e2:	69db      	ldr	r3, [r3, #28]
 800a5e4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00e      	beq.n	800a60c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f001 fe12 	bl	800c21e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	4619      	mov	r1, r3
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f001 fe3d 	bl	800c280 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	7b1b      	ldrb	r3, [r3, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00e      	beq.n	800a632 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	7b1b      	ldrb	r3, [r3, #12]
 800a618:	4619      	mov	r1, r3
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f001 fdff 	bl	800c21e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	7b1b      	ldrb	r3, [r3, #12]
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f001 fe2a 	bl	800c280 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	7b5b      	ldrb	r3, [r3, #13]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00e      	beq.n	800a658 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	7b5b      	ldrb	r3, [r3, #13]
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f001 fdec 	bl	800c21e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	7b5b      	ldrb	r3, [r3, #13]
 800a64a:	4619      	mov	r1, r3
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f001 fe17 	bl	800c280 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2200      	movs	r2, #0
 800a656:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a65e:	69db      	ldr	r3, [r3, #28]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00b      	beq.n	800a67c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f002 f983 	bl	800c978 <free>
    phost->pActiveClass->pData = 0U;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a678:	2200      	movs	r2, #0
 800a67a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3340      	adds	r3, #64	; 0x40
 800a69c:	4619      	mov	r1, r3
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f8b1 	bl	800a806 <GetLineCoding>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a6a8:	7afb      	ldrb	r3, [r7, #11]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d105      	bne.n	800a6ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6b4:	2102      	movs	r1, #2
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a6ba:	7afb      	ldrb	r3, [r7, #11]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6da:	69db      	ldr	r3, [r3, #28]
 800a6dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a6e4:	2b04      	cmp	r3, #4
 800a6e6:	d877      	bhi.n	800a7d8 <USBH_CDC_Process+0x114>
 800a6e8:	a201      	add	r2, pc, #4	; (adr r2, 800a6f0 <USBH_CDC_Process+0x2c>)
 800a6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ee:	bf00      	nop
 800a6f0:	0800a705 	.word	0x0800a705
 800a6f4:	0800a70b 	.word	0x0800a70b
 800a6f8:	0800a73b 	.word	0x0800a73b
 800a6fc:	0800a7af 	.word	0x0800a7af
 800a700:	0800a7bd 	.word	0x0800a7bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	73fb      	strb	r3, [r7, #15]
      break;
 800a708:	e06d      	b.n	800a7e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 f897 	bl	800a844 <SetLineCoding>
 800a716:	4603      	mov	r3, r0
 800a718:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a71a:	7bbb      	ldrb	r3, [r7, #14]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d104      	bne.n	800a72a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2202      	movs	r2, #2
 800a724:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a728:	e058      	b.n	800a7dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a72a:	7bbb      	ldrb	r3, [r7, #14]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d055      	beq.n	800a7dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2204      	movs	r2, #4
 800a734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a738:	e050      	b.n	800a7dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	3340      	adds	r3, #64	; 0x40
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f860 	bl	800a806 <GetLineCoding>
 800a746:	4603      	mov	r3, r0
 800a748:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d126      	bne.n	800a79e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a762:	791b      	ldrb	r3, [r3, #4]
 800a764:	429a      	cmp	r2, r3
 800a766:	d13b      	bne.n	800a7e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a772:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a774:	429a      	cmp	r2, r3
 800a776:	d133      	bne.n	800a7e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a782:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a784:	429a      	cmp	r2, r3
 800a786:	d12b      	bne.n	800a7e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a790:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a792:	429a      	cmp	r2, r3
 800a794:	d124      	bne.n	800a7e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f958 	bl	800aa4c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a79c:	e020      	b.n	800a7e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d01d      	beq.n	800a7e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	2204      	movs	r2, #4
 800a7a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a7ac:	e018      	b.n	800a7e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f867 	bl	800a882 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f8da 	bl	800a96e <CDC_ProcessReception>
      break;
 800a7ba:	e014      	b.n	800a7e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a7bc:	2100      	movs	r1, #0
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 ffef 	bl	800b7a2 <USBH_ClrFeature>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10a      	bne.n	800a7e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a7d6:	e005      	b.n	800a7e4 <USBH_CDC_Process+0x120>

    default:
      break;
 800a7d8:	bf00      	nop
 800a7da:	e004      	b.n	800a7e6 <USBH_CDC_Process+0x122>
      break;
 800a7dc:	bf00      	nop
 800a7de:	e002      	b.n	800a7e6 <USBH_CDC_Process+0x122>
      break;
 800a7e0:	bf00      	nop
 800a7e2:	e000      	b.n	800a7e6 <USBH_CDC_Process+0x122>
      break;
 800a7e4:	bf00      	nop

  }

  return status;
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	22a1      	movs	r2, #161	; 0xa1
 800a814:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2221      	movs	r2, #33	; 0x21
 800a81a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2207      	movs	r2, #7
 800a82c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2207      	movs	r2, #7
 800a832:	4619      	mov	r1, r3
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f001 fa81 	bl	800bd3c <USBH_CtlReq>
 800a83a:	4603      	mov	r3, r0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2221      	movs	r2, #33	; 0x21
 800a852:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2220      	movs	r2, #32
 800a858:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2207      	movs	r2, #7
 800a86a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	2207      	movs	r2, #7
 800a870:	4619      	mov	r1, r3
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f001 fa62 	bl	800bd3c <USBH_CtlReq>
 800a878:	4603      	mov	r3, r0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b086      	sub	sp, #24
 800a886:	af02      	add	r7, sp, #8
 800a888:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a890:	69db      	ldr	r3, [r3, #28]
 800a892:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a894:	2300      	movs	r3, #0
 800a896:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d002      	beq.n	800a8a8 <CDC_ProcessTransmission+0x26>
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d023      	beq.n	800a8ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a8a6:	e05e      	b.n	800a966 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	8b12      	ldrh	r2, [r2, #24]
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d90b      	bls.n	800a8cc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	69d9      	ldr	r1, [r3, #28]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	8b1a      	ldrh	r2, [r3, #24]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	7b5b      	ldrb	r3, [r3, #13]
 800a8c0:	2001      	movs	r0, #1
 800a8c2:	9000      	str	r0, [sp, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f001 fc48 	bl	800c15a <USBH_BulkSendData>
 800a8ca:	e00b      	b.n	800a8e4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	7b5b      	ldrb	r3, [r3, #13]
 800a8da:	2001      	movs	r0, #1
 800a8dc:	9000      	str	r0, [sp, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f001 fc3b 	bl	800c15a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a8ec:	e03b      	b.n	800a966 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	7b5b      	ldrb	r3, [r3, #13]
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f001 ff5f 	bl	800c7b8 <USBH_LL_GetURBState>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a8fe:	7afb      	ldrb	r3, [r7, #11]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d128      	bne.n	800a956 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	8b12      	ldrh	r2, [r2, #24]
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d90e      	bls.n	800a92e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	8b12      	ldrh	r2, [r2, #24]
 800a918:	1a9a      	subs	r2, r3, r2
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	8b12      	ldrh	r2, [r2, #24]
 800a926:	441a      	add	r2, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	61da      	str	r2, [r3, #28]
 800a92c:	e002      	b.n	800a934 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d004      	beq.n	800a946 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a944:	e00e      	b.n	800a964 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f868 	bl	800aa24 <USBH_CDC_TransmitCallback>
      break;
 800a954:	e006      	b.n	800a964 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a956:	7afb      	ldrb	r3, [r7, #11]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d103      	bne.n	800a964 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a964:	bf00      	nop
  }
}
 800a966:	bf00      	nop
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b086      	sub	sp, #24
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a980:	2300      	movs	r3, #0
 800a982:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d002      	beq.n	800a994 <CDC_ProcessReception+0x26>
 800a98e:	2b04      	cmp	r3, #4
 800a990:	d00e      	beq.n	800a9b0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a992:	e043      	b.n	800aa1c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	6a19      	ldr	r1, [r3, #32]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	8b5a      	ldrh	r2, [r3, #26]
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	7b1b      	ldrb	r3, [r3, #12]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f001 fbff 	bl	800c1a4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	2204      	movs	r2, #4
 800a9aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a9ae:	e035      	b.n	800aa1c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	7b1b      	ldrb	r3, [r3, #12]
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f001 fefe 	bl	800c7b8 <USBH_LL_GetURBState>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a9c0:	7cfb      	ldrb	r3, [r7, #19]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d129      	bne.n	800aa1a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	7b1b      	ldrb	r3, [r3, #12]
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f001 fe61 	bl	800c694 <USBH_LL_GetLastXferSize>
 800a9d2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d016      	beq.n	800aa0c <CDC_ProcessReception+0x9e>
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	8b5b      	ldrh	r3, [r3, #26]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d910      	bls.n	800aa0c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	1ad2      	subs	r2, r2, r3
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	6a1a      	ldr	r2, [r3, #32]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	441a      	add	r2, r3
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	2203      	movs	r2, #3
 800aa06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800aa0a:	e006      	b.n	800aa1a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f80f 	bl	800aa38 <USBH_CDC_ReceiveCallback>
      break;
 800aa1a:	bf00      	nop
  }
}
 800aa1c:	bf00      	nop
 800aa1e:	3718      	adds	r7, #24
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800aa74:	2302      	movs	r3, #2
 800aa76:	e029      	b.n	800aacc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	79fa      	ldrb	r2, [r7, #7]
 800aa7c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f000 f81f 	bl	800aad4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d003      	beq.n	800aac4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f001 fd31 	bl	800c52c <USBH_LL_Init>

  return USBH_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aadc:	2300      	movs	r3, #0
 800aade:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aae0:	2300      	movs	r3, #0
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	e009      	b.n	800aafa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	33e0      	adds	r3, #224	; 0xe0
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	60fb      	str	r3, [r7, #12]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2b0f      	cmp	r3, #15
 800aafe:	d9f2      	bls.n	800aae6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ab00:	2300      	movs	r3, #0
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	e009      	b.n	800ab1a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ab10:	2200      	movs	r2, #0
 800ab12:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	3301      	adds	r3, #1
 800ab18:	60fb      	str	r3, [r7, #12]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab20:	d3f1      	bcc.n	800ab06 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2240      	movs	r2, #64	; 0x40
 800ab46:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3714      	adds	r7, #20
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d016      	beq.n	800abbe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10e      	bne.n	800abb8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aba0:	1c59      	adds	r1, r3, #1
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	33de      	adds	r3, #222	; 0xde
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	73fb      	strb	r3, [r7, #15]
 800abb6:	e004      	b.n	800abc2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800abb8:	2302      	movs	r3, #2
 800abba:	73fb      	strb	r3, [r7, #15]
 800abbc:	e001      	b.n	800abc2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800abbe:	2302      	movs	r3, #2
 800abc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800abe6:	78fa      	ldrb	r2, [r7, #3]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d204      	bcs.n	800abf6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	78fa      	ldrb	r2, [r7, #3]
 800abf0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800abf4:	e001      	b.n	800abfa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800abf6:	2302      	movs	r3, #2
 800abf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	4608      	mov	r0, r1
 800ac12:	4611      	mov	r1, r2
 800ac14:	461a      	mov	r2, r3
 800ac16:	4603      	mov	r3, r0
 800ac18:	70fb      	strb	r3, [r7, #3]
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	70bb      	strb	r3, [r7, #2]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ac22:	2300      	movs	r3, #0
 800ac24:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ac30:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ac32:	e025      	b.n	800ac80 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ac34:	7dfb      	ldrb	r3, [r7, #23]
 800ac36:	221a      	movs	r2, #26
 800ac38:	fb02 f303 	mul.w	r3, r2, r3
 800ac3c:	3308      	adds	r3, #8
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	3302      	adds	r3, #2
 800ac44:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	795b      	ldrb	r3, [r3, #5]
 800ac4a:	78fa      	ldrb	r2, [r7, #3]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d002      	beq.n	800ac56 <USBH_FindInterface+0x4e>
 800ac50:	78fb      	ldrb	r3, [r7, #3]
 800ac52:	2bff      	cmp	r3, #255	; 0xff
 800ac54:	d111      	bne.n	800ac7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ac5a:	78ba      	ldrb	r2, [r7, #2]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d002      	beq.n	800ac66 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac60:	78bb      	ldrb	r3, [r7, #2]
 800ac62:	2bff      	cmp	r3, #255	; 0xff
 800ac64:	d109      	bne.n	800ac7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac6a:	787a      	ldrb	r2, [r7, #1]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d002      	beq.n	800ac76 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ac70:	787b      	ldrb	r3, [r7, #1]
 800ac72:	2bff      	cmp	r3, #255	; 0xff
 800ac74:	d101      	bne.n	800ac7a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
 800ac78:	e006      	b.n	800ac88 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d9d6      	bls.n	800ac34 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ac86:	23ff      	movs	r3, #255	; 0xff
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	371c      	adds	r7, #28
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f001 fc81 	bl	800c5a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800aca2:	2101      	movs	r1, #1
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f001 fd9a 	bl	800c7de <USBH_LL_DriverVBUS>

  return USBH_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b088      	sub	sp, #32
 800acb8:	af04      	add	r7, sp, #16
 800acba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800acbc:	2302      	movs	r3, #2
 800acbe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2b01      	cmp	r3, #1
 800acce:	d102      	bne.n	800acd6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2203      	movs	r2, #3
 800acd4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	2b0b      	cmp	r3, #11
 800acde:	f200 81be 	bhi.w	800b05e <USBH_Process+0x3aa>
 800ace2:	a201      	add	r2, pc, #4	; (adr r2, 800ace8 <USBH_Process+0x34>)
 800ace4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace8:	0800ad19 	.word	0x0800ad19
 800acec:	0800ad4b 	.word	0x0800ad4b
 800acf0:	0800adb3 	.word	0x0800adb3
 800acf4:	0800aff9 	.word	0x0800aff9
 800acf8:	0800b05f 	.word	0x0800b05f
 800acfc:	0800ae57 	.word	0x0800ae57
 800ad00:	0800af9f 	.word	0x0800af9f
 800ad04:	0800ae8d 	.word	0x0800ae8d
 800ad08:	0800aead 	.word	0x0800aead
 800ad0c:	0800aecd 	.word	0x0800aecd
 800ad10:	0800af11 	.word	0x0800af11
 800ad14:	0800afe1 	.word	0x0800afe1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f000 819e 	beq.w	800b062 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2201      	movs	r2, #1
 800ad2a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ad2c:	20c8      	movs	r0, #200	; 0xc8
 800ad2e:	f001 fd9d 	bl	800c86c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f001 fc93 	bl	800c65e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ad48:	e18b      	b.n	800b062 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d107      	bne.n	800ad64 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2202      	movs	r2, #2
 800ad60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad62:	e18d      	b.n	800b080 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ad6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad6e:	d914      	bls.n	800ad9a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ad76:	3301      	adds	r3, #1
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	d903      	bls.n	800ad92 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	220d      	movs	r2, #13
 800ad8e:	701a      	strb	r2, [r3, #0]
      break;
 800ad90:	e176      	b.n	800b080 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	701a      	strb	r2, [r3, #0]
      break;
 800ad98:	e172      	b.n	800b080 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ada0:	f103 020a 	add.w	r2, r3, #10
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800adaa:	200a      	movs	r0, #10
 800adac:	f001 fd5e 	bl	800c86c <USBH_Delay>
      break;
 800adb0:	e166      	b.n	800b080 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d005      	beq.n	800adc8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800adc2:	2104      	movs	r1, #4
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800adc8:	2064      	movs	r0, #100	; 0x64
 800adca:	f001 fd4f 	bl	800c86c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f001 fc1e 	bl	800c610 <USBH_LL_GetSpeed>
 800add4:	4603      	mov	r3, r0
 800add6:	461a      	mov	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2205      	movs	r2, #5
 800ade2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ade4:	2100      	movs	r1, #0
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f001 fa29 	bl	800c23e <USBH_AllocPipe>
 800adec:	4603      	mov	r3, r0
 800adee:	461a      	mov	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800adf4:	2180      	movs	r1, #128	; 0x80
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f001 fa21 	bl	800c23e <USBH_AllocPipe>
 800adfc:	4603      	mov	r3, r0
 800adfe:	461a      	mov	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	7919      	ldrb	r1, [r3, #4]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ae18:	b292      	uxth	r2, r2
 800ae1a:	9202      	str	r2, [sp, #8]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	9201      	str	r2, [sp, #4]
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	4603      	mov	r3, r0
 800ae24:	2280      	movs	r2, #128	; 0x80
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f001 f9da 	bl	800c1e0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	7959      	ldrb	r1, [r3, #5]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ae40:	b292      	uxth	r2, r2
 800ae42:	9202      	str	r2, [sp, #8]
 800ae44:	2200      	movs	r2, #0
 800ae46:	9201      	str	r2, [sp, #4]
 800ae48:	9300      	str	r3, [sp, #0]
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f001 f9c6 	bl	800c1e0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae54:	e114      	b.n	800b080 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f918 	bl	800b08c <USBH_HandleEnum>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ae60:	7bbb      	ldrb	r3, [r7, #14]
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f040 80fe 	bne.w	800b066 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d103      	bne.n	800ae84 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2208      	movs	r2, #8
 800ae80:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ae82:	e0f0      	b.n	800b066 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2207      	movs	r2, #7
 800ae88:	701a      	strb	r2, [r3, #0]
      break;
 800ae8a:	e0ec      	b.n	800b066 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f000 80e9 	beq.w	800b06a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae9e:	2101      	movs	r1, #1
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2208      	movs	r2, #8
 800aea8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800aeaa:	e0de      	b.n	800b06a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fc2c 	bl	800b714 <USBH_SetCfg>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f040 80d5 	bne.w	800b06e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2209      	movs	r2, #9
 800aec8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aeca:	e0d0      	b.n	800b06e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800aed2:	f003 0320 	and.w	r3, r3, #32
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d016      	beq.n	800af08 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800aeda:	2101      	movs	r1, #1
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fc3c 	bl	800b75a <USBH_SetFeature>
 800aee2:	4603      	mov	r3, r0
 800aee4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aee6:	7bbb      	ldrb	r3, [r7, #14]
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d103      	bne.n	800aef6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	220a      	movs	r2, #10
 800aef2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aef4:	e0bd      	b.n	800b072 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800aef6:	7bbb      	ldrb	r3, [r7, #14]
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	f040 80b9 	bne.w	800b072 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	220a      	movs	r2, #10
 800af04:	701a      	strb	r2, [r3, #0]
      break;
 800af06:	e0b4      	b.n	800b072 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	220a      	movs	r2, #10
 800af0c:	701a      	strb	r2, [r3, #0]
      break;
 800af0e:	e0b0      	b.n	800b072 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 80ad 	beq.w	800b076 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800af24:	2300      	movs	r3, #0
 800af26:	73fb      	strb	r3, [r7, #15]
 800af28:	e016      	b.n	800af58 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800af2a:	7bfa      	ldrb	r2, [r7, #15]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	32de      	adds	r2, #222	; 0xde
 800af30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af34:	791a      	ldrb	r2, [r3, #4]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d108      	bne.n	800af52 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800af40:	7bfa      	ldrb	r2, [r7, #15]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	32de      	adds	r2, #222	; 0xde
 800af46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800af50:	e005      	b.n	800af5e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800af52:	7bfb      	ldrb	r3, [r7, #15]
 800af54:	3301      	adds	r3, #1
 800af56:	73fb      	strb	r3, [r7, #15]
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0e5      	beq.n	800af2a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af64:	2b00      	cmp	r3, #0
 800af66:	d016      	beq.n	800af96 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	4798      	blx	r3
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d109      	bne.n	800af8e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2206      	movs	r2, #6
 800af7e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af86:	2103      	movs	r1, #3
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af8c:	e073      	b.n	800b076 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	220d      	movs	r2, #13
 800af92:	701a      	strb	r2, [r3, #0]
      break;
 800af94:	e06f      	b.n	800b076 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	220d      	movs	r2, #13
 800af9a:	701a      	strb	r2, [r3, #0]
      break;
 800af9c:	e06b      	b.n	800b076 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d017      	beq.n	800afd8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	4798      	blx	r3
 800afb4:	4603      	mov	r3, r0
 800afb6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d103      	bne.n	800afc8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	220b      	movs	r2, #11
 800afc4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800afc6:	e058      	b.n	800b07a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d154      	bne.n	800b07a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	220d      	movs	r2, #13
 800afd4:	701a      	strb	r2, [r3, #0]
      break;
 800afd6:	e050      	b.n	800b07a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	220d      	movs	r2, #13
 800afdc:	701a      	strb	r2, [r3, #0]
      break;
 800afde:	e04c      	b.n	800b07a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d049      	beq.n	800b07e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	4798      	blx	r3
      }
      break;
 800aff6:	e042      	b.n	800b07e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff fd67 	bl	800aad4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d009      	beq.n	800b024 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d005      	beq.n	800b03a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b034:	2105      	movs	r1, #5
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b040:	b2db      	uxtb	r3, r3
 800b042:	2b01      	cmp	r3, #1
 800b044:	d107      	bne.n	800b056 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7ff fe20 	bl	800ac94 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b054:	e014      	b.n	800b080 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 faa4 	bl	800c5a4 <USBH_LL_Start>
      break;
 800b05c:	e010      	b.n	800b080 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800b05e:	bf00      	nop
 800b060:	e00e      	b.n	800b080 <USBH_Process+0x3cc>
      break;
 800b062:	bf00      	nop
 800b064:	e00c      	b.n	800b080 <USBH_Process+0x3cc>
      break;
 800b066:	bf00      	nop
 800b068:	e00a      	b.n	800b080 <USBH_Process+0x3cc>
    break;
 800b06a:	bf00      	nop
 800b06c:	e008      	b.n	800b080 <USBH_Process+0x3cc>
      break;
 800b06e:	bf00      	nop
 800b070:	e006      	b.n	800b080 <USBH_Process+0x3cc>
      break;
 800b072:	bf00      	nop
 800b074:	e004      	b.n	800b080 <USBH_Process+0x3cc>
      break;
 800b076:	bf00      	nop
 800b078:	e002      	b.n	800b080 <USBH_Process+0x3cc>
      break;
 800b07a:	bf00      	nop
 800b07c:	e000      	b.n	800b080 <USBH_Process+0x3cc>
      break;
 800b07e:	bf00      	nop
  }
  return USBH_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop

0800b08c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b088      	sub	sp, #32
 800b090:	af04      	add	r7, sp, #16
 800b092:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b094:	2301      	movs	r3, #1
 800b096:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b098:	2301      	movs	r3, #1
 800b09a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	785b      	ldrb	r3, [r3, #1]
 800b0a0:	2b07      	cmp	r3, #7
 800b0a2:	f200 81c1 	bhi.w	800b428 <USBH_HandleEnum+0x39c>
 800b0a6:	a201      	add	r2, pc, #4	; (adr r2, 800b0ac <USBH_HandleEnum+0x20>)
 800b0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ac:	0800b0cd 	.word	0x0800b0cd
 800b0b0:	0800b18b 	.word	0x0800b18b
 800b0b4:	0800b1f5 	.word	0x0800b1f5
 800b0b8:	0800b283 	.word	0x0800b283
 800b0bc:	0800b2ed 	.word	0x0800b2ed
 800b0c0:	0800b35d 	.word	0x0800b35d
 800b0c4:	0800b3a3 	.word	0x0800b3a3
 800b0c8:	0800b3e9 	.word	0x0800b3e9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b0cc:	2108      	movs	r1, #8
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fa50 	bl	800b574 <USBH_Get_DevDesc>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0d8:	7bbb      	ldrb	r3, [r7, #14]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d130      	bne.n	800b140 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	7919      	ldrb	r1, [r3, #4]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b102:	b292      	uxth	r2, r2
 800b104:	9202      	str	r2, [sp, #8]
 800b106:	2200      	movs	r2, #0
 800b108:	9201      	str	r2, [sp, #4]
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	4603      	mov	r3, r0
 800b10e:	2280      	movs	r2, #128	; 0x80
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f001 f865 	bl	800c1e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	7959      	ldrb	r1, [r3, #5]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b12a:	b292      	uxth	r2, r2
 800b12c:	9202      	str	r2, [sp, #8]
 800b12e:	2200      	movs	r2, #0
 800b130:	9201      	str	r2, [sp, #4]
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	4603      	mov	r3, r0
 800b136:	2200      	movs	r2, #0
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 f851 	bl	800c1e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b13e:	e175      	b.n	800b42c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b140:	7bbb      	ldrb	r3, [r7, #14]
 800b142:	2b03      	cmp	r3, #3
 800b144:	f040 8172 	bne.w	800b42c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b14e:	3301      	adds	r3, #1
 800b150:	b2da      	uxtb	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b15e:	2b03      	cmp	r3, #3
 800b160:	d903      	bls.n	800b16a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	220d      	movs	r2, #13
 800b166:	701a      	strb	r2, [r3, #0]
      break;
 800b168:	e160      	b.n	800b42c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	795b      	ldrb	r3, [r3, #5]
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f001 f885 	bl	800c280 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	791b      	ldrb	r3, [r3, #4]
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f001 f87f 	bl	800c280 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	701a      	strb	r2, [r3, #0]
      break;
 800b188:	e150      	b.n	800b42c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b18a:	2112      	movs	r1, #18
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 f9f1 	bl	800b574 <USBH_Get_DevDesc>
 800b192:	4603      	mov	r3, r0
 800b194:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b196:	7bbb      	ldrb	r3, [r7, #14]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d103      	bne.n	800b1a4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2202      	movs	r2, #2
 800b1a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b1a2:	e145      	b.n	800b430 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1a4:	7bbb      	ldrb	r3, [r7, #14]
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	f040 8142 	bne.w	800b430 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d903      	bls.n	800b1ce <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	220d      	movs	r2, #13
 800b1ca:	701a      	strb	r2, [r3, #0]
      break;
 800b1cc:	e130      	b.n	800b430 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	795b      	ldrb	r3, [r3, #5]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f001 f853 	bl	800c280 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	791b      	ldrb	r3, [r3, #4]
 800b1de:	4619      	mov	r1, r3
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f001 f84d 	bl	800c280 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	701a      	strb	r2, [r3, #0]
      break;
 800b1f2:	e11d      	b.n	800b430 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fa68 	bl	800b6cc <USBH_SetAddress>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b200:	7bbb      	ldrb	r3, [r7, #14]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d132      	bne.n	800b26c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b206:	2002      	movs	r0, #2
 800b208:	f001 fb30 	bl	800c86c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2203      	movs	r2, #3
 800b218:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	7919      	ldrb	r1, [r3, #4]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b22e:	b292      	uxth	r2, r2
 800b230:	9202      	str	r2, [sp, #8]
 800b232:	2200      	movs	r2, #0
 800b234:	9201      	str	r2, [sp, #4]
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	4603      	mov	r3, r0
 800b23a:	2280      	movs	r2, #128	; 0x80
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 ffcf 	bl	800c1e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	7959      	ldrb	r1, [r3, #5]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b256:	b292      	uxth	r2, r2
 800b258:	9202      	str	r2, [sp, #8]
 800b25a:	2200      	movs	r2, #0
 800b25c:	9201      	str	r2, [sp, #4]
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	4603      	mov	r3, r0
 800b262:	2200      	movs	r2, #0
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 ffbb 	bl	800c1e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b26a:	e0e3      	b.n	800b434 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b26c:	7bbb      	ldrb	r3, [r7, #14]
 800b26e:	2b03      	cmp	r3, #3
 800b270:	f040 80e0 	bne.w	800b434 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	220d      	movs	r2, #13
 800b278:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	705a      	strb	r2, [r3, #1]
      break;
 800b280:	e0d8      	b.n	800b434 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b282:	2109      	movs	r1, #9
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f99d 	bl	800b5c4 <USBH_Get_CfgDesc>
 800b28a:	4603      	mov	r3, r0
 800b28c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b28e:	7bbb      	ldrb	r3, [r7, #14]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d103      	bne.n	800b29c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2204      	movs	r2, #4
 800b298:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b29a:	e0cd      	b.n	800b438 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b29c:	7bbb      	ldrb	r3, [r7, #14]
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	f040 80ca 	bne.w	800b438 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	d903      	bls.n	800b2c6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	220d      	movs	r2, #13
 800b2c2:	701a      	strb	r2, [r3, #0]
      break;
 800b2c4:	e0b8      	b.n	800b438 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	795b      	ldrb	r3, [r3, #5]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 ffd7 	bl	800c280 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	791b      	ldrb	r3, [r3, #4]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 ffd1 	bl	800c280 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	701a      	strb	r2, [r3, #0]
      break;
 800b2ea:	e0a5      	b.n	800b438 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f965 	bl	800b5c4 <USBH_Get_CfgDesc>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b2fe:	7bbb      	ldrb	r3, [r7, #14]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d103      	bne.n	800b30c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2205      	movs	r2, #5
 800b308:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b30a:	e097      	b.n	800b43c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b30c:	7bbb      	ldrb	r3, [r7, #14]
 800b30e:	2b03      	cmp	r3, #3
 800b310:	f040 8094 	bne.w	800b43c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b31a:	3301      	adds	r3, #1
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d903      	bls.n	800b336 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	220d      	movs	r2, #13
 800b332:	701a      	strb	r2, [r3, #0]
      break;
 800b334:	e082      	b.n	800b43c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	795b      	ldrb	r3, [r3, #5]
 800b33a:	4619      	mov	r1, r3
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 ff9f 	bl	800c280 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	791b      	ldrb	r3, [r3, #4]
 800b346:	4619      	mov	r1, r3
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 ff99 	bl	800c280 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	701a      	strb	r2, [r3, #0]
      break;
 800b35a:	e06f      	b.n	800b43c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b362:	2b00      	cmp	r3, #0
 800b364:	d019      	beq.n	800b39a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b372:	23ff      	movs	r3, #255	; 0xff
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f949 	bl	800b60c <USBH_Get_StringDesc>
 800b37a:	4603      	mov	r3, r0
 800b37c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d103      	bne.n	800b38c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2206      	movs	r2, #6
 800b388:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b38a:	e059      	b.n	800b440 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b38c:	7bbb      	ldrb	r3, [r7, #14]
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d156      	bne.n	800b440 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2206      	movs	r2, #6
 800b396:	705a      	strb	r2, [r3, #1]
      break;
 800b398:	e052      	b.n	800b440 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2206      	movs	r2, #6
 800b39e:	705a      	strb	r2, [r3, #1]
      break;
 800b3a0:	e04e      	b.n	800b440 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d019      	beq.n	800b3e0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b3b8:	23ff      	movs	r3, #255	; 0xff
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f926 	bl	800b60c <USBH_Get_StringDesc>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b3c4:	7bbb      	ldrb	r3, [r7, #14]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d103      	bne.n	800b3d2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2207      	movs	r2, #7
 800b3ce:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b3d0:	e038      	b.n	800b444 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b3d2:	7bbb      	ldrb	r3, [r7, #14]
 800b3d4:	2b03      	cmp	r3, #3
 800b3d6:	d135      	bne.n	800b444 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2207      	movs	r2, #7
 800b3dc:	705a      	strb	r2, [r3, #1]
      break;
 800b3de:	e031      	b.n	800b444 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2207      	movs	r2, #7
 800b3e4:	705a      	strb	r2, [r3, #1]
      break;
 800b3e6:	e02d      	b.n	800b444 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d017      	beq.n	800b422 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b3fe:	23ff      	movs	r3, #255	; 0xff
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f903 	bl	800b60c <USBH_Get_StringDesc>
 800b406:	4603      	mov	r3, r0
 800b408:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b40a:	7bbb      	ldrb	r3, [r7, #14]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d102      	bne.n	800b416 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b410:	2300      	movs	r3, #0
 800b412:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b414:	e018      	b.n	800b448 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b416:	7bbb      	ldrb	r3, [r7, #14]
 800b418:	2b03      	cmp	r3, #3
 800b41a:	d115      	bne.n	800b448 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73fb      	strb	r3, [r7, #15]
      break;
 800b420:	e012      	b.n	800b448 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	73fb      	strb	r3, [r7, #15]
      break;
 800b426:	e00f      	b.n	800b448 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b428:	bf00      	nop
 800b42a:	e00e      	b.n	800b44a <USBH_HandleEnum+0x3be>
      break;
 800b42c:	bf00      	nop
 800b42e:	e00c      	b.n	800b44a <USBH_HandleEnum+0x3be>
      break;
 800b430:	bf00      	nop
 800b432:	e00a      	b.n	800b44a <USBH_HandleEnum+0x3be>
      break;
 800b434:	bf00      	nop
 800b436:	e008      	b.n	800b44a <USBH_HandleEnum+0x3be>
      break;
 800b438:	bf00      	nop
 800b43a:	e006      	b.n	800b44a <USBH_HandleEnum+0x3be>
      break;
 800b43c:	bf00      	nop
 800b43e:	e004      	b.n	800b44a <USBH_HandleEnum+0x3be>
      break;
 800b440:	bf00      	nop
 800b442:	e002      	b.n	800b44a <USBH_HandleEnum+0x3be>
      break;
 800b444:	bf00      	nop
 800b446:	e000      	b.n	800b44a <USBH_HandleEnum+0x3be>
      break;
 800b448:	bf00      	nop
  }
  return Status;
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	683a      	ldr	r2, [r7, #0]
 800b462:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b466:	bf00      	nop
 800b468:	370c      	adds	r7, #12
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr

0800b472 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b082      	sub	sp, #8
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 f804 	bl	800b496 <USBH_HandleSof>
}
 800b48e:	bf00      	nop
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b082      	sub	sp, #8
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	2b0b      	cmp	r3, #11
 800b4a6:	d10a      	bne.n	800b4be <USBH_HandleSof+0x28>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d005      	beq.n	800b4be <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4b8:	699b      	ldr	r3, [r3, #24]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	4798      	blx	r3
  }
}
 800b4be:	bf00      	nop
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b083      	sub	sp, #12
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b4d6:	bf00      	nop
}
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	b083      	sub	sp, #12
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b4f2:	bf00      	nop
}
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b083      	sub	sp, #12
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f001 f844 	bl	800c5da <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	791b      	ldrb	r3, [r3, #4]
 800b556:	4619      	mov	r1, r3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 fe91 	bl	800c280 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	795b      	ldrb	r3, [r3, #5]
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fe8b 	bl	800c280 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af02      	add	r7, sp, #8
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b586:	78fb      	ldrb	r3, [r7, #3]
 800b588:	b29b      	uxth	r3, r3
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	4613      	mov	r3, r2
 800b58e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b592:	2100      	movs	r1, #0
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f864 	bl	800b662 <USBH_GetDescriptor>
 800b59a:	4603      	mov	r3, r0
 800b59c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10a      	bne.n	800b5ba <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b5b0:	78fa      	ldrb	r2, [r7, #3]
 800b5b2:	b292      	uxth	r2, r2
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	f000 f918 	bl	800b7ea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3710      	adds	r7, #16
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af02      	add	r7, sp, #8
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	331c      	adds	r3, #28
 800b5d4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b5d6:	887b      	ldrh	r3, [r7, #2]
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f83d 	bl	800b662 <USBH_GetDescriptor>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d107      	bne.n	800b602 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b5f2:	887b      	ldrh	r3, [r7, #2]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f987 	bl	800b90c <USBH_ParseCfgDesc>
 800b5fe:	4603      	mov	r3, r0
 800b600:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b602:	7bfb      	ldrb	r3, [r7, #15]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b088      	sub	sp, #32
 800b610:	af02      	add	r7, sp, #8
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	607a      	str	r2, [r7, #4]
 800b616:	461a      	mov	r2, r3
 800b618:	460b      	mov	r3, r1
 800b61a:	72fb      	strb	r3, [r7, #11]
 800b61c:	4613      	mov	r3, r2
 800b61e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b620:	7afb      	ldrb	r3, [r7, #11]
 800b622:	b29b      	uxth	r3, r3
 800b624:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b628:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b630:	893b      	ldrh	r3, [r7, #8]
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	460b      	mov	r3, r1
 800b636:	2100      	movs	r1, #0
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f000 f812 	bl	800b662 <USBH_GetDescriptor>
 800b63e:	4603      	mov	r3, r0
 800b640:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b642:	7dfb      	ldrb	r3, [r7, #23]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d107      	bne.n	800b658 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b64e:	893a      	ldrh	r2, [r7, #8]
 800b650:	6879      	ldr	r1, [r7, #4]
 800b652:	4618      	mov	r0, r3
 800b654:	f000 fb24 	bl	800bca0 <USBH_ParseStringDesc>
  }

  return status;
 800b658:	7dfb      	ldrb	r3, [r7, #23]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3718      	adds	r7, #24
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	60f8      	str	r0, [r7, #12]
 800b66a:	607b      	str	r3, [r7, #4]
 800b66c:	460b      	mov	r3, r1
 800b66e:	72fb      	strb	r3, [r7, #11]
 800b670:	4613      	mov	r3, r2
 800b672:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	789b      	ldrb	r3, [r3, #2]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d11c      	bne.n	800b6b6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b67c:	7afb      	ldrb	r3, [r7, #11]
 800b67e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b682:	b2da      	uxtb	r2, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2206      	movs	r2, #6
 800b68c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	893a      	ldrh	r2, [r7, #8]
 800b692:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b694:	893b      	ldrh	r3, [r7, #8]
 800b696:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b69a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b69e:	d104      	bne.n	800b6aa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f240 4209 	movw	r2, #1033	; 0x409
 800b6a6:	829a      	strh	r2, [r3, #20]
 800b6a8:	e002      	b.n	800b6b0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	8b3a      	ldrh	r2, [r7, #24]
 800b6b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b6b6:	8b3b      	ldrh	r3, [r7, #24]
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f000 fb3d 	bl	800bd3c <USBH_CtlReq>
 800b6c2:	4603      	mov	r3, r0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	789b      	ldrb	r3, [r3, #2]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d10f      	bne.n	800b700 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2205      	movs	r2, #5
 800b6ea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b6ec:	78fb      	ldrb	r3, [r7, #3]
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b700:	2200      	movs	r2, #0
 800b702:	2100      	movs	r1, #0
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fb19 	bl	800bd3c <USBH_CtlReq>
 800b70a:	4603      	mov	r3, r0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	789b      	ldrb	r3, [r3, #2]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d10e      	bne.n	800b746 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2209      	movs	r2, #9
 800b732:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	887a      	ldrh	r2, [r7, #2]
 800b738:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b746:	2200      	movs	r2, #0
 800b748:	2100      	movs	r1, #0
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 faf6 	bl	800bd3c <USBH_CtlReq>
 800b750:	4603      	mov	r3, r0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b082      	sub	sp, #8
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
 800b762:	460b      	mov	r3, r1
 800b764:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	789b      	ldrb	r3, [r3, #2]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d10f      	bne.n	800b78e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2203      	movs	r2, #3
 800b778:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b77a:	78fb      	ldrb	r3, [r7, #3]
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b78e:	2200      	movs	r2, #0
 800b790:	2100      	movs	r1, #0
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 fad2 	bl	800bd3c <USBH_CtlReq>
 800b798:	4603      	mov	r3, r0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b082      	sub	sp, #8
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	789b      	ldrb	r3, [r3, #2]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d10f      	bne.n	800b7d6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b7c8:	78fb      	ldrb	r3, [r7, #3]
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	2100      	movs	r1, #0
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 faae 	bl	800bd3c <USBH_CtlReq>
 800b7e0:	4603      	mov	r3, r0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	b085      	sub	sp, #20
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	60f8      	str	r0, [r7, #12]
 800b7f2:	60b9      	str	r1, [r7, #8]
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	781a      	ldrb	r2, [r3, #0]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	785a      	ldrb	r2, [r3, #1]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	3302      	adds	r3, #2
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	b29a      	uxth	r2, r3
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	3303      	adds	r3, #3
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	b29b      	uxth	r3, r3
 800b818:	021b      	lsls	r3, r3, #8
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	4313      	orrs	r3, r2
 800b81e:	b29a      	uxth	r2, r3
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	791a      	ldrb	r2, [r3, #4]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	795a      	ldrb	r2, [r3, #5]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	799a      	ldrb	r2, [r3, #6]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	79da      	ldrb	r2, [r3, #7]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	79db      	ldrb	r3, [r3, #7]
 800b848:	2b20      	cmp	r3, #32
 800b84a:	dc11      	bgt.n	800b870 <USBH_ParseDevDesc+0x86>
 800b84c:	2b08      	cmp	r3, #8
 800b84e:	db16      	blt.n	800b87e <USBH_ParseDevDesc+0x94>
 800b850:	3b08      	subs	r3, #8
 800b852:	2201      	movs	r2, #1
 800b854:	fa02 f303 	lsl.w	r3, r2, r3
 800b858:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b85c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b860:	2b00      	cmp	r3, #0
 800b862:	bf14      	ite	ne
 800b864:	2301      	movne	r3, #1
 800b866:	2300      	moveq	r3, #0
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d102      	bne.n	800b874 <USBH_ParseDevDesc+0x8a>
 800b86e:	e006      	b.n	800b87e <USBH_ParseDevDesc+0x94>
 800b870:	2b40      	cmp	r3, #64	; 0x40
 800b872:	d104      	bne.n	800b87e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	79da      	ldrb	r2, [r3, #7]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	71da      	strb	r2, [r3, #7]
      break;
 800b87c:	e003      	b.n	800b886 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2240      	movs	r2, #64	; 0x40
 800b882:	71da      	strb	r2, [r3, #7]
      break;
 800b884:	bf00      	nop
  }

  if (length > 8U)
 800b886:	88fb      	ldrh	r3, [r7, #6]
 800b888:	2b08      	cmp	r3, #8
 800b88a:	d939      	bls.n	800b900 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	3308      	adds	r3, #8
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	b29a      	uxth	r2, r3
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	3309      	adds	r3, #9
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	021b      	lsls	r3, r3, #8
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	330a      	adds	r3, #10
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	330b      	adds	r3, #11
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	021b      	lsls	r3, r3, #8
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	330c      	adds	r3, #12
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	330d      	adds	r3, #13
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	021b      	lsls	r3, r3, #8
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	7b9a      	ldrb	r2, [r3, #14]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	7bda      	ldrb	r2, [r3, #15]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	7c1a      	ldrb	r2, [r3, #16]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	7c5a      	ldrb	r2, [r3, #17]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	745a      	strb	r2, [r3, #17]
  }
}
 800b900:	bf00      	nop
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b08c      	sub	sp, #48	; 0x30
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	4613      	mov	r3, r2
 800b918:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b920:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b92c:	2300      	movs	r3, #0
 800b92e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b932:	2300      	movs	r3, #0
 800b934:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	781a      	ldrb	r2, [r3, #0]
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	785a      	ldrb	r2, [r3, #1]
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	3302      	adds	r3, #2
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	b29a      	uxth	r2, r3
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	3303      	adds	r3, #3
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	021b      	lsls	r3, r3, #8
 800b95e:	b29b      	uxth	r3, r3
 800b960:	4313      	orrs	r3, r2
 800b962:	b29b      	uxth	r3, r3
 800b964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b968:	bf28      	it	cs
 800b96a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b96e:	b29a      	uxth	r2, r3
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	791a      	ldrb	r2, [r3, #4]
 800b978:	6a3b      	ldr	r3, [r7, #32]
 800b97a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	795a      	ldrb	r2, [r3, #5]
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	799a      	ldrb	r2, [r3, #6]
 800b988:	6a3b      	ldr	r3, [r7, #32]
 800b98a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	79da      	ldrb	r2, [r3, #7]
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	7a1a      	ldrb	r2, [r3, #8]
 800b998:	6a3b      	ldr	r3, [r7, #32]
 800b99a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	2b09      	cmp	r3, #9
 800b9a2:	d002      	beq.n	800b9aa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	2209      	movs	r2, #9
 800b9a8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b9aa:	88fb      	ldrh	r3, [r7, #6]
 800b9ac:	2b09      	cmp	r3, #9
 800b9ae:	f240 809d 	bls.w	800baec <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b9b2:	2309      	movs	r3, #9
 800b9b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b9ba:	e081      	b.n	800bac0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b9bc:	f107 0316 	add.w	r3, r7, #22
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9c4:	f000 f99f 	bl	800bd06 <USBH_GetNextDesc>
 800b9c8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	785b      	ldrb	r3, [r3, #1]
 800b9ce:	2b04      	cmp	r3, #4
 800b9d0:	d176      	bne.n	800bac0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	2b09      	cmp	r3, #9
 800b9d8:	d002      	beq.n	800b9e0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9dc:	2209      	movs	r2, #9
 800b9de:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9e4:	221a      	movs	r2, #26
 800b9e6:	fb02 f303 	mul.w	r3, r2, r3
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	6a3a      	ldr	r2, [r7, #32]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	3302      	adds	r3, #2
 800b9f2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b9f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9f6:	69f8      	ldr	r0, [r7, #28]
 800b9f8:	f000 f87e 	bl	800baf8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ba02:	2300      	movs	r3, #0
 800ba04:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ba06:	e043      	b.n	800ba90 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ba08:	f107 0316 	add.w	r3, r7, #22
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba10:	f000 f979 	bl	800bd06 <USBH_GetNextDesc>
 800ba14:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba18:	785b      	ldrb	r3, [r3, #1]
 800ba1a:	2b05      	cmp	r3, #5
 800ba1c:	d138      	bne.n	800ba90 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	795b      	ldrb	r3, [r3, #5]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d10f      	bne.n	800ba46 <USBH_ParseCfgDesc+0x13a>
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	799b      	ldrb	r3, [r3, #6]
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d10b      	bne.n	800ba46 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	79db      	ldrb	r3, [r3, #7]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10f      	bne.n	800ba56 <USBH_ParseCfgDesc+0x14a>
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	2b09      	cmp	r3, #9
 800ba3c:	d00b      	beq.n	800ba56 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800ba3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba40:	2209      	movs	r2, #9
 800ba42:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ba44:	e007      	b.n	800ba56 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800ba46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b07      	cmp	r3, #7
 800ba4c:	d004      	beq.n	800ba58 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba50:	2207      	movs	r2, #7
 800ba52:	701a      	strb	r2, [r3, #0]
 800ba54:	e000      	b.n	800ba58 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ba56:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ba58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba5c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ba60:	3201      	adds	r2, #1
 800ba62:	00d2      	lsls	r2, r2, #3
 800ba64:	211a      	movs	r1, #26
 800ba66:	fb01 f303 	mul.w	r3, r1, r3
 800ba6a:	4413      	add	r3, r2
 800ba6c:	3308      	adds	r3, #8
 800ba6e:	6a3a      	ldr	r2, [r7, #32]
 800ba70:	4413      	add	r3, r2
 800ba72:	3304      	adds	r3, #4
 800ba74:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ba76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba78:	69b9      	ldr	r1, [r7, #24]
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f000 f86b 	bl	800bb56 <USBH_ParseEPDesc>
 800ba80:	4603      	mov	r3, r0
 800ba82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ba86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	791b      	ldrb	r3, [r3, #4]
 800ba94:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d204      	bcs.n	800baa6 <USBH_ParseCfgDesc+0x19a>
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	885a      	ldrh	r2, [r3, #2]
 800baa0:	8afb      	ldrh	r3, [r7, #22]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d8b0      	bhi.n	800ba08 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	791b      	ldrb	r3, [r3, #4]
 800baaa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800baae:	429a      	cmp	r2, r3
 800bab0:	d201      	bcs.n	800bab6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800bab2:	2303      	movs	r3, #3
 800bab4:	e01c      	b.n	800baf0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800bab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baba:	3301      	adds	r3, #1
 800babc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d805      	bhi.n	800bad4 <USBH_ParseCfgDesc+0x1c8>
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	885a      	ldrh	r2, [r3, #2]
 800bacc:	8afb      	ldrh	r3, [r7, #22]
 800bace:	429a      	cmp	r2, r3
 800bad0:	f63f af74 	bhi.w	800b9bc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bad4:	6a3b      	ldr	r3, [r7, #32]
 800bad6:	791b      	ldrb	r3, [r3, #4]
 800bad8:	2b02      	cmp	r3, #2
 800bada:	bf28      	it	cs
 800badc:	2302      	movcs	r3, #2
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d201      	bcs.n	800baec <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800bae8:	2303      	movs	r3, #3
 800baea:	e001      	b.n	800baf0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800baec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3730      	adds	r7, #48	; 0x30
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	781a      	ldrb	r2, [r3, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	785a      	ldrb	r2, [r3, #1]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	789a      	ldrb	r2, [r3, #2]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	78da      	ldrb	r2, [r3, #3]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	791a      	ldrb	r2, [r3, #4]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	795a      	ldrb	r2, [r3, #5]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	799a      	ldrb	r2, [r3, #6]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	79da      	ldrb	r2, [r3, #7]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	7a1a      	ldrb	r2, [r3, #8]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	721a      	strb	r2, [r3, #8]
}
 800bb4a:	bf00      	nop
 800bb4c:	370c      	adds	r7, #12
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b087      	sub	sp, #28
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	60b9      	str	r1, [r7, #8]
 800bb60:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	781a      	ldrb	r2, [r3, #0]
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	785a      	ldrb	r2, [r3, #1]
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	789a      	ldrb	r2, [r3, #2]
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	78da      	ldrb	r2, [r3, #3]
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	3304      	adds	r3, #4
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3305      	adds	r3, #5
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	021b      	lsls	r3, r3, #8
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	799a      	ldrb	r2, [r3, #6]
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	889b      	ldrh	r3, [r3, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d102      	bne.n	800bbb8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800bbb2:	2303      	movs	r3, #3
 800bbb4:	75fb      	strb	r3, [r7, #23]
 800bbb6:	e033      	b.n	800bc20 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	889b      	ldrh	r3, [r3, #4]
 800bbbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bbc0:	f023 0307 	bic.w	r3, r3, #7
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	889b      	ldrh	r3, [r3, #4]
 800bbce:	b21a      	sxth	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3304      	adds	r3, #4
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	b299      	uxth	r1, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	3305      	adds	r3, #5
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	021b      	lsls	r3, r3, #8
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	430b      	orrs	r3, r1
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d110      	bne.n	800bc12 <USBH_ParseEPDesc+0xbc>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	b299      	uxth	r1, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	3305      	adds	r3, #5
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	021b      	lsls	r3, r3, #8
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	430b      	orrs	r3, r1
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	b21b      	sxth	r3, r3
 800bc0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc0e:	b21b      	sxth	r3, r3
 800bc10:	e001      	b.n	800bc16 <USBH_ParseEPDesc+0xc0>
 800bc12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc16:	4313      	orrs	r3, r2
 800bc18:	b21b      	sxth	r3, r3
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d116      	bne.n	800bc58 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	78db      	ldrb	r3, [r3, #3]
 800bc2e:	f003 0303 	and.w	r3, r3, #3
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d005      	beq.n	800bc42 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	78db      	ldrb	r3, [r3, #3]
 800bc3a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	d127      	bne.n	800bc92 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	799b      	ldrb	r3, [r3, #6]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <USBH_ParseEPDesc+0xfc>
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	799b      	ldrb	r3, [r3, #6]
 800bc4e:	2b10      	cmp	r3, #16
 800bc50:	d91f      	bls.n	800bc92 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bc52:	2303      	movs	r3, #3
 800bc54:	75fb      	strb	r3, [r7, #23]
 800bc56:	e01c      	b.n	800bc92 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	78db      	ldrb	r3, [r3, #3]
 800bc5c:	f003 0303 	and.w	r3, r3, #3
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d10a      	bne.n	800bc7a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	799b      	ldrb	r3, [r3, #6]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d003      	beq.n	800bc74 <USBH_ParseEPDesc+0x11e>
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	799b      	ldrb	r3, [r3, #6]
 800bc70:	2b10      	cmp	r3, #16
 800bc72:	d90e      	bls.n	800bc92 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bc74:	2303      	movs	r3, #3
 800bc76:	75fb      	strb	r3, [r7, #23]
 800bc78:	e00b      	b.n	800bc92 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	78db      	ldrb	r3, [r3, #3]
 800bc7e:	f003 0303 	and.w	r3, r3, #3
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d105      	bne.n	800bc92 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	799b      	ldrb	r3, [r3, #6]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d101      	bne.n	800bc92 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800bc92:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	371c      	adds	r7, #28
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b087      	sub	sp, #28
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b03      	cmp	r3, #3
 800bcb6:	d120      	bne.n	800bcfa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	1e9a      	subs	r2, r3, #2
 800bcbe:	88fb      	ldrh	r3, [r7, #6]
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	bf28      	it	cs
 800bcc4:	4613      	movcs	r3, r2
 800bcc6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	3302      	adds	r3, #2
 800bccc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bcce:	2300      	movs	r3, #0
 800bcd0:	82fb      	strh	r3, [r7, #22]
 800bcd2:	e00b      	b.n	800bcec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bcd4:	8afb      	ldrh	r3, [r7, #22]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	4413      	add	r3, r2
 800bcda:	781a      	ldrb	r2, [r3, #0]
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	3301      	adds	r3, #1
 800bce4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bce6:	8afb      	ldrh	r3, [r7, #22]
 800bce8:	3302      	adds	r3, #2
 800bcea:	82fb      	strh	r3, [r7, #22]
 800bcec:	8afa      	ldrh	r2, [r7, #22]
 800bcee:	8abb      	ldrh	r3, [r7, #20]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d3ef      	bcc.n	800bcd4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	701a      	strb	r2, [r3, #0]
  }
}
 800bcfa:	bf00      	nop
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b085      	sub	sp, #20
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	881a      	ldrh	r2, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	4413      	add	r3, r2
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	4613      	mov	r3, r2
 800bd48:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	789b      	ldrb	r3, [r3, #2]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d002      	beq.n	800bd5c <USBH_CtlReq+0x20>
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	d00f      	beq.n	800bd7a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bd5a:	e027      	b.n	800bdac <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	88fa      	ldrh	r2, [r7, #6]
 800bd66:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2202      	movs	r2, #2
 800bd72:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bd74:	2301      	movs	r3, #1
 800bd76:	75fb      	strb	r3, [r7, #23]
      break;
 800bd78:	e018      	b.n	800bdac <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f000 f81c 	bl	800bdb8 <USBH_HandleControl>
 800bd80:	4603      	mov	r3, r0
 800bd82:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bd84:	7dfb      	ldrb	r3, [r7, #23]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d002      	beq.n	800bd90 <USBH_CtlReq+0x54>
 800bd8a:	7dfb      	ldrb	r3, [r7, #23]
 800bd8c:	2b03      	cmp	r3, #3
 800bd8e:	d106      	bne.n	800bd9e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2201      	movs	r2, #1
 800bd94:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	761a      	strb	r2, [r3, #24]
      break;
 800bd9c:	e005      	b.n	800bdaa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d102      	bne.n	800bdaa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2201      	movs	r2, #1
 800bda8:	709a      	strb	r2, [r3, #2]
      break;
 800bdaa:	bf00      	nop
  }
  return status;
 800bdac:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3718      	adds	r7, #24
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
	...

0800bdb8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b086      	sub	sp, #24
 800bdbc:	af02      	add	r7, sp, #8
 800bdbe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	7e1b      	ldrb	r3, [r3, #24]
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	2b0a      	cmp	r3, #10
 800bdd0:	f200 8156 	bhi.w	800c080 <USBH_HandleControl+0x2c8>
 800bdd4:	a201      	add	r2, pc, #4	; (adr r2, 800bddc <USBH_HandleControl+0x24>)
 800bdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdda:	bf00      	nop
 800bddc:	0800be09 	.word	0x0800be09
 800bde0:	0800be23 	.word	0x0800be23
 800bde4:	0800be8d 	.word	0x0800be8d
 800bde8:	0800beb3 	.word	0x0800beb3
 800bdec:	0800beeb 	.word	0x0800beeb
 800bdf0:	0800bf15 	.word	0x0800bf15
 800bdf4:	0800bf67 	.word	0x0800bf67
 800bdf8:	0800bf89 	.word	0x0800bf89
 800bdfc:	0800bfc5 	.word	0x0800bfc5
 800be00:	0800bfeb 	.word	0x0800bfeb
 800be04:	0800c029 	.word	0x0800c029
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f103 0110 	add.w	r1, r3, #16
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	795b      	ldrb	r3, [r3, #5]
 800be12:	461a      	mov	r2, r3
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f943 	bl	800c0a0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2202      	movs	r2, #2
 800be1e:	761a      	strb	r2, [r3, #24]
      break;
 800be20:	e139      	b.n	800c096 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	795b      	ldrb	r3, [r3, #5]
 800be26:	4619      	mov	r1, r3
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fcc5 	bl	800c7b8 <USBH_LL_GetURBState>
 800be2e:	4603      	mov	r3, r0
 800be30:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800be32:	7bbb      	ldrb	r3, [r7, #14]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d11e      	bne.n	800be76 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	7c1b      	ldrb	r3, [r3, #16]
 800be3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be40:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	8adb      	ldrh	r3, [r3, #22]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800be4a:	7b7b      	ldrb	r3, [r7, #13]
 800be4c:	2b80      	cmp	r3, #128	; 0x80
 800be4e:	d103      	bne.n	800be58 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2203      	movs	r2, #3
 800be54:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be56:	e115      	b.n	800c084 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2205      	movs	r2, #5
 800be5c:	761a      	strb	r2, [r3, #24]
      break;
 800be5e:	e111      	b.n	800c084 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800be60:	7b7b      	ldrb	r3, [r7, #13]
 800be62:	2b80      	cmp	r3, #128	; 0x80
 800be64:	d103      	bne.n	800be6e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2209      	movs	r2, #9
 800be6a:	761a      	strb	r2, [r3, #24]
      break;
 800be6c:	e10a      	b.n	800c084 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2207      	movs	r2, #7
 800be72:	761a      	strb	r2, [r3, #24]
      break;
 800be74:	e106      	b.n	800c084 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800be76:	7bbb      	ldrb	r3, [r7, #14]
 800be78:	2b04      	cmp	r3, #4
 800be7a:	d003      	beq.n	800be84 <USBH_HandleControl+0xcc>
 800be7c:	7bbb      	ldrb	r3, [r7, #14]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	f040 8100 	bne.w	800c084 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	220b      	movs	r2, #11
 800be88:	761a      	strb	r2, [r3, #24]
      break;
 800be8a:	e0fb      	b.n	800c084 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be92:	b29a      	uxth	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6899      	ldr	r1, [r3, #8]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	899a      	ldrh	r2, [r3, #12]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	791b      	ldrb	r3, [r3, #4]
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 f93a 	bl	800c11e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2204      	movs	r2, #4
 800beae:	761a      	strb	r2, [r3, #24]
      break;
 800beb0:	e0f1      	b.n	800c096 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	791b      	ldrb	r3, [r3, #4]
 800beb6:	4619      	mov	r1, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fc7d 	bl	800c7b8 <USBH_LL_GetURBState>
 800bebe:	4603      	mov	r3, r0
 800bec0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bec2:	7bbb      	ldrb	r3, [r7, #14]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d102      	bne.n	800bece <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2209      	movs	r2, #9
 800becc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bece:	7bbb      	ldrb	r3, [r7, #14]
 800bed0:	2b05      	cmp	r3, #5
 800bed2:	d102      	bne.n	800beda <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bed4:	2303      	movs	r3, #3
 800bed6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bed8:	e0d6      	b.n	800c088 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800beda:	7bbb      	ldrb	r3, [r7, #14]
 800bedc:	2b04      	cmp	r3, #4
 800bede:	f040 80d3 	bne.w	800c088 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	220b      	movs	r2, #11
 800bee6:	761a      	strb	r2, [r3, #24]
      break;
 800bee8:	e0ce      	b.n	800c088 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6899      	ldr	r1, [r3, #8]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	899a      	ldrh	r2, [r3, #12]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	795b      	ldrb	r3, [r3, #5]
 800bef6:	2001      	movs	r0, #1
 800bef8:	9000      	str	r0, [sp, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f8ea 	bl	800c0d4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2206      	movs	r2, #6
 800bf10:	761a      	strb	r2, [r3, #24]
      break;
 800bf12:	e0c0      	b.n	800c096 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	795b      	ldrb	r3, [r3, #5]
 800bf18:	4619      	mov	r1, r3
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fc4c 	bl	800c7b8 <USBH_LL_GetURBState>
 800bf20:	4603      	mov	r3, r0
 800bf22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bf24:	7bbb      	ldrb	r3, [r7, #14]
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d103      	bne.n	800bf32 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2207      	movs	r2, #7
 800bf2e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf30:	e0ac      	b.n	800c08c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
 800bf34:	2b05      	cmp	r3, #5
 800bf36:	d105      	bne.n	800bf44 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	220c      	movs	r2, #12
 800bf3c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	73fb      	strb	r3, [r7, #15]
      break;
 800bf42:	e0a3      	b.n	800c08c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bf44:	7bbb      	ldrb	r3, [r7, #14]
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d103      	bne.n	800bf52 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2205      	movs	r2, #5
 800bf4e:	761a      	strb	r2, [r3, #24]
      break;
 800bf50:	e09c      	b.n	800c08c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bf52:	7bbb      	ldrb	r3, [r7, #14]
 800bf54:	2b04      	cmp	r3, #4
 800bf56:	f040 8099 	bne.w	800c08c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	220b      	movs	r2, #11
 800bf5e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bf60:	2302      	movs	r3, #2
 800bf62:	73fb      	strb	r3, [r7, #15]
      break;
 800bf64:	e092      	b.n	800c08c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	791b      	ldrb	r3, [r3, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f8d5 	bl	800c11e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2208      	movs	r2, #8
 800bf84:	761a      	strb	r2, [r3, #24]

      break;
 800bf86:	e086      	b.n	800c096 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	791b      	ldrb	r3, [r3, #4]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 fc12 	bl	800c7b8 <USBH_LL_GetURBState>
 800bf94:	4603      	mov	r3, r0
 800bf96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bf98:	7bbb      	ldrb	r3, [r7, #14]
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d105      	bne.n	800bfaa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	220d      	movs	r2, #13
 800bfa2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bfa8:	e072      	b.n	800c090 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bfaa:	7bbb      	ldrb	r3, [r7, #14]
 800bfac:	2b04      	cmp	r3, #4
 800bfae:	d103      	bne.n	800bfb8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	220b      	movs	r2, #11
 800bfb4:	761a      	strb	r2, [r3, #24]
      break;
 800bfb6:	e06b      	b.n	800c090 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bfb8:	7bbb      	ldrb	r3, [r7, #14]
 800bfba:	2b05      	cmp	r3, #5
 800bfbc:	d168      	bne.n	800c090 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	73fb      	strb	r3, [r7, #15]
      break;
 800bfc2:	e065      	b.n	800c090 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	795b      	ldrb	r3, [r3, #5]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	9200      	str	r2, [sp, #0]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	2100      	movs	r1, #0
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f87f 	bl	800c0d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	220a      	movs	r2, #10
 800bfe6:	761a      	strb	r2, [r3, #24]
      break;
 800bfe8:	e055      	b.n	800c096 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	795b      	ldrb	r3, [r3, #5]
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fbe1 	bl	800c7b8 <USBH_LL_GetURBState>
 800bff6:	4603      	mov	r3, r0
 800bff8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bffa:	7bbb      	ldrb	r3, [r7, #14]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d105      	bne.n	800c00c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	220d      	movs	r2, #13
 800c008:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c00a:	e043      	b.n	800c094 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	2b02      	cmp	r3, #2
 800c010:	d103      	bne.n	800c01a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2209      	movs	r2, #9
 800c016:	761a      	strb	r2, [r3, #24]
      break;
 800c018:	e03c      	b.n	800c094 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c01a:	7bbb      	ldrb	r3, [r7, #14]
 800c01c:	2b04      	cmp	r3, #4
 800c01e:	d139      	bne.n	800c094 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	220b      	movs	r2, #11
 800c024:	761a      	strb	r2, [r3, #24]
      break;
 800c026:	e035      	b.n	800c094 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	7e5b      	ldrb	r3, [r3, #25]
 800c02c:	3301      	adds	r3, #1
 800c02e:	b2da      	uxtb	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	765a      	strb	r2, [r3, #25]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	7e5b      	ldrb	r3, [r3, #25]
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d806      	bhi.n	800c04a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2201      	movs	r2, #1
 800c046:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c048:	e025      	b.n	800c096 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c050:	2106      	movs	r1, #6
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	795b      	ldrb	r3, [r3, #5]
 800c060:	4619      	mov	r1, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 f90c 	bl	800c280 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	791b      	ldrb	r3, [r3, #4]
 800c06c:	4619      	mov	r1, r3
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f906 	bl	800c280 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c07a:	2302      	movs	r3, #2
 800c07c:	73fb      	strb	r3, [r7, #15]
      break;
 800c07e:	e00a      	b.n	800c096 <USBH_HandleControl+0x2de>

    default:
      break;
 800c080:	bf00      	nop
 800c082:	e008      	b.n	800c096 <USBH_HandleControl+0x2de>
      break;
 800c084:	bf00      	nop
 800c086:	e006      	b.n	800c096 <USBH_HandleControl+0x2de>
      break;
 800c088:	bf00      	nop
 800c08a:	e004      	b.n	800c096 <USBH_HandleControl+0x2de>
      break;
 800c08c:	bf00      	nop
 800c08e:	e002      	b.n	800c096 <USBH_HandleControl+0x2de>
      break;
 800c090:	bf00      	nop
 800c092:	e000      	b.n	800c096 <USBH_HandleControl+0x2de>
      break;
 800c094:	bf00      	nop
  }

  return status;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b088      	sub	sp, #32
 800c0a4:	af04      	add	r7, sp, #16
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c0ae:	79f9      	ldrb	r1, [r7, #7]
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	9303      	str	r3, [sp, #12]
 800c0b4:	2308      	movs	r3, #8
 800c0b6:	9302      	str	r3, [sp, #8]
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	9301      	str	r3, [sp, #4]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f000 fb46 	bl	800c756 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b088      	sub	sp, #32
 800c0d8:	af04      	add	r7, sp, #16
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	4611      	mov	r1, r2
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	80fb      	strh	r3, [r7, #6]
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d001      	beq.n	800c0f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c0f8:	7979      	ldrb	r1, [r7, #5]
 800c0fa:	7e3b      	ldrb	r3, [r7, #24]
 800c0fc:	9303      	str	r3, [sp, #12]
 800c0fe:	88fb      	ldrh	r3, [r7, #6]
 800c100:	9302      	str	r3, [sp, #8]
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	9301      	str	r3, [sp, #4]
 800c106:	2301      	movs	r3, #1
 800c108:	9300      	str	r3, [sp, #0]
 800c10a:	2300      	movs	r3, #0
 800c10c:	2200      	movs	r2, #0
 800c10e:	68f8      	ldr	r0, [r7, #12]
 800c110:	f000 fb21 	bl	800c756 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b088      	sub	sp, #32
 800c122:	af04      	add	r7, sp, #16
 800c124:	60f8      	str	r0, [r7, #12]
 800c126:	60b9      	str	r1, [r7, #8]
 800c128:	4611      	mov	r1, r2
 800c12a:	461a      	mov	r2, r3
 800c12c:	460b      	mov	r3, r1
 800c12e:	80fb      	strh	r3, [r7, #6]
 800c130:	4613      	mov	r3, r2
 800c132:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c134:	7979      	ldrb	r1, [r7, #5]
 800c136:	2300      	movs	r3, #0
 800c138:	9303      	str	r3, [sp, #12]
 800c13a:	88fb      	ldrh	r3, [r7, #6]
 800c13c:	9302      	str	r3, [sp, #8]
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	9301      	str	r3, [sp, #4]
 800c142:	2301      	movs	r3, #1
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	2300      	movs	r3, #0
 800c148:	2201      	movs	r2, #1
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 fb03 	bl	800c756 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c150:	2300      	movs	r3, #0

}
 800c152:	4618      	mov	r0, r3
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b088      	sub	sp, #32
 800c15e:	af04      	add	r7, sp, #16
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	4611      	mov	r1, r2
 800c166:	461a      	mov	r2, r3
 800c168:	460b      	mov	r3, r1
 800c16a:	80fb      	strh	r3, [r7, #6]
 800c16c:	4613      	mov	r3, r2
 800c16e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c176:	2b00      	cmp	r3, #0
 800c178:	d001      	beq.n	800c17e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c17a:	2300      	movs	r3, #0
 800c17c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c17e:	7979      	ldrb	r1, [r7, #5]
 800c180:	7e3b      	ldrb	r3, [r7, #24]
 800c182:	9303      	str	r3, [sp, #12]
 800c184:	88fb      	ldrh	r3, [r7, #6]
 800c186:	9302      	str	r3, [sp, #8]
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	9301      	str	r3, [sp, #4]
 800c18c:	2301      	movs	r3, #1
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	2302      	movs	r3, #2
 800c192:	2200      	movs	r2, #0
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f000 fade 	bl	800c756 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b088      	sub	sp, #32
 800c1a8:	af04      	add	r7, sp, #16
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	4611      	mov	r1, r2
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	80fb      	strh	r3, [r7, #6]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c1ba:	7979      	ldrb	r1, [r7, #5]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	9303      	str	r3, [sp, #12]
 800c1c0:	88fb      	ldrh	r3, [r7, #6]
 800c1c2:	9302      	str	r3, [sp, #8]
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	2302      	movs	r3, #2
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f000 fac0 	bl	800c756 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af04      	add	r7, sp, #16
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	4608      	mov	r0, r1
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	70fb      	strb	r3, [r7, #3]
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	70bb      	strb	r3, [r7, #2]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c1fa:	7878      	ldrb	r0, [r7, #1]
 800c1fc:	78ba      	ldrb	r2, [r7, #2]
 800c1fe:	78f9      	ldrb	r1, [r7, #3]
 800c200:	8b3b      	ldrh	r3, [r7, #24]
 800c202:	9302      	str	r3, [sp, #8]
 800c204:	7d3b      	ldrb	r3, [r7, #20]
 800c206:	9301      	str	r3, [sp, #4]
 800c208:	7c3b      	ldrb	r3, [r7, #16]
 800c20a:	9300      	str	r3, [sp, #0]
 800c20c:	4603      	mov	r3, r0
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 fa53 	bl	800c6ba <USBH_LL_OpenPipe>

  return USBH_OK;
 800c214:	2300      	movs	r3, #0
}
 800c216:	4618      	mov	r0, r3
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b082      	sub	sp, #8
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	460b      	mov	r3, r1
 800c228:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c22a:	78fb      	ldrb	r3, [r7, #3]
 800c22c:	4619      	mov	r1, r3
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fa72 	bl	800c718 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b084      	sub	sp, #16
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
 800c246:	460b      	mov	r3, r1
 800c248:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 f836 	bl	800c2bc <USBH_GetFreePipe>
 800c250:	4603      	mov	r3, r0
 800c252:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c254:	89fb      	ldrh	r3, [r7, #14]
 800c256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d00a      	beq.n	800c274 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c25e:	78fa      	ldrb	r2, [r7, #3]
 800c260:	89fb      	ldrh	r3, [r7, #14]
 800c262:	f003 030f 	and.w	r3, r3, #15
 800c266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c26a:	6879      	ldr	r1, [r7, #4]
 800c26c:	33e0      	adds	r3, #224	; 0xe0
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	440b      	add	r3, r1
 800c272:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c274:	89fb      	ldrh	r3, [r7, #14]
 800c276:	b2db      	uxtb	r3, r3
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	460b      	mov	r3, r1
 800c28a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c28c:	78fb      	ldrb	r3, [r7, #3]
 800c28e:	2b0f      	cmp	r3, #15
 800c290:	d80d      	bhi.n	800c2ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c292:	78fb      	ldrb	r3, [r7, #3]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	33e0      	adds	r3, #224	; 0xe0
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4413      	add	r3, r2
 800c29c:	685a      	ldr	r2, [r3, #4]
 800c29e:	78fb      	ldrb	r3, [r7, #3]
 800c2a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	33e0      	adds	r3, #224	; 0xe0
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	440b      	add	r3, r1
 800c2ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	73fb      	strb	r3, [r7, #15]
 800c2cc:	e00f      	b.n	800c2ee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c2ce:	7bfb      	ldrb	r3, [r7, #15]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	33e0      	adds	r3, #224	; 0xe0
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	4413      	add	r3, r2
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d102      	bne.n	800c2e8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	e007      	b.n	800c2f8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c2e8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	73fb      	strb	r3, [r7, #15]
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
 800c2f0:	2b0f      	cmp	r3, #15
 800c2f2:	d9ec      	bls.n	800c2ce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c2f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3714      	adds	r7, #20
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c308:	2201      	movs	r2, #1
 800c30a:	490e      	ldr	r1, [pc, #56]	; (800c344 <MX_USB_HOST_Init+0x40>)
 800c30c:	480e      	ldr	r0, [pc, #56]	; (800c348 <MX_USB_HOST_Init+0x44>)
 800c30e:	f7fe fba7 	bl	800aa60 <USBH_Init>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d001      	beq.n	800c31c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c318:	f7f9 f947 	bl	80055aa <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c31c:	490b      	ldr	r1, [pc, #44]	; (800c34c <MX_USB_HOST_Init+0x48>)
 800c31e:	480a      	ldr	r0, [pc, #40]	; (800c348 <MX_USB_HOST_Init+0x44>)
 800c320:	f7fe fc2c 	bl	800ab7c <USBH_RegisterClass>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c32a:	f7f9 f93e 	bl	80055aa <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c32e:	4806      	ldr	r0, [pc, #24]	; (800c348 <MX_USB_HOST_Init+0x44>)
 800c330:	f7fe fcb0 	bl	800ac94 <USBH_Start>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c33a:	f7f9 f936 	bl	80055aa <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c33e:	bf00      	nop
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	0800c365 	.word	0x0800c365
 800c348:	200145d4 	.word	0x200145d4
 800c34c:	2000001c 	.word	0x2000001c

0800c350 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c354:	4802      	ldr	r0, [pc, #8]	; (800c360 <MX_USB_HOST_Process+0x10>)
 800c356:	f7fe fcad 	bl	800acb4 <USBH_Process>
}
 800c35a:	bf00      	nop
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	200145d4 	.word	0x200145d4

0800c364 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c370:	78fb      	ldrb	r3, [r7, #3]
 800c372:	3b01      	subs	r3, #1
 800c374:	2b04      	cmp	r3, #4
 800c376:	d819      	bhi.n	800c3ac <USBH_UserProcess+0x48>
 800c378:	a201      	add	r2, pc, #4	; (adr r2, 800c380 <USBH_UserProcess+0x1c>)
 800c37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37e:	bf00      	nop
 800c380:	0800c3ad 	.word	0x0800c3ad
 800c384:	0800c39d 	.word	0x0800c39d
 800c388:	0800c3ad 	.word	0x0800c3ad
 800c38c:	0800c3a5 	.word	0x0800c3a5
 800c390:	0800c395 	.word	0x0800c395
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c394:	4b09      	ldr	r3, [pc, #36]	; (800c3bc <USBH_UserProcess+0x58>)
 800c396:	2203      	movs	r2, #3
 800c398:	701a      	strb	r2, [r3, #0]
  break;
 800c39a:	e008      	b.n	800c3ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c39c:	4b07      	ldr	r3, [pc, #28]	; (800c3bc <USBH_UserProcess+0x58>)
 800c39e:	2202      	movs	r2, #2
 800c3a0:	701a      	strb	r2, [r3, #0]
  break;
 800c3a2:	e004      	b.n	800c3ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c3a4:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <USBH_UserProcess+0x58>)
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	701a      	strb	r2, [r3, #0]
  break;
 800c3aa:	e000      	b.n	800c3ae <USBH_UserProcess+0x4a>

  default:
  break;
 800c3ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c3ae:	bf00      	nop
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	200149ac 	.word	0x200149ac

0800c3c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b08a      	sub	sp, #40	; 0x28
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3c8:	f107 0314 	add.w	r3, r7, #20
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	601a      	str	r2, [r3, #0]
 800c3d0:	605a      	str	r2, [r3, #4]
 800c3d2:	609a      	str	r2, [r3, #8]
 800c3d4:	60da      	str	r2, [r3, #12]
 800c3d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3e0:	d147      	bne.n	800c472 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	613b      	str	r3, [r7, #16]
 800c3e6:	4b25      	ldr	r3, [pc, #148]	; (800c47c <HAL_HCD_MspInit+0xbc>)
 800c3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ea:	4a24      	ldr	r2, [pc, #144]	; (800c47c <HAL_HCD_MspInit+0xbc>)
 800c3ec:	f043 0301 	orr.w	r3, r3, #1
 800c3f0:	6313      	str	r3, [r2, #48]	; 0x30
 800c3f2:	4b22      	ldr	r3, [pc, #136]	; (800c47c <HAL_HCD_MspInit+0xbc>)
 800c3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	613b      	str	r3, [r7, #16]
 800c3fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c3fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c404:	2300      	movs	r3, #0
 800c406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c408:	2300      	movs	r3, #0
 800c40a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c40c:	f107 0314 	add.w	r3, r7, #20
 800c410:	4619      	mov	r1, r3
 800c412:	481b      	ldr	r0, [pc, #108]	; (800c480 <HAL_HCD_MspInit+0xc0>)
 800c414:	f7f9 fc32 	bl	8005c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c418:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c41c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c41e:	2302      	movs	r3, #2
 800c420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c422:	2300      	movs	r3, #0
 800c424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c426:	2303      	movs	r3, #3
 800c428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c42a:	230a      	movs	r3, #10
 800c42c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c42e:	f107 0314 	add.w	r3, r7, #20
 800c432:	4619      	mov	r1, r3
 800c434:	4812      	ldr	r0, [pc, #72]	; (800c480 <HAL_HCD_MspInit+0xc0>)
 800c436:	f7f9 fc21 	bl	8005c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c43a:	4b10      	ldr	r3, [pc, #64]	; (800c47c <HAL_HCD_MspInit+0xbc>)
 800c43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43e:	4a0f      	ldr	r2, [pc, #60]	; (800c47c <HAL_HCD_MspInit+0xbc>)
 800c440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c444:	6353      	str	r3, [r2, #52]	; 0x34
 800c446:	2300      	movs	r3, #0
 800c448:	60fb      	str	r3, [r7, #12]
 800c44a:	4b0c      	ldr	r3, [pc, #48]	; (800c47c <HAL_HCD_MspInit+0xbc>)
 800c44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c44e:	4a0b      	ldr	r2, [pc, #44]	; (800c47c <HAL_HCD_MspInit+0xbc>)
 800c450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c454:	6453      	str	r3, [r2, #68]	; 0x44
 800c456:	4b09      	ldr	r3, [pc, #36]	; (800c47c <HAL_HCD_MspInit+0xbc>)
 800c458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c45a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c45e:	60fb      	str	r3, [r7, #12]
 800c460:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c462:	2200      	movs	r2, #0
 800c464:	2100      	movs	r1, #0
 800c466:	2043      	movs	r0, #67	; 0x43
 800c468:	f7f9 fbde 	bl	8005c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c46c:	2043      	movs	r0, #67	; 0x43
 800c46e:	f7f9 fbf7 	bl	8005c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c472:	bf00      	nop
 800c474:	3728      	adds	r7, #40	; 0x28
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	40023800 	.word	0x40023800
 800c480:	40020000 	.word	0x40020000

0800c484 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c492:	4618      	mov	r0, r3
 800c494:	f7fe ffed 	bl	800b472 <USBH_LL_IncTimer>
}
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7ff f825 	bl	800b4fe <USBH_LL_Connect>
}
 800c4b4:	bf00      	nop
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff f82e 	bl	800b52c <USBH_LL_Disconnect>
}
 800c4d0:	bf00      	nop
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	70fb      	strb	r3, [r7, #3]
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c502:	4618      	mov	r0, r3
 800c504:	f7fe ffdf 	bl	800b4c6 <USBH_LL_PortEnabled>
}
 800c508:	bf00      	nop
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fe ffdf 	bl	800b4e2 <USBH_LL_PortDisabled>
}
 800c524:	bf00      	nop
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d12a      	bne.n	800c594 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c53e:	4a18      	ldr	r2, [pc, #96]	; (800c5a0 <USBH_LL_Init+0x74>)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a15      	ldr	r2, [pc, #84]	; (800c5a0 <USBH_LL_Init+0x74>)
 800c54a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c54e:	4b14      	ldr	r3, [pc, #80]	; (800c5a0 <USBH_LL_Init+0x74>)
 800c550:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c554:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c556:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <USBH_LL_Init+0x74>)
 800c558:	2208      	movs	r2, #8
 800c55a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c55c:	4b10      	ldr	r3, [pc, #64]	; (800c5a0 <USBH_LL_Init+0x74>)
 800c55e:	2201      	movs	r2, #1
 800c560:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c562:	4b0f      	ldr	r3, [pc, #60]	; (800c5a0 <USBH_LL_Init+0x74>)
 800c564:	2200      	movs	r2, #0
 800c566:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c568:	4b0d      	ldr	r3, [pc, #52]	; (800c5a0 <USBH_LL_Init+0x74>)
 800c56a:	2202      	movs	r2, #2
 800c56c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c56e:	4b0c      	ldr	r3, [pc, #48]	; (800c5a0 <USBH_LL_Init+0x74>)
 800c570:	2200      	movs	r2, #0
 800c572:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c574:	480a      	ldr	r0, [pc, #40]	; (800c5a0 <USBH_LL_Init+0x74>)
 800c576:	f7f9 fd38 	bl	8005fea <HAL_HCD_Init>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d001      	beq.n	800c584 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c580:	f7f9 f813 	bl	80055aa <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c584:	4806      	ldr	r0, [pc, #24]	; (800c5a0 <USBH_LL_Init+0x74>)
 800c586:	f7fa f91c 	bl	80067c2 <HAL_HCD_GetCurrentFrame>
 800c58a:	4603      	mov	r3, r0
 800c58c:	4619      	mov	r1, r3
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7fe ff60 	bl	800b454 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	200149b0 	.word	0x200149b0

0800c5a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fa f88b 	bl	80066d6 <HAL_HCD_Start>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c5c4:	7bfb      	ldrb	r3, [r7, #15]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 f95c 	bl	800c884 <USBH_Get_USB_Status>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b084      	sub	sp, #16
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fa f893 	bl	800671c <HAL_HCD_Stop>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c5fa:	7bfb      	ldrb	r3, [r7, #15]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 f941 	bl	800c884 <USBH_Get_USB_Status>
 800c602:	4603      	mov	r3, r0
 800c604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c606:	7bbb      	ldrb	r3, [r7, #14]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c618:	2301      	movs	r3, #1
 800c61a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c622:	4618      	mov	r0, r3
 800c624:	f7fa f8db 	bl	80067de <HAL_HCD_GetCurrentSpeed>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d00c      	beq.n	800c648 <USBH_LL_GetSpeed+0x38>
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d80d      	bhi.n	800c64e <USBH_LL_GetSpeed+0x3e>
 800c632:	2b00      	cmp	r3, #0
 800c634:	d002      	beq.n	800c63c <USBH_LL_GetSpeed+0x2c>
 800c636:	2b01      	cmp	r3, #1
 800c638:	d003      	beq.n	800c642 <USBH_LL_GetSpeed+0x32>
 800c63a:	e008      	b.n	800c64e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c63c:	2300      	movs	r3, #0
 800c63e:	73fb      	strb	r3, [r7, #15]
    break;
 800c640:	e008      	b.n	800c654 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c642:	2301      	movs	r3, #1
 800c644:	73fb      	strb	r3, [r7, #15]
    break;
 800c646:	e005      	b.n	800c654 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c648:	2302      	movs	r3, #2
 800c64a:	73fb      	strb	r3, [r7, #15]
    break;
 800c64c:	e002      	b.n	800c654 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c64e:	2301      	movs	r3, #1
 800c650:	73fb      	strb	r3, [r7, #15]
    break;
 800c652:	bf00      	nop
  }
  return  speed;
 800c654:	7bfb      	ldrb	r3, [r7, #15]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b084      	sub	sp, #16
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c66a:	2300      	movs	r3, #0
 800c66c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c674:	4618      	mov	r0, r3
 800c676:	f7fa f86e 	bl	8006756 <HAL_HCD_ResetPort>
 800c67a:	4603      	mov	r3, r0
 800c67c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
 800c680:	4618      	mov	r0, r3
 800c682:	f000 f8ff 	bl	800c884 <USBH_Get_USB_Status>
 800c686:	4603      	mov	r3, r0
 800c688:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c68a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3710      	adds	r7, #16
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	460b      	mov	r3, r1
 800c69e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6a6:	78fa      	ldrb	r2, [r7, #3]
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fa f875 	bl	800679a <HAL_HCD_HC_GetXferCount>
 800c6b0:	4603      	mov	r3, r0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c6ba:	b590      	push	{r4, r7, lr}
 800c6bc:	b089      	sub	sp, #36	; 0x24
 800c6be:	af04      	add	r7, sp, #16
 800c6c0:	6078      	str	r0, [r7, #4]
 800c6c2:	4608      	mov	r0, r1
 800c6c4:	4611      	mov	r1, r2
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	70fb      	strb	r3, [r7, #3]
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	70bb      	strb	r3, [r7, #2]
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c6e2:	787c      	ldrb	r4, [r7, #1]
 800c6e4:	78ba      	ldrb	r2, [r7, #2]
 800c6e6:	78f9      	ldrb	r1, [r7, #3]
 800c6e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c6ea:	9302      	str	r3, [sp, #8]
 800c6ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	4623      	mov	r3, r4
 800c6fa:	f7f9 fcd8 	bl	80060ae <HAL_HCD_HC_Init>
 800c6fe:	4603      	mov	r3, r0
 800c700:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c702:	7bfb      	ldrb	r3, [r7, #15]
 800c704:	4618      	mov	r0, r3
 800c706:	f000 f8bd 	bl	800c884 <USBH_Get_USB_Status>
 800c70a:	4603      	mov	r3, r0
 800c70c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c70e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3714      	adds	r7, #20
 800c714:	46bd      	mov	sp, r7
 800c716:	bd90      	pop	{r4, r7, pc}

0800c718 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c724:	2300      	movs	r3, #0
 800c726:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c728:	2300      	movs	r3, #0
 800c72a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c732:	78fa      	ldrb	r2, [r7, #3]
 800c734:	4611      	mov	r1, r2
 800c736:	4618      	mov	r0, r3
 800c738:	f7f9 fd48 	bl	80061cc <HAL_HCD_HC_Halt>
 800c73c:	4603      	mov	r3, r0
 800c73e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	4618      	mov	r0, r3
 800c744:	f000 f89e 	bl	800c884 <USBH_Get_USB_Status>
 800c748:	4603      	mov	r3, r0
 800c74a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c74c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c756:	b590      	push	{r4, r7, lr}
 800c758:	b089      	sub	sp, #36	; 0x24
 800c75a:	af04      	add	r7, sp, #16
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	4608      	mov	r0, r1
 800c760:	4611      	mov	r1, r2
 800c762:	461a      	mov	r2, r3
 800c764:	4603      	mov	r3, r0
 800c766:	70fb      	strb	r3, [r7, #3]
 800c768:	460b      	mov	r3, r1
 800c76a:	70bb      	strb	r3, [r7, #2]
 800c76c:	4613      	mov	r3, r2
 800c76e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c774:	2300      	movs	r3, #0
 800c776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c77e:	787c      	ldrb	r4, [r7, #1]
 800c780:	78ba      	ldrb	r2, [r7, #2]
 800c782:	78f9      	ldrb	r1, [r7, #3]
 800c784:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c788:	9303      	str	r3, [sp, #12]
 800c78a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c78c:	9302      	str	r3, [sp, #8]
 800c78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c790:	9301      	str	r3, [sp, #4]
 800c792:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	4623      	mov	r3, r4
 800c79a:	f7f9 fd3b 	bl	8006214 <HAL_HCD_HC_SubmitRequest>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c7a2:	7bfb      	ldrb	r3, [r7, #15]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f000 f86d 	bl	800c884 <USBH_Get_USB_Status>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd90      	pop	{r4, r7, pc}

0800c7b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7ca:	78fa      	ldrb	r2, [r7, #3]
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7f9 ffcf 	bl	8006772 <HAL_HCD_HC_GetURBState>
 800c7d4:	4603      	mov	r3, r0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3708      	adds	r7, #8
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b082      	sub	sp, #8
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d103      	bne.n	800c7fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c7f4:	78fb      	ldrb	r3, [r7, #3]
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f000 f870 	bl	800c8dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c7fc:	20c8      	movs	r0, #200	; 0xc8
 800c7fe:	f7f9 f937 	bl	8005a70 <HAL_Delay>
  return USBH_OK;
 800c802:	2300      	movs	r3, #0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	460b      	mov	r3, r1
 800c816:	70fb      	strb	r3, [r7, #3]
 800c818:	4613      	mov	r3, r2
 800c81a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c822:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c824:	78fb      	ldrb	r3, [r7, #3]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	212c      	movs	r1, #44	; 0x2c
 800c82a:	fb01 f303 	mul.w	r3, r1, r3
 800c82e:	4413      	add	r3, r2
 800c830:	333b      	adds	r3, #59	; 0x3b
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d009      	beq.n	800c84c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c838:	78fb      	ldrb	r3, [r7, #3]
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	212c      	movs	r1, #44	; 0x2c
 800c83e:	fb01 f303 	mul.w	r3, r1, r3
 800c842:	4413      	add	r3, r2
 800c844:	3354      	adds	r3, #84	; 0x54
 800c846:	78ba      	ldrb	r2, [r7, #2]
 800c848:	701a      	strb	r2, [r3, #0]
 800c84a:	e008      	b.n	800c85e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c84c:	78fb      	ldrb	r3, [r7, #3]
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	212c      	movs	r1, #44	; 0x2c
 800c852:	fb01 f303 	mul.w	r3, r1, r3
 800c856:	4413      	add	r3, r2
 800c858:	3355      	adds	r3, #85	; 0x55
 800c85a:	78ba      	ldrb	r2, [r7, #2]
 800c85c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c85e:	2300      	movs	r3, #0
}
 800c860:	4618      	mov	r0, r3
 800c862:	3714      	adds	r7, #20
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7f9 f8fb 	bl	8005a70 <HAL_Delay>
}
 800c87a:	bf00      	nop
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
	...

0800c884 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	4603      	mov	r3, r0
 800c88c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c88e:	2300      	movs	r3, #0
 800c890:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c892:	79fb      	ldrb	r3, [r7, #7]
 800c894:	2b03      	cmp	r3, #3
 800c896:	d817      	bhi.n	800c8c8 <USBH_Get_USB_Status+0x44>
 800c898:	a201      	add	r2, pc, #4	; (adr r2, 800c8a0 <USBH_Get_USB_Status+0x1c>)
 800c89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89e:	bf00      	nop
 800c8a0:	0800c8b1 	.word	0x0800c8b1
 800c8a4:	0800c8b7 	.word	0x0800c8b7
 800c8a8:	0800c8bd 	.word	0x0800c8bd
 800c8ac:	0800c8c3 	.word	0x0800c8c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c8b4:	e00b      	b.n	800c8ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c8ba:	e008      	b.n	800c8ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c0:	e005      	b.n	800c8ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c6:	e002      	b.n	800c8ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c8c8:	2302      	movs	r3, #2
 800c8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c8cc:	bf00      	nop
  }
  return usb_status;
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3714      	adds	r7, #20
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c8e6:	79fb      	ldrb	r3, [r7, #7]
 800c8e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c8ea:	79fb      	ldrb	r3, [r7, #7]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d102      	bne.n	800c8f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	73fb      	strb	r3, [r7, #15]
 800c8f4:	e001      	b.n	800c8fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	2101      	movs	r1, #1
 800c900:	4803      	ldr	r0, [pc, #12]	; (800c910 <MX_DriverVbusFS+0x34>)
 800c902:	f7f9 fb3f 	bl	8005f84 <HAL_GPIO_WritePin>
}
 800c906:	bf00      	nop
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	40020800 	.word	0x40020800

0800c914 <__errno>:
 800c914:	4b01      	ldr	r3, [pc, #4]	; (800c91c <__errno+0x8>)
 800c916:	6818      	ldr	r0, [r3, #0]
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	2000003c 	.word	0x2000003c

0800c920 <__libc_init_array>:
 800c920:	b570      	push	{r4, r5, r6, lr}
 800c922:	4d0d      	ldr	r5, [pc, #52]	; (800c958 <__libc_init_array+0x38>)
 800c924:	4c0d      	ldr	r4, [pc, #52]	; (800c95c <__libc_init_array+0x3c>)
 800c926:	1b64      	subs	r4, r4, r5
 800c928:	10a4      	asrs	r4, r4, #2
 800c92a:	2600      	movs	r6, #0
 800c92c:	42a6      	cmp	r6, r4
 800c92e:	d109      	bne.n	800c944 <__libc_init_array+0x24>
 800c930:	4d0b      	ldr	r5, [pc, #44]	; (800c960 <__libc_init_array+0x40>)
 800c932:	4c0c      	ldr	r4, [pc, #48]	; (800c964 <__libc_init_array+0x44>)
 800c934:	f000 f94c 	bl	800cbd0 <_init>
 800c938:	1b64      	subs	r4, r4, r5
 800c93a:	10a4      	asrs	r4, r4, #2
 800c93c:	2600      	movs	r6, #0
 800c93e:	42a6      	cmp	r6, r4
 800c940:	d105      	bne.n	800c94e <__libc_init_array+0x2e>
 800c942:	bd70      	pop	{r4, r5, r6, pc}
 800c944:	f855 3b04 	ldr.w	r3, [r5], #4
 800c948:	4798      	blx	r3
 800c94a:	3601      	adds	r6, #1
 800c94c:	e7ee      	b.n	800c92c <__libc_init_array+0xc>
 800c94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c952:	4798      	blx	r3
 800c954:	3601      	adds	r6, #1
 800c956:	e7f2      	b.n	800c93e <__libc_init_array+0x1e>
 800c958:	0800cd48 	.word	0x0800cd48
 800c95c:	0800cd48 	.word	0x0800cd48
 800c960:	0800cd48 	.word	0x0800cd48
 800c964:	0800cd4c 	.word	0x0800cd4c

0800c968 <malloc>:
 800c968:	4b02      	ldr	r3, [pc, #8]	; (800c974 <malloc+0xc>)
 800c96a:	4601      	mov	r1, r0
 800c96c:	6818      	ldr	r0, [r3, #0]
 800c96e:	f000 b89d 	b.w	800caac <_malloc_r>
 800c972:	bf00      	nop
 800c974:	2000003c 	.word	0x2000003c

0800c978 <free>:
 800c978:	4b02      	ldr	r3, [pc, #8]	; (800c984 <free+0xc>)
 800c97a:	4601      	mov	r1, r0
 800c97c:	6818      	ldr	r0, [r3, #0]
 800c97e:	f000 b829 	b.w	800c9d4 <_free_r>
 800c982:	bf00      	nop
 800c984:	2000003c 	.word	0x2000003c

0800c988 <memcmp>:
 800c988:	b510      	push	{r4, lr}
 800c98a:	3901      	subs	r1, #1
 800c98c:	4402      	add	r2, r0
 800c98e:	4290      	cmp	r0, r2
 800c990:	d101      	bne.n	800c996 <memcmp+0xe>
 800c992:	2000      	movs	r0, #0
 800c994:	e005      	b.n	800c9a2 <memcmp+0x1a>
 800c996:	7803      	ldrb	r3, [r0, #0]
 800c998:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c99c:	42a3      	cmp	r3, r4
 800c99e:	d001      	beq.n	800c9a4 <memcmp+0x1c>
 800c9a0:	1b18      	subs	r0, r3, r4
 800c9a2:	bd10      	pop	{r4, pc}
 800c9a4:	3001      	adds	r0, #1
 800c9a6:	e7f2      	b.n	800c98e <memcmp+0x6>

0800c9a8 <memcpy>:
 800c9a8:	440a      	add	r2, r1
 800c9aa:	4291      	cmp	r1, r2
 800c9ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9b0:	d100      	bne.n	800c9b4 <memcpy+0xc>
 800c9b2:	4770      	bx	lr
 800c9b4:	b510      	push	{r4, lr}
 800c9b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9be:	4291      	cmp	r1, r2
 800c9c0:	d1f9      	bne.n	800c9b6 <memcpy+0xe>
 800c9c2:	bd10      	pop	{r4, pc}

0800c9c4 <memset>:
 800c9c4:	4402      	add	r2, r0
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d100      	bne.n	800c9ce <memset+0xa>
 800c9cc:	4770      	bx	lr
 800c9ce:	f803 1b01 	strb.w	r1, [r3], #1
 800c9d2:	e7f9      	b.n	800c9c8 <memset+0x4>

0800c9d4 <_free_r>:
 800c9d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9d6:	2900      	cmp	r1, #0
 800c9d8:	d044      	beq.n	800ca64 <_free_r+0x90>
 800c9da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9de:	9001      	str	r0, [sp, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f1a1 0404 	sub.w	r4, r1, #4
 800c9e6:	bfb8      	it	lt
 800c9e8:	18e4      	addlt	r4, r4, r3
 800c9ea:	f000 f8e3 	bl	800cbb4 <__malloc_lock>
 800c9ee:	4a1e      	ldr	r2, [pc, #120]	; (800ca68 <_free_r+0x94>)
 800c9f0:	9801      	ldr	r0, [sp, #4]
 800c9f2:	6813      	ldr	r3, [r2, #0]
 800c9f4:	b933      	cbnz	r3, 800ca04 <_free_r+0x30>
 800c9f6:	6063      	str	r3, [r4, #4]
 800c9f8:	6014      	str	r4, [r2, #0]
 800c9fa:	b003      	add	sp, #12
 800c9fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca00:	f000 b8de 	b.w	800cbc0 <__malloc_unlock>
 800ca04:	42a3      	cmp	r3, r4
 800ca06:	d908      	bls.n	800ca1a <_free_r+0x46>
 800ca08:	6825      	ldr	r5, [r4, #0]
 800ca0a:	1961      	adds	r1, r4, r5
 800ca0c:	428b      	cmp	r3, r1
 800ca0e:	bf01      	itttt	eq
 800ca10:	6819      	ldreq	r1, [r3, #0]
 800ca12:	685b      	ldreq	r3, [r3, #4]
 800ca14:	1949      	addeq	r1, r1, r5
 800ca16:	6021      	streq	r1, [r4, #0]
 800ca18:	e7ed      	b.n	800c9f6 <_free_r+0x22>
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	b10b      	cbz	r3, 800ca24 <_free_r+0x50>
 800ca20:	42a3      	cmp	r3, r4
 800ca22:	d9fa      	bls.n	800ca1a <_free_r+0x46>
 800ca24:	6811      	ldr	r1, [r2, #0]
 800ca26:	1855      	adds	r5, r2, r1
 800ca28:	42a5      	cmp	r5, r4
 800ca2a:	d10b      	bne.n	800ca44 <_free_r+0x70>
 800ca2c:	6824      	ldr	r4, [r4, #0]
 800ca2e:	4421      	add	r1, r4
 800ca30:	1854      	adds	r4, r2, r1
 800ca32:	42a3      	cmp	r3, r4
 800ca34:	6011      	str	r1, [r2, #0]
 800ca36:	d1e0      	bne.n	800c9fa <_free_r+0x26>
 800ca38:	681c      	ldr	r4, [r3, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	6053      	str	r3, [r2, #4]
 800ca3e:	4421      	add	r1, r4
 800ca40:	6011      	str	r1, [r2, #0]
 800ca42:	e7da      	b.n	800c9fa <_free_r+0x26>
 800ca44:	d902      	bls.n	800ca4c <_free_r+0x78>
 800ca46:	230c      	movs	r3, #12
 800ca48:	6003      	str	r3, [r0, #0]
 800ca4a:	e7d6      	b.n	800c9fa <_free_r+0x26>
 800ca4c:	6825      	ldr	r5, [r4, #0]
 800ca4e:	1961      	adds	r1, r4, r5
 800ca50:	428b      	cmp	r3, r1
 800ca52:	bf04      	itt	eq
 800ca54:	6819      	ldreq	r1, [r3, #0]
 800ca56:	685b      	ldreq	r3, [r3, #4]
 800ca58:	6063      	str	r3, [r4, #4]
 800ca5a:	bf04      	itt	eq
 800ca5c:	1949      	addeq	r1, r1, r5
 800ca5e:	6021      	streq	r1, [r4, #0]
 800ca60:	6054      	str	r4, [r2, #4]
 800ca62:	e7ca      	b.n	800c9fa <_free_r+0x26>
 800ca64:	b003      	add	sp, #12
 800ca66:	bd30      	pop	{r4, r5, pc}
 800ca68:	20014cb4 	.word	0x20014cb4

0800ca6c <sbrk_aligned>:
 800ca6c:	b570      	push	{r4, r5, r6, lr}
 800ca6e:	4e0e      	ldr	r6, [pc, #56]	; (800caa8 <sbrk_aligned+0x3c>)
 800ca70:	460c      	mov	r4, r1
 800ca72:	6831      	ldr	r1, [r6, #0]
 800ca74:	4605      	mov	r5, r0
 800ca76:	b911      	cbnz	r1, 800ca7e <sbrk_aligned+0x12>
 800ca78:	f000 f88c 	bl	800cb94 <_sbrk_r>
 800ca7c:	6030      	str	r0, [r6, #0]
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4628      	mov	r0, r5
 800ca82:	f000 f887 	bl	800cb94 <_sbrk_r>
 800ca86:	1c43      	adds	r3, r0, #1
 800ca88:	d00a      	beq.n	800caa0 <sbrk_aligned+0x34>
 800ca8a:	1cc4      	adds	r4, r0, #3
 800ca8c:	f024 0403 	bic.w	r4, r4, #3
 800ca90:	42a0      	cmp	r0, r4
 800ca92:	d007      	beq.n	800caa4 <sbrk_aligned+0x38>
 800ca94:	1a21      	subs	r1, r4, r0
 800ca96:	4628      	mov	r0, r5
 800ca98:	f000 f87c 	bl	800cb94 <_sbrk_r>
 800ca9c:	3001      	adds	r0, #1
 800ca9e:	d101      	bne.n	800caa4 <sbrk_aligned+0x38>
 800caa0:	f04f 34ff 	mov.w	r4, #4294967295
 800caa4:	4620      	mov	r0, r4
 800caa6:	bd70      	pop	{r4, r5, r6, pc}
 800caa8:	20014cb8 	.word	0x20014cb8

0800caac <_malloc_r>:
 800caac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab0:	1ccd      	adds	r5, r1, #3
 800cab2:	f025 0503 	bic.w	r5, r5, #3
 800cab6:	3508      	adds	r5, #8
 800cab8:	2d0c      	cmp	r5, #12
 800caba:	bf38      	it	cc
 800cabc:	250c      	movcc	r5, #12
 800cabe:	2d00      	cmp	r5, #0
 800cac0:	4607      	mov	r7, r0
 800cac2:	db01      	blt.n	800cac8 <_malloc_r+0x1c>
 800cac4:	42a9      	cmp	r1, r5
 800cac6:	d905      	bls.n	800cad4 <_malloc_r+0x28>
 800cac8:	230c      	movs	r3, #12
 800caca:	603b      	str	r3, [r7, #0]
 800cacc:	2600      	movs	r6, #0
 800cace:	4630      	mov	r0, r6
 800cad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cad4:	4e2e      	ldr	r6, [pc, #184]	; (800cb90 <_malloc_r+0xe4>)
 800cad6:	f000 f86d 	bl	800cbb4 <__malloc_lock>
 800cada:	6833      	ldr	r3, [r6, #0]
 800cadc:	461c      	mov	r4, r3
 800cade:	bb34      	cbnz	r4, 800cb2e <_malloc_r+0x82>
 800cae0:	4629      	mov	r1, r5
 800cae2:	4638      	mov	r0, r7
 800cae4:	f7ff ffc2 	bl	800ca6c <sbrk_aligned>
 800cae8:	1c43      	adds	r3, r0, #1
 800caea:	4604      	mov	r4, r0
 800caec:	d14d      	bne.n	800cb8a <_malloc_r+0xde>
 800caee:	6834      	ldr	r4, [r6, #0]
 800caf0:	4626      	mov	r6, r4
 800caf2:	2e00      	cmp	r6, #0
 800caf4:	d140      	bne.n	800cb78 <_malloc_r+0xcc>
 800caf6:	6823      	ldr	r3, [r4, #0]
 800caf8:	4631      	mov	r1, r6
 800cafa:	4638      	mov	r0, r7
 800cafc:	eb04 0803 	add.w	r8, r4, r3
 800cb00:	f000 f848 	bl	800cb94 <_sbrk_r>
 800cb04:	4580      	cmp	r8, r0
 800cb06:	d13a      	bne.n	800cb7e <_malloc_r+0xd2>
 800cb08:	6821      	ldr	r1, [r4, #0]
 800cb0a:	3503      	adds	r5, #3
 800cb0c:	1a6d      	subs	r5, r5, r1
 800cb0e:	f025 0503 	bic.w	r5, r5, #3
 800cb12:	3508      	adds	r5, #8
 800cb14:	2d0c      	cmp	r5, #12
 800cb16:	bf38      	it	cc
 800cb18:	250c      	movcc	r5, #12
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	f7ff ffa5 	bl	800ca6c <sbrk_aligned>
 800cb22:	3001      	adds	r0, #1
 800cb24:	d02b      	beq.n	800cb7e <_malloc_r+0xd2>
 800cb26:	6823      	ldr	r3, [r4, #0]
 800cb28:	442b      	add	r3, r5
 800cb2a:	6023      	str	r3, [r4, #0]
 800cb2c:	e00e      	b.n	800cb4c <_malloc_r+0xa0>
 800cb2e:	6822      	ldr	r2, [r4, #0]
 800cb30:	1b52      	subs	r2, r2, r5
 800cb32:	d41e      	bmi.n	800cb72 <_malloc_r+0xc6>
 800cb34:	2a0b      	cmp	r2, #11
 800cb36:	d916      	bls.n	800cb66 <_malloc_r+0xba>
 800cb38:	1961      	adds	r1, r4, r5
 800cb3a:	42a3      	cmp	r3, r4
 800cb3c:	6025      	str	r5, [r4, #0]
 800cb3e:	bf18      	it	ne
 800cb40:	6059      	strne	r1, [r3, #4]
 800cb42:	6863      	ldr	r3, [r4, #4]
 800cb44:	bf08      	it	eq
 800cb46:	6031      	streq	r1, [r6, #0]
 800cb48:	5162      	str	r2, [r4, r5]
 800cb4a:	604b      	str	r3, [r1, #4]
 800cb4c:	4638      	mov	r0, r7
 800cb4e:	f104 060b 	add.w	r6, r4, #11
 800cb52:	f000 f835 	bl	800cbc0 <__malloc_unlock>
 800cb56:	f026 0607 	bic.w	r6, r6, #7
 800cb5a:	1d23      	adds	r3, r4, #4
 800cb5c:	1af2      	subs	r2, r6, r3
 800cb5e:	d0b6      	beq.n	800cace <_malloc_r+0x22>
 800cb60:	1b9b      	subs	r3, r3, r6
 800cb62:	50a3      	str	r3, [r4, r2]
 800cb64:	e7b3      	b.n	800cace <_malloc_r+0x22>
 800cb66:	6862      	ldr	r2, [r4, #4]
 800cb68:	42a3      	cmp	r3, r4
 800cb6a:	bf0c      	ite	eq
 800cb6c:	6032      	streq	r2, [r6, #0]
 800cb6e:	605a      	strne	r2, [r3, #4]
 800cb70:	e7ec      	b.n	800cb4c <_malloc_r+0xa0>
 800cb72:	4623      	mov	r3, r4
 800cb74:	6864      	ldr	r4, [r4, #4]
 800cb76:	e7b2      	b.n	800cade <_malloc_r+0x32>
 800cb78:	4634      	mov	r4, r6
 800cb7a:	6876      	ldr	r6, [r6, #4]
 800cb7c:	e7b9      	b.n	800caf2 <_malloc_r+0x46>
 800cb7e:	230c      	movs	r3, #12
 800cb80:	603b      	str	r3, [r7, #0]
 800cb82:	4638      	mov	r0, r7
 800cb84:	f000 f81c 	bl	800cbc0 <__malloc_unlock>
 800cb88:	e7a1      	b.n	800cace <_malloc_r+0x22>
 800cb8a:	6025      	str	r5, [r4, #0]
 800cb8c:	e7de      	b.n	800cb4c <_malloc_r+0xa0>
 800cb8e:	bf00      	nop
 800cb90:	20014cb4 	.word	0x20014cb4

0800cb94 <_sbrk_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	4d06      	ldr	r5, [pc, #24]	; (800cbb0 <_sbrk_r+0x1c>)
 800cb98:	2300      	movs	r3, #0
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	4608      	mov	r0, r1
 800cb9e:	602b      	str	r3, [r5, #0]
 800cba0:	f7f8 feb2 	bl	8005908 <_sbrk>
 800cba4:	1c43      	adds	r3, r0, #1
 800cba6:	d102      	bne.n	800cbae <_sbrk_r+0x1a>
 800cba8:	682b      	ldr	r3, [r5, #0]
 800cbaa:	b103      	cbz	r3, 800cbae <_sbrk_r+0x1a>
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	bd38      	pop	{r3, r4, r5, pc}
 800cbb0:	20014cbc 	.word	0x20014cbc

0800cbb4 <__malloc_lock>:
 800cbb4:	4801      	ldr	r0, [pc, #4]	; (800cbbc <__malloc_lock+0x8>)
 800cbb6:	f000 b809 	b.w	800cbcc <__retarget_lock_acquire_recursive>
 800cbba:	bf00      	nop
 800cbbc:	20014cc0 	.word	0x20014cc0

0800cbc0 <__malloc_unlock>:
 800cbc0:	4801      	ldr	r0, [pc, #4]	; (800cbc8 <__malloc_unlock+0x8>)
 800cbc2:	f000 b804 	b.w	800cbce <__retarget_lock_release_recursive>
 800cbc6:	bf00      	nop
 800cbc8:	20014cc0 	.word	0x20014cc0

0800cbcc <__retarget_lock_acquire_recursive>:
 800cbcc:	4770      	bx	lr

0800cbce <__retarget_lock_release_recursive>:
 800cbce:	4770      	bx	lr

0800cbd0 <_init>:
 800cbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd2:	bf00      	nop
 800cbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd6:	bc08      	pop	{r3}
 800cbd8:	469e      	mov	lr, r3
 800cbda:	4770      	bx	lr

0800cbdc <_fini>:
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbde:	bf00      	nop
 800cbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbe2:	bc08      	pop	{r3}
 800cbe4:	469e      	mov	lr, r3
 800cbe6:	4770      	bx	lr
